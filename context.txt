THIS IS THE FIRST SCREAM SCRING: "HELLO_IM_FIRST!!!??"

<files>
<file path=".dev/docs/manual-poly-clob.ts">
<![CDATA[
`
POLYMARKET CLOB - CONCISE DOCS
==============================

TYPES
=====

import{SignatureType,SignedOrder}from"@polymarket/order-utils";import{AxiosRequestHeaders}from"axios";export interface ApiKeyCreds{key:string;secret:string;passphrase:string}export interface ApiKeyRaw{apiKey:string;secret:string;passphrase:string}export interface L2HeaderArgs{method:string;requestPath:string;body? :string}export interface L1PolyHeader extends AxiosRequestHeaders{POLY_ADDRESS:string;POLY_SIGNATURE:string;POLY_TIMESTAMP:string;POLY_NONCE:string}export interface L2PolyHeader extends AxiosRequestHeaders{POLY_ADDRESS:string;POLY_SIGNATURE:string;POLY_TIMESTAMP:string;POLY_API_KEY:string;POLY_PASSPHRASE:string}export declare enum Side{BUY="BUY",SELL="SELL"}export declare enum OrderType{GTC="GTC",FOK="FOK",GTD="GTD",FAK="FAK"}export interface PostOrdersArgs{order:SignedOrder;orderType:OrderType}export interface NewOrder<T extends OrderType>{readonlyorder:{readonlysalt:number;readonly maker:string;readonly signer:string;readonly taker:string;readonly tokenId:string;readonly makerAmount:string;readonly takerAmount:string;readonly expiration:string;readonly nonce:string;readonly feeRateBps:string;readonly side:Side;readonly signatureType:SignatureType;readonly signature:string};readonly owner:string;readonly orderType:T;readonly deferExec:boolean};export interface UserOrder{tokenID:string;price:number;size:number;side:Side;feeRateBps? :number;nonce? :number;expiration? :number;taker? :string}export interface UserMarketOrder{tokenID:string;price? :number;amount:number;side:Side;feeRateBps? :number;nonce? :number;taker? :string;orderType? :OrderType.FOK|OrderType.FAK}export interface OrderPayload{orderID:string}export interface ApiKeysResponse{apiKeys:ApiKeyCreds[]}export interface BanStatus{closed_only:boolean}export interface OrderResponse{success:boolean;errorMsg:string;orderID:string;transactionsHashes:string[];status:string;takingAmount:string;makingAmount:string}export interface OpenOrder{id:string;status:string;owner:string;maker_address:string;market:string;asset_id:string;side:string;original_size:string;size_matched:string;price:string;associate_trades:string[];outcome:string;created_at:number;expiration:string;order_type:string}export typeOpenOrdersResponse=OpenOrder[];export interface TradeParams{id? :string;maker_address? :string;market? :string;asset_id? :string;before? :string;after? :string}export interface OpenOrderParams{id? :string;market? :string;asset_id? :string}export interface MakerOrder{order_id:string;owner:string;maker_address:string;matched_amount:string;price:string;fee_rate_bps:string;asset_id:string;outcome:string;side:Side}export interface Trade{id:string;taker_order_id:string;market:string;asset_id:string;side:Side;size:string;fee_rate_bps:string;price:string;status:string;match_time:string;last_update:string;outcome:string;bucket_index:number;owner:string;maker_address:string;maker_orders:MakerOrder[];transaction_hash:string;trader_side:"TAKER"|"MAKER"}export declare enum Chain{POLYGON=137,AMOY=80002}export interface MarketPrice{t:number;p:number}export interface PriceHistoryFilterParams{market? :string;startTs? :number;endTs? :number;fidelity? :number;interval? :PriceHistoryInterval}export declare enum PriceHistoryInterval{MAX="max",ONE_WEEK="1w",ONE_DAY="1d",SIX_HOURS="6h",ONE_HOUR="1h"}export interface DropNotificationParams{ids:string[]}export interface Notification{type:number;owner:string;payload:any}export interface OrderMarketCancelParams{market? :string;asset_id? :string}export interface OrderBookSummary{market:string;asset_id:string;timestamp:string;bids:OrderSummary[];asks:OrderSummary[];min_order_size:string;tick_size:string;neg_risk:boolean;hash:string}export interface OrderSummary{price:string;size:string}export declare enum AssetType{COLLATERAL="COLLATERAL",CONDITIONAL="CONDITIONAL"}export interface BalanceAllowanceParams{asset_type:AssetType;token_id? :string}export interface BalanceAllowanceResponse{balance:string;allowance:string}export interface OrderScoringParams{order_id:string}export interface OrderScoring{scoring:boolean}export interface OrdersScoringParams{orderIds:string[]}export typeOrdersScoring={[orderId in string]:boolean};export typeCreateOrderOptions={tickSize:TickSize;negRisk? :boolean};export typeTickSize="0.1"|"0.01"|"0.001"|"0.0001";export interface RoundConfig{readonly price:number;readonly size:number;readonly amount:number}export interface TickSizes{[tokenId:string]:TickSize}export interface NegRisk{[tokenId:string]:boolean}export interface FeeRates{[tokenId:string]:number}export interface PaginationPayload{readonly limit:number;readonly count:number;readonly next_cursor:string;readonly data:any[]}export interface MarketTradeEvent{event_type:string;market:{condition_id:string;asset_id:string;question:string;icon:string;slug:string};user:{address:string;username:string;profile_picture:string;optimized_profile_picture:string;pseudonym:string};side:Side;size:string;fee_rate_bps:string;price:string;outcome:string;outcome_index:number;transaction_hash:string;timestamp:string}export interface BookParams{token_id:string;side:Side}export interface UserEarning{date:string;condition_id:string;asset_address:string;maker_address:string;earnings:number;asset_rate:number}export interface TotalUserEarning{date:string;asset_address:string;maker_address:string;earnings:number;asset_rate:number}export interface RewardsPercentages{[market:string]:number}export interface Token{token_id:string;outcome:string;price:number}export interface RewardsConfig{asset_address:string;start_date:string;end_date:string;rate_per_day:number;total_rewards:number}export interface MarketReward{condition_id:string;question:string;market_slug:string;event_slug:string;image:string;rewards_max_spread:number;rewards_min_size:number;tokens:Token[];rewards_config:RewardsConfig[]}export interface Earning{asset_address:string;earnings:number;asset_rate:number}export interface UserRewardsEarning{condition_id:string;question:string;market_slug:string;event_slug:string;image:string;rewards_max_spread:number;rewards_min_size:number;market_competitiveness:number;tokens:Token[];rewards_config:RewardsConfig[];maker_address:string;earning_percentage:number;earnings:Earning[]}

IMPORTANT: THIS IS NOT OUR CUSTOM DEFINED TYPE! To use Polymarket Clob Types, import from "@polymarket/clob-client":
import { OrderBookSummary } from "@polymarket/clob-client";

EXAMPLE 1
==========

await clobClient.getOrderBooks([{ token_id: "22131816317087462222441767751936061504662310118809793860064034214346537862051", side: Side.BUY }]);

[{"market":"0x6cb4d646f8a46b92d5201622c50ff6bf3a41556cf1059c20ba37c0cfbade1c13","asset_id":"22131816317087462222441767751936061504662310118809793860064034214346537862051","timestamp":"1759831913645","hash":"83c78a093583ce964bd8aebc2c01c76999e3bea4","bids":[{"price":"0.01","size":"1000"},{"price":"0.02","size":"460.05"},{"price":"0.03","size":"233.33"},{"price":"0.04","size":"10"},{"price":"0.06","size":"400"},{"price":"0.07","size":"384.14"},{"price":"0.08","size":"272.22"}],"asks":[{"price":"0.99","size":"1000"},{"price":"0.98","size":"6000"},{"price":"0.8","size":"300"},{"price":"0.79","size":"1332"},{"price":"0.78","size":"1272"},{"price":"0.7","size":"2000"},{"price":"0.69","size":"289"},{"price":"0.68","size":"6"},{"price":"0.36","size":"10.93"},{"price":"0.33","size":"20"},{"price":"0.32","size":"10"},{"price":"0.31","size":"25"},{"price":"0.26","size":"285.8"},{"price":"0.16","size":"9.07"},{"price":"0.14","size":"20"},{"price":"0.13","size":"210"},{"price":"0.11","size":"475.14"},{"price":"0.1","size":"409"}],"min_order_size":"5","tick_size":"0.01","neg_risk":true}]
`;

]]>
</file>
<file path=".dev/docs/manual-poly-data-api.md">
<![CDATA[

Developer Quickstart
API Rate Limits
​
How Rate Limiting Works
All rate limits are enforced using Cloudflare’s throttling system. When you exceed the maximum configured rate for any endpoint, requests are throttled rather than immediately rejected. This means:
Throttling: Requests over the limit are delayed/queued rather than dropped
Burst Allowances: Some endpoints allow short bursts above the sustained rate
Time Windows: Limits reset based on sliding time windows (e.g., per 10 seconds, per minute)
​
General Rate Limits
Endpoint	Limit	Notes
General Rate Limiting	5000 requests / 10s	Throttle requests over the maximum configured rate
”OK” Endpoint	50 requests / 10s	Throttle requests over the maximum configured rate
​
Data API Rate Limits
Endpoint	Limit	Notes
Data API (General)	100 requests / 10s	Throttle requests over the maximum configured rate
Data API (Alternative)	600 requests / 1 minute	1 hour block on violation
Data API /trades	30 requests / 10s	Throttle requests over the maximum configured rate
Data API “OK” Endpoint	10 requests / 10s	Throttle requests over the maximum configured rate
​
GAMMA API Rate Limits
Endpoint	Limit	Notes
GAMMA (General)	750 requests / 10s	Throttle requests over the maximum configured rate
GAMMA Get Comments	100 requests / 10s	Throttle requests over the maximum configured rate
GAMMA /events	100 requests / 10s	Throttle requests over the maximum configured rate
GAMMA /markets	100 requests / 10s	Throttle requests over the maximum configured rate
GAMMA /markets /events listing	100 requests / 10s	Throttle requests over the maximum configured rate
GAMMA Tags	100 requests / 10s	Throttle requests over the maximum configured rate
GAMMA Search	300 requests / 10s	Throttle requests over the maximum configured rate
​
CLOB API Rate Limits
​
General CLOB Endpoints
Endpoint	Limit	Notes
CLOB (General)	5000 requests / 10s	Throttle requests over the maximum configured rate
CLOB GET Balance Allowance	125 requests / 10s	Throttle requests over the maximum configured rate
CLOB UPDATE Balance Allowance	20 requests / 10s	Throttle requests over the maximum configured rate
​
CLOB Market Data
Endpoint	Limit	Notes
CLOB /book	200 requests / 10s	Throttle requests over the maximum configured rate
CLOB /books (website)	300 requests / 10s	Throttle requests over the maximum configured rate
CLOB /books	80 requests / 10s	Throttle requests over the maximum configured rate
CLOB /price	200 requests / 10s	Throttle requests over the maximum configured rate
CLOB /prices	80 requests / 10s	Throttle requests over the maximum configured rate
CLOB /midprice	200 requests / 10s	Throttle requests over the maximum configured rate
CLOB /midprices	80 requests / 10s	Throttle requests over the maximum configured rate
​
CLOB Ledger Endpoints
Endpoint	Limit	Notes
CLOB Ledger (/trades /orders /notifications /order)	300 requests / 10s	Throttle requests over the maximum configured rate
CLOB Ledger /data/orders	150 requests / 10s	Throttle requests over the maximum configured rate
CLOB Ledger /data/trades	150 requests / 10s	Throttle requests over the maximum configured rate
CLOB /notifications	125 requests / 10s	Throttle requests over the maximum configured rate
​
CLOB Markets & Pricing
Endpoint	Limit	Notes
CLOB Price History	100 requests / 10s	Throttle requests over the maximum configured rate
CLOB Markets	250 requests / 10s	Throttle requests over the maximum configured rate
CLOB Market Tick Size	50 requests / 10s	Throttle requests over the maximum configured rate
CLOB markets/0x	50 requests / 10s	Throttle requests over the maximum configured rate
CLOB /markets listing	100 requests / 10s	Throttle requests over the maximum configured rate
​
CLOB Authentication
Endpoint	Limit	Notes
CLOB API Keys	50 requests / 10s	Throttle requests over the maximum configured rate
​
CLOB Trading Endpoints
Endpoint	Limit	Notes
CLOB POST /order	2400 requests / 10s (240/s)	BURST - Throttle requests over the maximum configured rate
CLOB POST /order	24000 requests / 10 minutes (40/s)	Throttle requests over the maximum configured rate
CLOB POST /order (by token id)	800 requests / 10s (80/s)	BURST - Throttle requests over the maximum configured rate
CLOB POST /order (by token id)	12000 requests / 10 minutes (20/s)	Throttle requests over the maximum configured rate
CLOB DELETE /order	2400 requests / 10s (240/s)	BURST - Throttle requests over the maximum configured rate
CLOB DELETE /order	24000 requests / 10 minutes (40/s)	Throttle requests over the maximum configured rate
CLOB POST /orders	800 requests / 10s (80/s)	BURST - Throttle requests over the maximum configured rate
CLOB POST /orders	12000 requests / 10 minutes (20/s)	Throttle requests over the maximum configured rate
CLOB DELETE /orders	800 requests / 10s (80/s)	BURST - Throttle requests over the maximum configured rate
CLOB DELETE /orders	12000 requests / 10 minutes (20/s)	Throttle requests over the maximum configured rate
CLOB DELETE /cancel-all	200 requests / 10s (20/s)	BURST - Throttle requests over the maximum configured rate
CLOB DELETE /cancel-all	3000 requests / 10 minutes (5/s)	Throttle requests over the maximum configured rate
CLOB DELETE /cancel-market-orders	800 requests / 10s (80/s)	BURST - Throttle requests over the maximum configured rate
CLOB DELETE /cancel-market-orders	12000 requests / 10 minutes (20/s)	Throttle requests over the maximum configured rate
​
Other API Rate Limits
Endpoint	Limit	Notes
RELAYER /submit	15 requests / 1 minute	Throttle requests over the maximum configured rate
User PNL API	100 requests / 10s	Throttle requests over the maximum configured rate
Glossary


# Polymarket Documentation: Get Current Positions for a User

Returns positions filtered by user and optional filters.

### Endpoint

`GET /positions`

### Request Example (cURL)

```bash
curl --request GET \
  --url https://data-api.polymarket.com/positions
```

### Status Codes

| Status | Description |
| :----- | :---------- |
| 200    | Success     |
| 400    | Bad Request |
| 401    | Unauthorized |
| 500    | Internal Server Error |

### Query Parameters

| Parameter | Type | Required | Default | Description | Example |
| :--- | :--- | :--- | :--- | :--- | :--- |
| `user` | `string` | **required** | | User address (required) | `"0x56687bf447db6ffa42ffe2204a05edaa20f55839"` |
| `market` | `string[]` | | | Comma-separated list of condition IDs. Mutually exclusive with `eventId`. (0x-prefixed 64-hex string) | |
| `eventId` | `integer[]` | | | Comma-separated list of event IDs. Mutually exclusive with `market`. | |
| `sizeThreshold` | `number` | | `1` | Required range: `x >= 0` | |
| `redeemable` | `boolean` | | `false` | | |
| `mergeable` | `boolean` | | `false` | | |
| `limit` | `integer` | | `100` | Required range: `0 <= x <= 500` | |
| `offset` | `integer` | | `0` | Required range: `0 <= x <= 10000` | |
| `sortBy` | `enum<string>` | | `TOKENS` | Available options: `CURRENT`, `INITIAL`, `TOKENS`, `CASHPNL`, `PERCENTPNL`, `TITLE`, `RESOLVING`, `PRICE`, `AVGPRICE` | |
| `sortDirection` | `enum<string>` | | `DESC` | Available options: `ASC`, `DESC` | |
| `title` | `string` | | | Maximum length: 100 | |

### Response (200 Success - `application/json`)

List of positions

```json
[
  {
    "proxyWallet": "0x5adf695a088172a920b6d0b2e5b7d88aa8ffa5e7",
    "asset": "22532673444371000087276855698976185959891603058477427058498190868809631671643",
    "conditionId": "0x2b6a5170c30fbeba1b2317cf98929a446af82e2dc2bc5e84a07959b35bc2edbb",
    "size": 689.991638,
    "avgPrice": 0.212752,
    "initialValue": 146.797100967776,
    "currentValue": 141.44828579,
    "cashPnl": -5.348815177776009,
    "percentPnl": -3.6436790253440687,
    "totalBought": 699.991638,
    "realizedPnl": 0,
    "percentRealizedPnl": -5.020214340108156,
    "curPrice": 0.205,
    "redeemable": false,
    "mergeable": false,
    "title": "Will Celta Vigo win on 2025-10-05?",
    "slug": "lal-cel-mad-2025-10-05-cel",
    "icon": "https://polymarket-upload.s3.us-east-2.amazonaws.com/lal_celta_vigo.png",
    "eventId": "47924",
    "eventSlug": "lal-cel-mad-2025-10-05",
    "outcome": "Yes",
    "outcomeIndex": 0,
    "oppositeOutcome": "No",
    "oppositeAsset": "95416813017536330994120103652237010090486650775573169623122187070843615636364",
    "endDate": "2025-10-05",
    "negativeRisk": true
  },
  ...
]
```

#### Response Fields

| Field | Type | Description | Example |
| :--- | :--- | :--- | :--- |
| `proxyWallet` | `string` | User Profile Address (0x-prefixed, 40 hex chars) | `"0x56687bf447db6ffa42ffe2204a05edaa20f55839"` |
| `asset` | `string` | | |
| `conditionId` | `string` | 0x-prefixed 64-hex string | `"0xdd22472e552920b8438158ea7238bfadfa4f736aa4cee91a6b86c39ead110917"` |
| `size` | `number` | | |
| `avgPrice` | `number` | | |
| `initialValue` | `number` | | |
| `currentValue` | `number` | | |
| `cashPnl` | `number` | | |
| `percentPnl` | `number` | | |
| `totalBought` | `number` | | |
| `realizedPnl` | `number` | | |
| `percentRealizedPnl` | `number` | | |
| `curPrice` | `number` | | |
| `redeemable` | `boolean` | | |
| `mergeable` | `boolean` | | |
| `title` | `string` | | |
| `slug` | `string` | | |
| `icon` | `string` | | |
| `eventSlug` | `string` | | |
| `outcome` | `string` | | |
| `outcomeIndex` | `integer` | | |
| `oppositeOutcome` | `string` | | |
| `oppositeAsset` | `string` | | |
| `endDate` | `string` | | |
| `negativeRisk` | `boolean` | | |

---

*Other related endpoints mentioned:*

* Health check
* Get trades for a user or markets

# Polymarket Documentation: Get Trades for a User or Markets

## Core: Get trades for a user or markets

Returns trades filtered by user and/or market identifiers.

### Endpoint

`GET /trades`

### Request Example (cURL)

```bash
curl --request GET \
  --url https://data-api.polymarket.com/trades
```

### Status Codes

| Status | Description |
| :----- | :---------- |
| 200    | Success     |
| 400    | Bad Request |
| 401    | Unauthorized |
| 500    | Internal Server Error |

### Query Parameters

| Parameter | Type | Default | Required Range | Description | Example |
| :--- | :--- | :--- | :--- | :--- | :--- |
| `limit` | `integer` | `100` | `0 <= x <= 10000` | | |
| `offset` | `integer` | `0` | `0 <= x <= 10000` | | |
| `takerOnly` | `boolean` | `true` | | | |
| `filterType` | `enum<string>` | | | Must be provided together with `filterAmount`. Available options: `CASH`, `TOKENS`. | |
| `filterAmount` | `number` | | `x >= 0` | Must be provided together with `filterType`. | |
| `market` | `string[]` | | | Comma-separated list of condition IDs (0x-prefixed 64-hex string). Mutually exclusive with `eventId`. | |
| `eventId` | `integer[]` | | | Comma-separated list of event IDs. Mutually exclusive with `market`. | |
| `user` | `string` | | | User Profile Address (0x-prefixed, 40 hex chars). | `"0x56687bf447db6ffa42ffe2204a05edaa20f55839"` |
| `side` | `enum<string>` | | | Available options: `BUY`, `SELL`. | |

### Response (200 Success - `application/json`)

List of trades

```json
[
  {
    "proxyWallet": "0x5adf695a088172a920b6d0b2e5b7d88aa8ffa5e7",
    "side": "SELL",
    "asset": "10556390943081047040362703548123771402014160833887429090228355495495795329131",
    "conditionId": "0x1d221af524997a388c696773235bdf08740e620ee1e164659a1302272ffc6f14",
    "size": 129.1,
    "price": 0.22,
    "timestamp": 1759491562,
    "title": "Will Getafe win on 2025-10-03?",
    "slug": "lal-osa-get-2025-10-03-get",
    "icon": "https://polymarket-upload.s3.us-east-2.amazonaws.com/lal_getafe.png",
    "eventSlug": "lal-osa-get-2025-10-03",
    "outcome": "Yes",
    "outcomeIndex": 0,
    "name": "XxConorxX",
    "pseudonym": "Purple-Shelter",
    "bio": "God Bless Charlie Kirk",
    "profileImage": "https://polymarket-upload.s3.us-east-2.amazonaws.com/profile-image-2865805-78a97917-fb27-4b2c-9ad6-0158f2ef7d3a.png",
    "profileImageOptimized": "",
    "transactionHash": "0x331fe02b949d5ca31885c311c527d7d4ed0b98d71923e701551e162abf5d3719"
  },
  ...
]
```

#### Response Fields

| Field | Type | Description | Example |
| :--- | :--- | :--- | :--- |
| `proxyWallet` | `string` | User Profile Address (0x-prefixed, 40 hex chars) | `"0x56687bf447db6ffa42ffe2204a05edaa20f55839"` |
| `side` | `enum<string>` | Available options: `BUY`, `SELL` | |
| `asset` | `string` | | |
| `conditionId` | `string` | 0x-prefixed 64-hex string | `"0xdd22472e552920b8438158ea7238bfadfa4f736aa4cee91a6b86c39ead110917"` |
| `size` | `number` | | |
| `price` | `number` | | |
| `timestamp` | `integer` | | |
| `title` | `string` | | |
| `slug` | `string` | | |
| `icon` | `string` | | |
| `eventSlug` | `string` | | |
| `outcome` | `string` | | |
| `outcomeIndex` | `integer` | | |
| `name` | `string` | | |
| `pseudonym` | `string` | | |
| `bio` | `string` | | |
| `profileImage` | `string` | | |
| `profileImageOptimized` | `string` | | |
| `transactionHash` | `string` | | |


# Polymarket Documentation: Get Closed Positions for a User

## Core: Get closed positions for a user

Fetches closed positions for a user (address).

### Endpoint

`GET /closed-positions`

### Request Example (cURL)

```bash
curl --request GET \
  --url https://data-api.polymarket.com/closed-positions
```

### Status Codes

| Status | Description |
| :----- | :---------- |
| 200    | Success     |
| 400    | Bad Request |
| 401    | Unauthorized |
| 500    | Internal Server Error |

### Query Parameters

| Parameter | Type | Required | Default | Required Range | Description | Example |
| :--- | :--- | :--- | :--- | :--- | :--- | :--- |
| `user` | `string` | **required** | | | The address of the user in question. | `"0x56687bf447db6ffa42ffe2204a05edaa20f55839"` |
| `market` | `string[]` | | | | The conditionId of the market in question. Supports multiple CSV separated values. Cannot be used with the `eventId` param. (0x-prefixed 64-hex string) | |
| `title` | `string` | | | Maximum length: 100 | Filter by market title. | |
| `eventId` | `integer[]` | | | | The event id of the event in question. Supports multiple CSV separated values. Returns positions for all markets for those event ids. Cannot be used with the `market` param. | |
| `limit` | `integer` | | `50` | `0 <= x <= 500` | The max number of positions to return. | |
| `offset` | `integer` | | `0` | `0 <= x <= 10000` | The starting index for pagination. | |
| `sortBy` | `enum<string>` | | `REALIZEDPNL` | | The sort criteria. Available options: `REALIZEDPNL`, `TITLE`, `PRICE`, `AVGPRICE`. | |
| `sortDirection` | `enum<string>` | | `DESC` | | The sort direction. Available options: `ASC`, `DESC`. | |

### Response (200 Success - `application/json`)

```json
[
  {
    "proxyWallet": "0x5adf695a088172a920b6d0b2e5b7d88aa8ffa5e7",
    "asset": "105862139550598651869144991581649266505740323692381441468334576128241388255355",
    "conditionId": "0x078c6aac96ffa529781967e5608484735cef2a1668804653f70a8a9f77e80142",
    "avgPrice": 0.31604501945997504,
    "totalBought": 1390.634362,
    "realizedPnl": 255.814616,
    "curPrice": 0,
    "title": "Orioles vs. Yankees",
    "slug": "mlb-bal-nyy-2025-09-27",
    "icon": "https://polymarket-upload.s3.us-east-2.amazonaws.com/Repetitive-markets/MLB.jpg",
    "eventSlug": "mlb-bal-nyy-2025-09-27",
    "outcome": "Orioles",
    "outcomeIndex": 0,
    "oppositeOutcome": "Yankees",
    "oppositeAsset": "21098470966028966930663125053209505279564548160002102091763058078727565449356",
    "endDate": "2025-10-04T00:00:00Z"
  },
  ...
]
```

#### Response Fields

| Field | Type | Description | Example |
| :--- | :--- | :--- | :--- |
| `proxyWallet` | `string` | User Profile Address (0x-prefixed, 40 hex chars) | `"0x56687bf447db6ffa42ffe2204a05edaa20f55839"` |
| `asset` | `string` | | |
| `conditionId` | `string` | 0x-prefixed 64-hex string | `"0xdd22472e552920b8438158ea7238bfadfa4f736aa4cee91a6b86c39ead110917"` |
| `avgPrice` | `number` | | |
| `totalBought` | `number` | | |
| `realizedPnl` | `number` | | |
| `curPrice` | `number` | | |
| `title` | `string` | | |
| `slug` | `string` | | |
| `icon` | `string` | | |
| `eventSlug` | `string` | | |
| `outcome` | `string` | | |
| `outcomeIndex` | `integer` | | |
| `oppositeOutcome` | `string` | | |
| `oppositeAsset` | `string` | | |
| `endDate` | `string` | | |

# Polymarket TS CLOB Client

```ts
//npm install @polymarket/clob-client
//npm install ethers

//Client initialization example and dumping API Keys

import { ApiKeyCreds, ClobClient, OrderType, Side, } from "@polymarket/clob-client";
import { Wallet } from "@ethersproject/wallet";

const host = 'https://clob.polymarket.com';
const funder = '';//This is your Polymarket Profile Address, where you send UDSC to. 
const signer = new Wallet(""); //This is your Private Key. If using email login export from https://reveal.magic.link/polymarket otherwise export from your Web3 Application


//In general don't create a new API key, always derive or createOrDerive
const creds = new ClobClient(host, 137, signer).createOrDeriveApiKey();

//0: Browser Wallet(Metamask, Coinbase Wallet, etc)
//1: Magic/Email Login
const signatureType = 1; 
  (async () => {
    const clobClient = new ClobClient(host, 137, signer, await creds, signatureType, funder);
    const resp2 = await clobClient.createAndPostOrder(
        {
            tokenID: "", //Use https://docs.polymarket.com/developers/gamma-markets-api/get-markets to grab a sample token
            price: 0.01,
            side: Side.BUY,
            size: 5,
        },
        { tickSize: "0.001",negRisk: false }, //You'll need to adjust these based on the market. Get the tickSize and negRisk T/F from the get-markets above
        //{ tickSize: "0.001",negRisk: true },

        OrderType.GTC, 
    );
    console.log(resp2)
  })();
  ```
]]>
</file>
<file path=".dev/docs/manual-poly-gamma.md">
<![CDATA[
## Polymarket API Documentation: List Events

This page documents the **List events** API endpoint for Polymarket, which allows retrieving a list of prediction markets (events).

### API Endpoint

| Method | Path      | Base URL                           | Purpose     |
| :----- | :-------- | :--------------------------------- | :---------- |
| `GET`  | `/events` | `https://gamma-api.polymarket.com` | List events |

### Query Parameters

The endpoint supports various parameters for filtering, sorting, and pagination:

| Parameter                                | Type                    | Description                                                        |
| :--------------------------------------- | :---------------------- | :----------------------------------------------------------------- |
| `limit`, `offset`                        | `integer`               | Pagination controls.                                               |
| `order`, `ascending`                     | `string`, `boolean`     | Sorting parameters.                                                |
| `id`, `slug`                             | `integer[]`, `string[]` | Filter by specific event IDs or slugs.                             |
| `tag_id`, `exclude_tag_id`               | `integer`               | Filter by associated tags.                                         |
| `featured`, `closed`, `cyom`             | `boolean`               | Filter by status (e.g., featured, closed, Create Your Own Market). |
| `start_date_min/max`, `end_date_min/max` | `string<date-time>`     | Filter events by date range.                                       |
| `include_chat`, `include_template`       | `boolean`               | Include associated chat or template data.                          |

### Response Structure (Event Object)

The API returns a list of event objects (JSON array), each containing extensive data. Key fields include:

| Field                                        | Type                | Description                                                                |
| :------------------------------------------- | :------------------ | :------------------------------------------------------------------------- |
| `id`, `ticker`, `slug`, `title`              | `string`            | Basic identification and display data.                                     |
| `startDate`, `endDate`                       | `string<date-time>` | Event timeline.                                                            |
| `active`, `closed`, `featured`, `restricted` | `boolean`           | Event status indicators.                                                   |
| `liquidity`, `volume`, `openInterest`        | `number`            | Market financial metrics.                                                  |
| `markets`                                    | `object[]`          | Nested array containing detailed market objects associated with the event. |
| `series`                                     | `object[]`          | Nested array containing series information the event belongs to.           |
| `categories`, `tags`                         | `object[]`          | Categorization and tagging data.                                           |
| `volume24hr`, `volume1wk`, etc.              | `number`            | Volume data across different timeframes.                                   |

#### Nested Market Object Fields

Each `market` within an event includes details such as: `question`, `conditionId`, `endDate`, `marketType`, `volumeNum`, `liquidityNum`, pricing information (`lastTradePrice`, `bestBid`, `bestAsk`), and various status flags.

### Example Output

```json
[
    {
        "id": 57116,
        "ticker": "nhl-metropolitan-division-winner",
        "slug": "nhl-metropolitan-division-winner-831",
        "title": "NHL: Metropolitan Division Winner",
        "description": "This market will resolve according to the team that wins the listed division during the 2025-26 NHL regular season.\n\nIf at any point it becomes impossible for a listed team to win its division (e.g., mathematical elimination before season end), the relevant market will resolve immediately to “No.”\n\nIf the 2025-26 NHL season is permanently canceled or has not been completed by June 30, 2026, 11:59 PM ET, this market will resolve to “Other.”",
        "resolutionSource": "",
        "startDate": "2025-10-10T00:34:45.548328Z",
        "creationDate": "2025-10-10T00:34:45.548322Z",
        "endDate": "2026-04-30T00:00:00Z",
        "image": "https://polymarket-upload.s3.us-east-2.amazonaws.com/nhl-metropolitan-division-winner-831-BiOhOAV6ln-4.png",
        "icon": "https://polymarket-upload.s3.us-east-2.amazonaws.com/nhl-metropolitan-division-winner-831-BiOhOAV6ln-4.png",
        "active": true,
        "closed": false,
        "archived": false,
        "new": false,
        "featured": false,
        "restricted": true,
        "liquidity": 9680,
        "openInterest": 0,
        "sortBy": "price",
        "createdAt": "2025-10-09T20:29:37.053812Z",
        "updatedAt": "2025-10-10T05:46:11.123915Z",
        "competitive": 0.8470089994706194,
        "enableOrderBook": true,
        "liquidityClob": 9680,
        "negRisk": true,
        "negRiskMarketID": "0xc1bd6e88f5a19d4d451188f8e9a78952e48db9676aedcba4573b8dd271d79600",
        "commentCount": 0,
        "markets": [
            {
                "id": 629070,
                "question": "Will the Carolina Hurricanes win the Metropolitan Division?",
                "conditionId": "0xa998022efc89d60331ac15e78103dafd765e65eaea433405638c4e293d2b0fa6",
                "slug": "will-the-carolina-hurricanes-win-the-metropolitan-division-123",
                "endDate": "2026-04-30T00:00:00Z",
                "liquidity": 300,
                "startDate": "2025-10-10T00:23:22.977509Z",
                "image": "https://polymarket-upload.s3.us-east-2.amazonaws.com/nhl-metropolitan-division-winner-831-BiOhOAV6ln-4.png",
                "icon": "https://polymarket-upload.s3.us-east-2.amazonaws.com/nhl-metropolitan-division-winner-831-BiOhOAV6ln-4.png",
                "description": "This market will resolve according to the team that wins the listed division during the 2025-26 NHL regular season.\n\nIf at any point it becomes impossible for a listed team to win its division (e.g., mathematical elimination before season end), the relevant market will resolve immediately to “No.”\n\nIf the 2025-26 NHL season is permanently canceled or has not been completed by June 30, 2026, 11:59 PM ET, this market will resolve to “Other.”",
                "outcomes": ["Yes", "No"],
                "outcomePrices": ["0.35", "0.65"],
                "active": true,
                "closed": false,
                "marketMakerAddress": "",
                "createdAt": "2025-10-09T20:29:37.904431Z",
                "updatedAt": "2025-10-10T05:42:19.24627Z",
                "new": false,
                "featured": false,
                "submitted_by": "0x91430CaD2d3975766499717fA0D66A78D814E5c5",
                "archived": false,
                "resolvedBy": "0x2F5e3684cb1F318ec51b00Edba38d79Ac2c0aA9d",
                "restricted": true,
                "groupItemTitle": "Carolina Hurricanes",
                "groupItemThreshold": 0,
                "questionID": "0xc1bd6e88f5a19d4d451188f8e9a78952e48db9676aedcba4573b8dd271d79600",
                "enableOrderBook": true,
                "orderPriceMinTickSize": 0.01,
                "orderMinSize": 5,
                "liquidityNum": 300,
                "endDateIso": "2026-04-30",
                "startDateIso": "2025-10-10",
                "hasReviewedDates": true,
                "clobTokenIds": [
                    "63645197726705524606059371558162512012201160965301656466640547461234264539392",
                    "5617477483144744882677399661863606310473044785725076606563294855884593377840"
                ],
                "umaBond": 500,
                "umaReward": 5,
                "liquidityClob": 300,
                "customLiveness": 0,
                "acceptingOrders": true,
                "negRisk": true,
                "negRiskMarketID": "0xc1bd6e88f5a19d4d451188f8e9a78952e48db9676aedcba4573b8dd271d79600",
                "negRiskRequestID": "0x9b2ab6a19ab61ed010aa5fe60f474283affc335829f807d6b5e5901f7de69661",
                "ready": false,
                "funded": false,
                "acceptingOrdersTimestamp": "2025-10-10T00:23:01Z",
                "cyom": false,
                "competitive": 0.293398533007335,
                "pagerDutyNotificationEnabled": false,
                "approved": true,
                "rewardsMinSize": 0,
                "rewardsMaxSpread": 0,
                "spread": 0.7,
                "bestAsk": 0.7,
                "automaticallyActive": true,
                "clearBookOnStart": true,
                "showGmpSeries": false,
                "showGmpOutcome": false,
                "manualActivation": false,
                "negRiskOther": false,
                "umaResolutionStatuses": [],
                "pendingDeployment": false,
                "deploying": false,
                "deployingTimestamp": "2025-10-10T00:11:25.336806Z",
                "rfqEnabled": false,
                "holdingRewardsEnabled": false,
                "feesEnabled": false
            }
        ],
        "tags": [
            {
                "id": 1,
                "label": "Sports",
                "slug": "sports",
                "forceShow": false,
                "publishedAt": "2023-10-24T22:37:50.296Z",
                "updatedBy": 15,
                "createdAt": "2023-10-24T22:37:50.31Z",
                "updatedAt": "2024-07-05T21:07:21.800664Z",
                "forceHide": true
            },
            {
                "id": 899,
                "label": "NHL",
                "slug": "nhl",
                "forceShow": false,
                "publishedAt": "2024-01-22T17:16:28.432Z",
                "createdAt": "2024-01-22T17:16:28.449Z",
                "updatedAt": "2024-05-30T22:36:11.118646Z"
            },
            {
                "id": 100088,
                "label": "Hockey",
                "slug": "hockey",
                "cyom": false,
                "showAllOutcomes": true,
                "showMarketImages": false,
                "enableNegRisk": true,
                "automaticallyActive": true,
                "gmpChartMode": "default",
                "negRiskAugmented": true,
                "pendingDeployment": false,
                "deploying": false,
                "deployingTimestamp": "2025-10-10T00:08:05.814235Z"
            }
        ]
    },
    ...
]
```

]]>
</file>
<file path=".dev/docs/manual-poly-rtds.md">
<![CDATA[
# Real-Time Data Client

Client wrapper for `real-time-data-streaming` **WebSocket**.

## Quickstart

```ts
import { RealTimeDataClient } from "../src/client";
import { Message } from "../src/model";

const onMessage = (m: Message) => console.log(m.topic, m.type, m.payload);

const onConnect = (client: RealTimeDataClient) => {
  client.subscribe({
    subscriptions: [
      {
        topic: "comments",
        type: "*", // all types for topic
        filters: `{"parentEntityID":100,"parentEntityType":"Event"}`, // empty = no filter
      },
    ],
  });
};

new RealTimeDataClient({ onMessage, onConnect }).connect();
```

## Subscriptions

> After connection, use the same `client: RealTimeDataClient`.

### Subscribe

```ts
// activity.trades
client.subscribe({ subscriptions: [{ topic: "activity", type: "trades" }] });

// all comment types
client.subscribe({ subscriptions: [{ topic: "comments", type: "*" }] });
```

### Unsubscribe

> Unsubscribe from `activity.trades` (if `*` was used earlier, this removes only `trades`).

```ts
client.unsubscribe?.({ // if supported; same shape as subscribe
  subscriptions: [{ topic: "activity", type: "trades" }],
});

// If the client uses subscribe-with-action pattern:
client.subscribe({
  subscriptions: [{ topic: "activity", type: "trades" }],
  action: "unsubscribe",
});
```

### Disconnect

```ts
client.disconnect();
```

## Message Matrix

| Topic                     | Type               | Auth     | Filters (empty = none)                                          | Schema                              | Subscription Handler                          |
| ------------------------- | ------------------ | -------- | --------------------------------------------------------------- | ----------------------------------- | --------------------------------------------- |
| `activity`                | `trades`           | -        | `{"event_slug":"string"}` **OR** `{"market_slug":"string"}`     | [`Trade`](#trade)                   |                                               |
| `activity`                | `orders_matched`   | -        | `{"event_slug":"string"}` **OR** `{"market_slug":"string"}`     | [`Trade`](#trade)                   |                                               |
| `comments`                | `comment_created`  | -        | `{"parentEntityID":number,"parentEntityType":"Event / Series"}` | [`Comment`](#comment)               |                                               |
| `comments`                | `comment_removed`  | -        | same as above                                                   | [`Comment`](#comment)               |                                               |
| `comments`                | `reaction_created` | -        | same as above                                                   | [`Reaction`](#reaction)             |                                               |
| `comments`                | `reaction_removed` | -        | same as above                                                   | [`Reaction`](#reaction)             |                                               |
| `rfq`                     | `request_created`  | -        | -                                                               | [`Request`](#request)               |                                               |
| `rfq`                     | `request_edited`   | -        | -                                                               | [`Request`](#request)               |                                               |
| `rfq`                     | `request_canceled` | -        | -                                                               | [`Request`](#request)               |                                               |
| `rfq`                     | `request_expired`  | -        | -                                                               | [`Request`](#request)               |                                               |
| `rfq`                     | `quote_created`    | -        | -                                                               | [`Quote`](#quote)                   |                                               |
| `rfq`                     | `quote_edited`     | -        | -                                                               | [`Quote`](#quote)                   |                                               |
| `rfq`                     | `quote_canceled`   | -        | -                                                               | [`Quote`](#quote)                   |                                               |
| `rfq`                     | `quote_expired`    | -        | -                                                               | [`Quote`](#quote)                   |                                               |
| `crypto_prices`           | `update`           | -        | `{"symbol":string}`                                             | [`CryptoPrice`](#cryptoprice)       | [`CryptoPriceHistorical`](#initial-data-dump) |
| `crypto_prices_chainlink` | `update`           | -        | `{"symbol":string}`                                             | [`CryptoPrice`](#cryptoprice)       | [`CryptoPriceHistorical`](#initial-data-dump) |
| `clob_user`               | `order`            | ClobAuth | -                                                               | [`Order`](#order)                   |                                               |
| `clob_user`               | `trade`            | ClobAuth | -                                                               | [`Trade (CLOB User)`](#trade-1)     |                                               |
| `clob_market`             | `price_change`     | -        | `["100","200",...]` **(mandatory)**                             | [`PriceChanges`](#pricechanges)     |                                               |
| `clob_market`             | `agg_orderbook`    | -        | `["100","200",...]`                                             | [`AggOrderbook`](#aggorderbook)     | [`AggOrderbook`](#aggorderbook)               |
| `clob_market`             | `last_trade_price` | -        | `["100","200",...]`                                             | [`LastTradePrice`](#lasttradeprice) |                                               |
| `clob_market`             | `tick_size_change` | -        | `["100","200",...]`                                             | [`TickSizeChange`](#ticksizechange) |                                               |
| `clob_market`             | `market_created`   | -        | -                                                               | [`ClobMarket`](#clobmarket)         |                                               |
| `clob_market`             | `market_resolved`  | -        | -                                                               | [`ClobMarket`](#clobmarket)         |                                               |

## Auth

### ClobAuth

```ts
export interface ClobApiKeyCreds {
  key: string;        // API key
  secret: string;     // API secret
  passphrase: string; // Passphrase
}
```

```ts
client.subscribe({
  subscriptions: [
    {
      topic: "clob_user",
      type: "*",
      clob_auth: {
        key: "xxxxxx-xxxx-xxxxx-xxxx-xxxxxx",
        secret: "xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx",
        passphrase: "xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx",
      },
    },
  ],
});
```

## Schemas

### Activity

#### Trade

| Name              | Type    | Description                   |
| ----------------- | ------- | ----------------------------- |
| `asset`           | string  | ERC1155 token ID traded       |
| `bio`             | string  | Trader’s bio                  |
| `conditionId`     | string  | Market/CTF condition ID       |
| `eventSlug`       | string  | Event slug                    |
| `icon`            | string  | Market icon URL               |
| `name`            | string  | Trader’s name                 |
| `outcome`         | string  | Human-readable market outcome |
| `outcomeIndex`    | integer | Outcome index                 |
| `price`           | float   | Trade price                   |
| `profileImage`    | string  | Trader profile image URL      |
| `proxyWallet`     | string  | Trader proxy wallet           |
| `pseudonym`       | string  | Trader pseudonym              |
| `side`            | string  | `BUY` / `SELL`                |
| `size`            | integer | Trade size                    |
| `slug`            | string  | Market slug                   |
| `timestamp`       | integer | Trade timestamp               |
| `title`           | string  | Event title                   |
| `transactionHash` | string  | Tx hash                       |

### Comments

#### Comment

| Name               | Type   | Description         |
| ------------------ | ------ | ------------------- |
| `id`               | string | Comment ID          |
| `body`             | string | Content             |
| `parentEntityType` | string | `Event` or `Series` |
| `parentEntityID`   | number | Parent ID           |
| `parentCommentID`  | string | Parent comment ID   |
| `userAddress`      | string | User address        |
| `replyAddress`     | string | Reply user address  |
| `createdAt`        | string | Created timestamp   |
| `updatedAt`        | string | Updated timestamp   |

#### Reaction

| Name           | Type   | Description       |
| -------------- | ------ | ----------------- |
| `id`           | string | Reaction ID       |
| `commentID`    | number | Comment ID        |
| `reactionType` | string | Reaction type     |
| `icon`         | string | Reaction icon     |
| `userAddress`  | string | User address      |
| `createdAt`    | string | Created timestamp |

### RFQ

#### Request

| Name           | Type   | Description                 |
| -------------- | ------ | --------------------------- |
| `requestId`    | string | Request ID                  |
| `proxyAddress` | string | User proxy                  |
| `market`       | string | Market/CTF condition ID     |
| `token`        | string | ERC1155 token ID            |
| `complement`   | string | Complement ERC1155 token ID |
| `state`        | string | Current state               |
| `side`         | string | Buy/Sell                    |
| `sizeIn`       | number | Input size                  |
| `sizeOut`      | number | Output size                 |
| `price`        | number | Implied price               |
| `expiry`       | number | UNIX expiry                 |

#### Quote

| Name           | Type   | Description                 |
| -------------- | ------ | --------------------------- |
| `quoteId`      | string | Quote ID                    |
| `requestId`    | string | Linked request ID           |
| `proxyAddress` | string | User proxy                  |
| `token`        | string | ERC1155 token ID            |
| `state`        | string | Current state               |
| `side`         | string | Buy/Sell                    |
| `sizeIn`       | number | Input size                  |
| `sizeOut`      | number | Output size                 |
| `condition`    | string | Market/CTF condition ID     |
| `complement`   | string | Complement ERC1155 token ID |
| `expiry`       | number | UNIX expiry                 |

### CryptoPrice

| Name        | Type   | Description    |
| ----------- | ------ | -------------- |
| `symbol`    | string | Asset symbol   |
| `timestamp` | number | ms since epoch |
| `value`     | number | Price value    |

**Filters:** `{"symbol":"btcusdt"}`, `{"symbol":"ethusdt"}`, `{"symbol":"xrpusdt"}`, `{"symbol":"solusdt"}`

#### Initial data dump

On connection with a filter, server sends a snapshot:

* `symbol: string`
* `data: Array<{ timestamp: number; value: number }>`
  (See also: used by `crypto_prices` and `crypto_prices_chainlink`.)

### CLOB User

#### Order

| Name            | Type               | Description                           |
| --------------- | ------------------ | ------------------------------------- |
| `asset_id`      | string             | ERC1155 token ID                      |
| `created_at`    | string (timestamp) | UNIX creation                         |
| `expiration`    | string (timestamp) | UNIX expiration                       |
| `id`            | string             | Order hash                            |
| `maker_address` | string             | Funder address                        |
| `market`        | string             | Condition/market ID                   |
| `order_type`    | string             | `GTC` `GTD` `FOK` `FAK`               |
| `original_size` | string             | Size at placement                     |
| `outcome`       | string             | `YES` / `NO`                          |
| `owner`         | string             | Owner UUID                            |
| `price`         | string             | Decimal price                         |
| `side`          | string             | `BUY` / `SELL`                        |
| `size_matched`  | string             | Matched amount                        |
| `status`        | string             | e.g., `MATCHED`                       |
| `type`          | string             | `PLACEMENT` `CANCELLATION` `FILL` ... |

#### Trade (CLOB User)

| Name               | Type               | Description             |
| ------------------ | ------------------ | ----------------------- |
| `asset_id`         | string             | ERC1155 token ID        |
| `fee_rate_bps`     | string             | Fee rate (bps)          |
| `id`               | string             | Match ID                |
| `last_update`      | string (timestamp) | UNIX last update        |
| `maker_address`    | string             | Maker address           |
| `maker_orders`     | array              | See below               |
| `market`           | string             | Condition/market ID     |
| `match_time`       | string (timestamp) | UNIX execution          |
| `outcome`          | string             | `YES` / `NO`            |
| `owner`            | string             | Taker UUID              |
| `price`            | string             | Decimal price           |
| `side`             | string             | Taker side `BUY`/`SELL` |
| `size`             | string             | Total matched size      |
| `status`           | string             | e.g., `MINED`           |
| `taker_order_id`   | string             | Taker order ID          |
| `transaction_hash` | string             | Settlement tx           |

**`maker_orders` (array items)**

| Name             | Type   | Description    |
| ---------------- | ------ | -------------- |
| `asset_id`       | string | Maker token ID |
| `fee_rate_bps`   | string | Maker fee bps  |
| `maker_address`  | string | Maker address  |
| `matched_amount` | string | Amount matched |
| `order_id`       | string | Maker order ID |
| `outcome`        | string | `YES` / `NO`   |
| `owner`          | string | Maker UUID     |
| `price`          | string | Order price    |
| `side`           | string | `BUY` / `SELL` |

### CLOB Market

#### PriceChanges

| Name | Type               | Description           |
| ---- | ------------------ | --------------------- |
| `m`  | string             | Condition ID          |
| `pc` | array              | Price changes by book |
| `t`  | string (timestamp) | ms since epoch        |

**PriceChange (elements of `pc`)**

| Name | Type   | Description         |
| ---- | ------ | ------------------- |
| `a`  | string | `asset_id`          |
| `h`  | string | book snapshot hash  |
| `p`  | string | price (e.g., `0.5`) |
| `s`  | string | side `BUY`/`SELL`   |
| `si` | string | size at price       |
| `ba` | string | best ask            |
| `bb` | string | best bid            |

> **Filters required:** `["100","200",...]` (asset IDs).

#### AggOrderbook

| Name             | Type               | Description                    |
| ---------------- | ------------------ | ------------------------------ |
| `asks`           | array              | Aggregated asks `{price,size}` |
| `asset_id`       | string             | Asset ID                       |
| `bids`           | array              | Aggregated bids `{price,size}` |
| `hash`           | string             | Snapshot hash                  |
| `market`         | string             | Condition ID                   |
| `min_order_size` | string             | Min order size                 |
| `neg_risk`       | boolean            | NegRisk flag                   |
| `tick_size`      | string             | Min price increment            |
| `timestamp`      | string (timestamp) | ms since epoch                 |

**`asks`/`bids` item**
| `price`: string | `size`: string |

**Initial data dump:** on connection when filters used.

#### LastTradePrice

| Name           | Type   | Description    |
| -------------- | ------ | -------------- |
| `asset_id`     | string | Asset ID       |
| `fee_rate_bps` | string | Fee bps        |
| `market`       | string | Condition ID   |
| `price`        | string | Trade price    |
| `side`         | string | `BUY` / `SELL` |
| `size`         | string | Trade size     |

#### TickSizeChange

| Name            | Type   | Description              |
| --------------- | ------ | ------------------------ |
| `market`        | string | Condition ID             |
| `asset_id`      | string | Array of two ERC1155 IDs |
| `old_tick_size` | string | Previous tick            |
| `new_tick_size` | string | Updated tick             |

#### ClobMarket

| Name             | Type      | Description           |
| ---------------- | --------- | --------------------- |
| `market`         | string    | Condition ID          |
| `asset_ids`      | [2]string | Two ERC1155 asset IDs |
| `min_order_size` | string    | Min order size        |
| `tick_size`      | string    | Min price increment   |
| `neg_risk`       | boolean   | Negative risk         |

]]>
</file>
<file path=".dev/docs/manual-rate-limits.md">
<![CDATA[
POLYMARKET RATE LIMITS

API Rate Limits
​
How Rate Limiting Works
All rate limits are enforced using Cloudflare’s throttling system. When you exceed the maximum configured rate for any endpoint, requests are throttled rather than immediately rejected. This means:
Throttling: Requests over the limit are delayed/queued rather than dropped
Burst Allowances: Some endpoints allow short bursts above the sustained rate
Time Windows: Limits reset based on sliding time windows (e.g., per 10 seconds, per minute)
​
General Rate Limits
Endpoint	Limit	Notes
General Rate Limiting	5000 requests / 10s	Throttle requests over the maximum configured rate
”OK” Endpoint	50 requests / 10s	Throttle requests over the maximum configured rate
​
Data API Rate Limits
Endpoint	Limit	Notes
Data API (General)	100 requests / 10s	Throttle requests over the maximum configured rate
Data API (Alternative)	600 requests / 1 minute	1 hour block on violation
Data API /trades	30 requests / 10s	Throttle requests over the maximum configured rate
Data API “OK” Endpoint	10 requests / 10s	Throttle requests over the maximum configured rate
​
GAMMA API Rate Limits
Endpoint	Limit	Notes
GAMMA (General)	750 requests / 10s	Throttle requests over the maximum configured rate
GAMMA Get Comments	100 requests / 10s	Throttle requests over the maximum configured rate
GAMMA /events	100 requests / 10s	Throttle requests over the maximum configured rate
GAMMA /markets	100 requests / 10s	Throttle requests over the maximum configured rate
GAMMA /markets /events listing	100 requests / 10s	Throttle requests over the maximum configured rate
GAMMA Tags	100 requests / 10s	Throttle requests over the maximum configured rate
GAMMA Search	300 requests / 10s	Throttle requests over the maximum configured rate
​
CLOB API Rate Limits
​
General CLOB Endpoints
Endpoint	Limit	Notes
CLOB (General)	5000 requests / 10s	Throttle requests over the maximum configured rate
CLOB GET Balance Allowance	125 requests / 10s	Throttle requests over the maximum configured rate
CLOB UPDATE Balance Allowance	20 requests / 10s	Throttle requests over the maximum configured rate
​
CLOB Market Data
Endpoint	Limit	Notes
CLOB /book	200 requests / 10s	Throttle requests over the maximum configured rate
CLOB /books (website)	300 requests / 10s	Throttle requests over the maximum configured rate
CLOB /books	80 requests / 10s	Throttle requests over the maximum configured rate
CLOB /price	200 requests / 10s	Throttle requests over the maximum configured rate
CLOB /prices	80 requests / 10s	Throttle requests over the maximum configured rate
CLOB /midprice	200 requests / 10s	Throttle requests over the maximum configured rate
CLOB /midprices	80 requests / 10s	Throttle requests over the maximum configured rate
​
CLOB Ledger Endpoints
Endpoint	Limit	Notes
CLOB Ledger (/trades /orders /notifications /order)	300 requests / 10s	Throttle requests over the maximum configured rate
CLOB Ledger /data/orders	150 requests / 10s	Throttle requests over the maximum configured rate
CLOB Ledger /data/trades	150 requests / 10s	Throttle requests over the maximum configured rate
CLOB /notifications	125 requests / 10s	Throttle requests over the maximum configured rate
​
CLOB Markets & Pricing
Endpoint	Limit	Notes
CLOB Price History	100 requests / 10s	Throttle requests over the maximum configured rate
CLOB Markets	250 requests / 10s	Throttle requests over the maximum configured rate
CLOB Market Tick Size	50 requests / 10s	Throttle requests over the maximum configured rate
CLOB markets/0x	50 requests / 10s	Throttle requests over the maximum configured rate
CLOB /markets listing	100 requests / 10s	Throttle requests over the maximum configured rate
​
CLOB Authentication
Endpoint	Limit	Notes
CLOB API Keys	50 requests / 10s	Throttle requests over the maximum configured rate
​
CLOB Trading Endpoints
Endpoint	Limit	Notes
CLOB POST /order	2400 requests / 10s (240/s)	BURST - Throttle requests over the maximum configured rate
CLOB POST /order	24000 requests / 10 minutes (40/s)	Throttle requests over the maximum configured rate
CLOB POST /order (by token id)	800 requests / 10s (80/s)	BURST - Throttle requests over the maximum configured rate
CLOB POST /order (by token id)	12000 requests / 10 minutes (20/s)	Throttle requests over the maximum configured rate
CLOB DELETE /order	2400 requests / 10s (240/s)	BURST - Throttle requests over the maximum configured rate
CLOB DELETE /order	24000 requests / 10 minutes (40/s)	Throttle requests over the maximum configured rate
CLOB POST /orders	800 requests / 10s (80/s)	BURST - Throttle requests over the maximum configured rate
CLOB POST /orders	12000 requests / 10 minutes (20/s)	Throttle requests over the maximum configured rate
CLOB DELETE /orders	800 requests / 10s (80/s)	BURST - Throttle requests over the maximum configured rate
CLOB DELETE /orders	12000 requests / 10 minutes (20/s)	Throttle requests over the maximum configured rate
CLOB DELETE /cancel-all	200 requests / 10s (20/s)	BURST - Throttle requests over the maximum configured rate
CLOB DELETE /cancel-all	3000 requests / 10 minutes (5/s)	Throttle requests over the maximum configured rate
CLOB DELETE /cancel-market-orders	800 requests / 10s (80/s)	BURST - Throttle requests over the maximum configured rate
CLOB DELETE /cancel-market-orders	12000 requests / 10 minutes (20/s)	Throttle requests over the maximum configured rate
​
Other API Rate Limits
Endpoint	Limit	Notes
RELAYER /submit	15 requests / 1 minute	Throttle requests over the maximum configured rate
User PNL API	100 requests / 10s	Throttle requests over the maximum configured rate
Glossary

]]>
</file>
<file path=".dev/md/plans/2025/10/07/13-09-13_discord-bot-slash-commands.md">
<![CDATA[
## Plan: Discord Bot with Slash Commands (+Autocomplete) for Status, Logs, Portfolio, Positions, Position, Close, Close-All

## Proposed Plan

### ❌ Critical Information Needed

- Do you prefer commands registered as guild-only during development (`DISCORD_GUILD_ID`) or global? Guild scope updates instantly; global can take up to 1 hour to propagate. If not provided, we will use guild scope by default for faster DX.
- Do you already have a Discord Application and Bot set up with the correct OAuth2 scopes? Required: `bot` and `applications.commands`. If not, we will include setup steps.

### ⚠️ Initial Best Assumptions to Address Ambiguities

1. MODERATE: Command scope -> We will register commands to a single guild (via `DISCORD_GUILD_ID`) for immediate availability; we can add a `--global` flag later. Rationale: Faster iteration and safer testing.
2. MODERATE: Bot runtime -> We will run the bot in the same process as the app, started from `main-loop`, non-blocking. Rationale: Simpler deployment and resource sharing.
4. MODERATE: Autocomplete dataset size -> Position counts are small enough to compute suggestions on-demand via DB queries within Discord’s 3s initial response limit.
The Discord Bot is in COMPLETELY PRIVATE server where only owner has access. No need to implement allowlisting.

### ☁️ Current State

1. Node.js ≥20, TypeScript strict, pnpm. See `package.json`.
2. App runs as a long-lived process: entrypoint `src/index.ts` calls `run()` in `src/core/app/main-loop.ts`.
3. DB: PostgreSQL via Drizzle; key tables `position`, `copy_order`, `leader_trade`, etc. Helpers in `src/utils/external-helpers.ts` expose portfolio summary and formatting.
4. Event bus emits lifecycle and trading events (`src/core/domain/event.ts`). Discord notifications currently via webhook only (`src/notify/discord-webhook.ts`).
5. RTDS stream in `src/core/data-ingestion/polymarket-rtds.ts` exposes `lastRtdsMessageTimeMs` for connectivity telemetry.
6. No Discord Bot runtime yet (`src/rpc/discord-bot.ts` is empty).

### 🌟 Desired Goal State

1. A Discord Bot connected via Gateway with slash commands visible in the configured guild.
2. Slash commands:
   - `/status`: RTDS/WS connectivity, open positions count, current unrealized PnL, lifetime realized PnL.
   - `/logs [n]`: Return last N lines of humanized logs.
   - `/portfolio`: Portfolio summary (reuse existing formatting).
   - `/positions`: Table of current open positions with columns: ID, UPNL.
   - `/position [id]`: Detailed position view with extra fields (tokenId, Entry Price (Avg), Current Price, Unrealized PnL).
   - `/close [id]`: Force close a specific position by ID.
   - `/close-all`: Force close all running positions.
3. Autocomplete for commands needing IDs (e.g., `/position` and `/close`), suggesting open position IDs.
4. All responses ephemeral by default (for private UX), with emojis and clear formatting.
5. DRY, typed, and non-intrusive to the main trading flow (sub-50ms overhead preserved for critical paths).

Traceability: Each bullet maps to the user requirements list (status/logs/portfolio/positions/position/close/close-all, with autocomplete and emojis).

### 🛣️ Brainstorm Implementation Approaches

- Approach 1: Gateway bot using `discord.js` v14
  - Pros: No public HTTP ingress needed; interactions and autocompletes handled via Gateway. Rich typing and utilities.
  - Cons: Adds a runtime dependency and a background connection.
- Approach 2: HTTP-only Interactions (Outgoing Webhook)
  - Pros: No Gateway connection.
  - Cons: Requires public HTTPS endpoint and signature verification; more infra.
- Approach 3: Hybrid (Gateway for commands, Webhook for followups)
  - Pros: Flexibility.
  - Cons: Unnecessary complexity for this private, single-user bot.

Chosen Approach: 1 (Gateway + discord.js)
- Reasons: No server needed; straightforward slash command + autocomplete handling; quick iteration in a private project.

Rollback Strategy
- The bot starts only if `DISCORD_BOT_TOKEN` is present. No token → no bot runtime. Command registration is an explicit script; revert by deleting commands and removing token.

### 🗺️ Very Detailed Plan

1) Dependencies and Env
- Add deps: `discord.js`, `@discordjs/rest`, `discord-api-types`.
- Add env vars to `.env.*`:
  - `DISCORD_BOT_TOKEN`: Bot token
  - `DISCORD_APP_ID`: Application (client) ID
  - `DISCORD_GUILD_ID`: Guild ID (dev scope)

2) Command Definitions (single source of truth)
- Create `src/rpc/discord/commands.ts` exporting a typed array of command definitions and helpers for registration + runtime handling.
- Commands list:
  - `status` (no options)
  - `logs` options: integer `n` (1–500, default 100)
  - `portfolio` (no options)
  - `positions` (no options)
  - `position` options: integer `id` (required, with autocomplete)
  - `close` options: integer `id` (required, with autocomplete, guarded)
  - `close-all` (no options, guarded)

3) Registration Script
- Add `scripts/register-discord-commands.ts` using `@discordjs/rest` to upsert commands to the configured guild.
- CLI script in `package.json`: `pnpm discord:register:guild` (and optional `discord:register:global`).
- Reference: Application Commands API [Discord Application Commands](https://discord.com/developers/docs/interactions/application-commands).

4) Bot Runtime
- Implement `startDiscordBot(params)` in `src/rpc/discord-bot.ts`:
  - Construct a `Client` with `GatewayIntentBits.Guilds` only.
  - On `ready`, log success.
  - Handle `interactionCreate`:
    - If `isChatInputCommand()` → route by command name.
    - If `isAutocomplete()` → return suggestions for `position`/`close`.
  - Ephemeral initial responses (defer reply within 3s if needed). Reference: 3s initial response rule and ephemeral flags [Receiving and Responding](https://discord.com/developers/docs/interactions/receiving-and-responding).

5) Data Access & DRY helpers
- Reuse existing helpers from `src/utils/external-helpers.ts`:
  - `getPortfolioSummary(mode)` to compute Unrealized/Realized PnL and last-closed items.
  - `buildClosedPositionsSummaryMessage()` for `/portfolio` rendering.
- Logs: use `getLogTailSnapshot()` from `src/utils/logger.ts`; trim to last `n` lines (server-side split) and wrap in a code block.
- Status: compute RTDS status by checking `lastRtdsMessageTimeMs` staleness (e.g., idle > 60s = disconnected). Use DB counts for open positions and reuse `getPortfolioSummary` for PnL.
- Positions: query open positions, compute UPNL from `unrealizedPnlUsd`, and render a compact table (code block). Keep small width; show up to 100 rows; paginate later if needed.
- Position detail: join via `loadMetaForPosition(id)`; include tokenId, entry price avg, current price, unrealized PnL, leader and event link; add emojis.

6) Guarded Mutations
- Thread-safety: use the existing `IExecutionProvider` instance from `main-loop` by injecting it into `startDiscordBot`. Close operations call `executionProvider.closePosition({ positionId, reason: 'MANUAL', source: 'manual', ingestSource: 'manual' })`.
- Non-blocking: acknowledge with an ephemeral reply, then perform close; send follow-up ephemeral result (success/fail). Interaction token validity is 15 minutes—sufficient for follow-ups [Receiving and Responding](https://discord.com/developers/docs/interactions/receiving-and-responding).

7) Wire-up in Main Loop
- In `src/core/app/main-loop.ts`, after provider is ready and notifier/listeners registered, call `startDiscordBot({ executionProvider: provider, env, notifier })`. Ensure failures don’t crash the bot.

8) Metrics & Logging
- Log each command execution with timing and principal (Discord user). Keep logs concise.
- Emit counters via `incrementCounter('discord.command', { name: cmd })`.

9) Emojis & UX
- Use emojis for headings/status: ✅/🟥 for ok/fail, 📊 for stats, 🧮 for PnL, 📜 for logs, 🔧 for actions.
- Ephemeral replies by default to avoid channel noise. Offer a `public` boolean option later if needed.

10) Rate limits + Perf
- Autocomplete queries: limit to 20 suggestions and short labels (`"#123 · UPNL +1.23 USDC"`). Discord overall command content must stay under 8000 chars [Slash command limits](https://discord.com/developers/docs/interactions/application-commands#slash-commands).
- Defer initial replies when DB queries might exceed ~500ms; edit the reply when ready.

### 💻 Specs

Models / Schemas (no DB migrations needed)
- We reuse existing tables. Optionally, add a covering index later if `/positions` proves slow.

Classes
- `DiscordCommandRegistrar`
  - Purpose: Register commands to guild or global.
  - Methods:
    - `registerGuildCommands(appId: string, guildId: string, token: string, defs: RESTPostAPIApplicationCommandsJSONBody[]): Promise<void>`
    - `registerGlobalCommands(appId: string, token: string, defs: RESTPostAPIApplicationCommandsJSONBody[]): Promise<void>`

Functions (typed)
```ts
// src/rpc/discord/commands.ts
export type CommandName = 'status' | 'logs' | 'portfolio' | 'positions' | 'position' | 'close' | 'close-all';

export interface CommandContext {
    mode: import('@/core/domain/execution').ExecutionMode;
    executionProvider: import('@/core/domain/execution').IExecutionProvider;
}

export interface AutocompleteItem { name: string; value: number; }

export function buildSlashCommandDefs(): import('discord-api-types/v10').RESTPostAPIApplicationCommandsJSONBody[];
export function handleCommand(name: CommandName, options: Record<string, unknown>, ctx: CommandContext): Promise<{ content: string; ephemeral?: boolean }>;
export function handleAutocomplete(name: CommandName, focused: string, ctx: CommandContext): Promise<AutocompleteItem[]>;
```

Library Calls (Discord)
```ts
// Client runtime
import { Client, GatewayIntentBits, Partials, Interaction, AutocompleteInteraction, ChatInputCommandInteraction } from 'discord.js';

const client = new Client({ intents: [GatewayIntentBits.Guilds] });
client.on('ready', () => logger.success({ tag: 'discord-bot' }, 'Discord bot ready'));
client.on('interactionCreate', async (interaction: Interaction) => { /* route */ });
await client.login(process.env.DISCORD_BOT_TOKEN!);
```

```ts
// Registration via REST
import { REST, Routes } from 'discord.js';
const rest = new REST({ version: '10' }).setToken(token);
await rest.put(Routes.applicationGuildCommands(appId, guildId), { body: defs });
// For global:
await rest.put(Routes.applicationCommands(appId), { body: defs });
```

API Contracts (Discord)
- Slash commands and interactions per official docs: [Application Commands](https://discord.com/developers/docs/interactions/application-commands), [Receiving & Responding](https://discord.com/developers/docs/interactions/receiving-and-responding), [Autocomplete](https://discord.com/developers/docs/interactions/application-commands#autocomplete).
- Timeouts: initial response within 3s; tokens valid 15m for follow-ups.

Config & Feature Flags
- `DISCORD_BOT_TOKEN` (string, required to start bot). Example: `"Bot x.y.z"` token.
- `DISCORD_APP_ID` (string, required for registration).
- `DISCORD_GUILD_ID` (string, recommended for fast dev updates).

Observability
- Counters: `discord.command` { name }, `discord.autocomplete` { name }, `discord.error` { name }.
- Logs include latency and rows returned for DB-heavy calls.

Security
- Validate `n` for `/logs` (1–500). Validate `id` is numeric and belongs to current `mode` when acting.

Perf
- Autocomplete limited to 20 results; DB queries indexed fields.
- Use deferred replies for long ops.

### 📂 Files Involved

🟦 TO READ AND UNDERSTAND FIRST
- `/home/probi/swe/repo/polymarket-copy-bot/src/core/app/main-loop.ts` — wiring point to start the bot.
- `/home/probi/swe/repo/polymarket-copy-bot/src/utils/logger.ts` — getLogTailSnapshot.
- `/home/probi/swe/repo/polymarket-copy-bot/src/utils/external-helpers.ts` — portfolio summary helpers.
- `/home/probi/swe/repo/polymarket-copy-bot/src/core/data-ingestion/polymarket-rtds.ts` — `lastRtdsMessageTimeMs` for RTDS status.
- `/home/probi/swe/repo/polymarket-copy-bot/src/core/store/schema.ts` — position and related tables.

🟨 MODIFY
- `/home/probi/swe/repo/polymarket-copy-bot/package.json` — add deps and scripts (register commands).
- `/home/probi/swe/repo/polymarket-copy-bot/src/core/app/main-loop.ts` — call `startDiscordBot(...)` after provider ready.
- `/home/probi/swe/repo/polymarket-copy-bot/.env.*` — add new envs.

🟩 CREATE
- `/home/probi/swe/repo/polymarket-copy-bot/src/rpc/discord/commands.ts` — command defs/handlers.
- `/home/probi/swe/repo/polymarket-copy-bot/src/rpc/discord-bot.ts` — gateway client and router.
- `/home/probi/swe/repo/polymarket-copy-bot/scripts/register-discord-commands.ts` — one-off command registrar.

🟥 DELETE
- None.

### 🧭 Optional Visuals

```mermaid
sequenceDiagram
  participant User
  participant Discord
  participant Bot
  participant DB
  User->>Discord: /position id:123
  Discord->>Bot: InteractionCreate (3s window)
  Bot->>Discord: deferReply(ephemeral)
  Bot->>DB: select position + meta + current price
  DB-->>Bot: rows
  Bot->>Discord: editReply(details)
```

### 🌐 Helpful Tool Results (as tool’s session_id)
- Discord docs fetch: `smart_fetch_url_multiple/we_need_authoritative_details_for_discord_slash_commands_responses_and_autocomplete_to_write_an_accurate_plan_with_citations/z8ykatabeo`

### 📚 References
- Discord Application Commands (Slash Commands): https://discord.com/developers/docs/interactions/application-commands
- Receiving and Responding to Interactions (timeouts, ephemeral, followups): https://discord.com/developers/docs/interactions/receiving-and-responding
- Autocomplete: https://discord.com/developers/docs/interactions/application-commands#autocomplete

Why these: Official Discord developer docs ensure correct, current contracts and limits.

### ▶️ Plan Summary

1. Add `discord.js` + REST deps and env vars; register commands to guild.
2. Implement typed command defs, autocomplete, and handlers (DRY helpers reused).
3. Wire `startDiscordBot` into `main-loop` with injected `executionProvider` and `mode` context.
4. Implement guarded `/close` and `/close-all`; make replies ephemeral with emojis and tables.
5. Log/metrics for observability; keep all operations non-blocking and within 3s initial response.

### 🔴 IMPORTANT REMINDERS
- Initial reply within 3 seconds; use deferral if needed.
- Keep autocomplete to ≤20 items and concise labels.
- Protect close commands via user allowlist; default deny if not configured.
- Don’t block execution critical paths; bot runs independently and uses short DB queries.

]]>
</file>
<file path=".dev/md/plans/2025/10/07/do not change.md">
<![CDATA[
<|PLAN_FORMAT_START|>
# Plan: Discord Bot with Slash Commands, Autocomplete, and Portfolio Controls

## 👤 User's Original Message
Original User Message:
```txt
/PLAN_X 

- [ ]  Add Discord Bot (Important: Include emojis for UI and UX | Ensure you use the Discord Slash Commands API that has autocompletes for UX - not manual slash commands | Ensure DRY in code)
    - [ ]  /status - Returns bot states such as essential statuses like RTDS status (is connected/disconnected), WS statuses, Num Current Open Positions, Current Unrealized PnL, Lifetime Realized PnL
    - [ ]  /logs [n] - Returns last n lines of human logs
    - [ ]  /portfolio - Same as portfolio summary
    - [ ]  /positions - Returns all current running positions, table formatted
        - [ ]  Cols: ID, UPNL
    - [ ]  /position [id] - Returns position details. Format is same as Position Opened from Discord Webhook, but include token id/asset id below Market Link, and include Entry Price (Avg) below Entry Price, and include Current Price below Entry Price (Avg), and include Unrealized PNL below Current Price
    - [ ]  /close [id] - Force close pos by id
    - [ ]  /close-all - Force close all running pos
```

## Proposed Plan

### ❌ Critical Information Needed
None blocking. We can safely proceed with guild-scoped commands first to avoid global propagation delays.

### ⚠️ Initial Best Assumptions to Address Ambiguities
1. MODERATE: Discord bot token and application (client) ID will be provided via env. -> We'll add validated env vars and guard startup.
2. MODERATE: Commands will be registered per-guild in `local/test` envs and optionally globally for production. -> Provide scripts for both.
3. MODERATE: Max log lines `n` default to 50 if omitted; cap to 500 for safety. -> Prevent spam and meet UX.

### ☁️ Current State
1. TypeScript Node service with strict typing; pnpm; dotenvx; Drizzle PostgreSQL; main entry `src/index.ts` -> `run()` in `src/core/app/main-loop.ts`.
2. Discord Webhook notifications already exist in `src/notify/discord-webhook.ts` and listeners in `src/notify/listeners.ts`.
3. Utilities available:
   - `getLogTailSnapshot()` in `src/utils/logger.ts` for logs
   - Portfolio helpers in `src/utils/external-helpers.ts`: `getPortfolioSummary`, `buildClosedPositionsSummaryMessage`, `loadMetaForPosition`
4. Placeholder file `src/rpc/discord-bot.ts` (empty) ready for bot implementation.

### 🌟 Desired Goal State
1. Slash-command Discord bot running inside the same process as the main app (optional toggle), exposing:
   - `/status`, `/logs`, `/portfolio`, `/positions`, `/position`, `/close`, `/close-all`
2. Autocomplete UX for `/position` (id argument) and for `/logs n` numeric helper.
3. Responses use embeds, emojis, ephemeral responses where appropriate, and follow DRY helpers.
4. Commands registered per-guild in dev; script available for global production registration.

### 🛣️ Brainstorm Implementation Approaches
* Approach 1: Use discord.js v14 Client + REST registerer in-process.
  - Pros: Mature, typed, great docs; easy Autocomplete; resilient.
  - Cons: Adds dependency; needs gateway connection.
* Approach 2: Raw Discord REST/websocket implementation.
  - Pros: Minimal deps.
  - Cons: Reinventing client; higher maintenance.
* Approach 3: Separate microservice.
  - Pros: Isolation.
  - Cons: Extra infra, complexity.

Chosen Approach: 1 — discord.js v14 in-process for fastest delivery, rich features, and typings.

Rollback: Feature flag to disable the Discord bot without code removal; no DB migrations.

### 🗺️ Very Detailed Plan
1. Dependencies and env
   - Add `discord.js` and `@discordjs/rest`, `discord-api-types` to deps.
   - Env vars (validated in `src/core/config/env.ts`):
     - `DISCORD_BOT_TOKEN` (string, required when ENABLE_DISCORD_BOT=true)
     - `DISCORD_APP_ID` (string)
     - `DISCORD_GUILD_IDS` (comma-separated list for dev registration)
     - `ENABLE_DISCORD_BOT` (boolean; default false)
   - Rationale: Required to login a gateway client and register commands.

2. Command registration script (non-interactive CLI)
   - Create `scripts/discord-register-commands.ts`:
     - Reads commands built in `src/rpc/discord-bot.ts` (export JSON defs)
     - Uses REST `PUT` routes for guild(s) during local; global for production
     - Per docs: Register via HTTP; upsert behavior [Application Commands](https://discord.com/developers/docs/interactions/application-commands#registering-a-command). Limit: 25 options per command.

3. Bot runtime integration
   - Implement `src/rpc/discord-bot.ts`:
     - Export `startDiscordBot(env, deps): { stop(): Promise<void> }`
     - Inside: create `Client` with intents `Guilds` only; hook `interactionCreate`.
       - Autocomplete: detect `interaction.isAutocomplete()` and return suggestions.
       - Commands: detect `interaction.isChatInputCommand()` and route.
       - Use `interaction.reply({ embeds, flags: MessageFlags.Ephemeral })` for ephemeral where useful. `ephemeral` is deprecated; use `flags` [InteractionReplyOptions](https://discord.js.org/docs/packages/discord.js/stable/InteractionReplyOptions:Interface).

4. DRY helper layer for embeds and formatting
   - Create `src/rpc/discord/ui.ts`:
     - `embed(title, fields, color)` returning APIEmbed
     - Emoji constants; table builder for monospaced columns
     - `formatPositionDetails()` reusing `loadMetaForPosition` and helpers from `utils/external-helpers`

5. Implement commands
   - `/status`
     - Show: RTDS status (connected/disconnected) via `lastRtdsMessageTimeMs` age from `src/core/data-ingestion/polymarket-rtds.ts`, open positions count (DB), unrealized/realized via `getPortfolioSummary`.
   - `/logs n?`
     - Optional integer with autocomplete (suggest 25, 50, 100, 200, 500). Use `getLogTailSnapshot(maxChars)` and slice to n lines; return as code block. Cap n to 500.
   - `/portfolio`
     - Use `getPortfolioSummary` + `buildClosedPositionsSummaryMessage`, post embed.
   - `/positions`
     - Query open positions for current mode; render table with columns: ID, UPNL (current unrealized per position), include emojis.
   - `/position id`
     - Autocomplete id from recent open/closed positions; show embed: Market Link, Token/Asset ID, Entry Price, Entry Price (Avg), Current Price, Unrealized PnL.
   - `/close id`
     - Calls provider.closePosition with reason `MANUAL`, source `manual`.
   - `/close-all`
     - Iterate open positions; call closePosition with reason `MANUAL`.
   - All DB access via existing schema; mode aware (dry_run/live).

6. Autocomplete behavior
   - Use Discord Autocomplete per spec (focused option true; choices cannot co-exist) [Autocomplete](https://discord.com/developers/docs/interactions/application-commands#autocomplete).
   - `/position id` -> suggest top 25 open position IDs by recency; `/logs n` -> suggest list [25,50,100,200,500].

7. Safety, limits, and UX
   - Ephemeral responses for `/logs` and `/close*`; non-ephemeral for portfolio summaries.
   - Guard long outputs with truncation; log dev-only warnings when truncating.
   - Emojis: ✅/🟥/✳️/📈/📉/🧮/🧰 for sections.

8. Wire into main-loop
   - In `src/core/app/main-loop.ts`, after bot started event, conditionally start Discord bot if `ENABLE_DISCORD_BOT` true. Reuse notifier fields in logs, but keep separate.

9. Scripts
   - Add pnpm scripts:
     - `discord:register:guild` (per env GUILD_IDS)
     - `discord:register:global`
     - `discord:dev` (run bot with app)

10. Rollback
   - Set `ENABLE_DISCORD_BOT=false` to disable. Commands can remain registered; no runtime impact.

Traceability bullets:
- Slash commands + autocomplete → steps 2–6
- Status/logs/portfolio/positions/position/close/close-all → step 5
- Emojis, embeds, UX → steps 4–5,7
- DRY → step 4

### 💻 Specs

Models / Schemas: no DB schema changes.

Classes
```ts
// src/rpc/discord-bot.ts
export interface DiscordBotDeps {
    getMode(): 'dry_run' | 'live';
    closePosition(args: { positionId: number }): Promise<void>;
}
export function startDiscordBot(env: Env, deps: DiscordBotDeps): Promise<{ stop(): Promise<void> }>; // starts client, registers handlers
```

Functions
```ts
// src/rpc/discord/ui.ts
export function buildEmbed(params: { title: string; description?: string; fields?: { name: string; value: string; inline?: boolean }[]; color?: number }): APIEmbed;
export function table(columns: string[], rows: string[][]): string; // returns monospaced table inside ```
export function positionDetailEmbed(positionId: number): Promise<APIEmbed>; // uses loadMetaForPosition, DB reads
```

Libraries Involved
- discord.js v14 — Client, events, embed building, interaction replies [(Client)](https://discord.js.org/docs/packages/discord.js/stable/Client:Class)
- Discord Dev Portal — command registration/Autocomplete [(Application Commands)](https://discord.com/developers/docs/interactions/application-commands), [(Autocomplete)](https://discord.com/developers/docs/interactions/application-commands#autocomplete)

API Call Snippets
```ts
// Register per-guild
await rest.put(
  Routes.applicationGuildCommands(appId, guildId),
  { body: commands }
);

// Global
await rest.put(
  Routes.applicationCommands(appId),
  { body: commands }
);
```

Reply Options
```ts
// Ephemeral reply in v14: prefer flags
await interaction.reply({
  content: 'Done',
  flags: MessageFlags.Ephemeral,
});
```

Config & Feature Flags
```ts
// src/core/config/env.ts additions
DISCORD_BOT_TOKEN: z.string().optional(),
DISCORD_APP_ID: z.string().optional(),
DISCORD_GUILD_IDS: z.string().optional(), // comma list
ENABLE_DISCORD_BOT: z.string().optional().transform(v => v ? v.toLowerCase() === 'true' : false),
```

Observability
- Counters: `discord.commands.invoked`, `discord.commands.error`
- Logs around registration and interaction handling.

### 📂 Files Involved

🟦 TO READ FIRST
- `/home/probi/swe/repo/polymarket-copy-bot/src/utils/logger.ts` — logs snapshot helper
- `/home/probi/swe/repo/polymarket-copy-bot/src/utils/external-helpers.ts` — portfolio and meta helpers
- `/home/probi/swe/repo/polymarket-copy-bot/src/core/app/main-loop.ts` — startup wiring

🟨 MODIFY
- `/home/probi/swe/repo/polymarket-copy-bot/src/core/config/env.ts` — add envs
- `/home/probi/swe/repo/polymarket-copy-bot/src/core/app/main-loop.ts` — start bot when enabled
- `/home/probi/swe/repo/polymarket-copy-bot/package.json` — add scripts and deps

🟩 CREATE
- `/home/probi/swe/repo/polymarket-copy-bot/src/rpc/discord-bot.ts` — bot runtime
- `/home/probi/swe/repo/polymarket-copy-bot/src/rpc/discord/ui.ts` — embeds/tables DRY
- `/home/probi/swe/repo/polymarket-copy-bot/scripts/discord-register-commands.ts` — registration CLI

🟥 DELETE
- None

### 🧭 Optional Visuals

```mermaid
sequenceDiagram
    participant User
    participant Discord
    participant Bot
    participant DB
    User->>Discord: /position 123
    Discord->>Bot: interactionCreate (ChatInput)
    Bot->>DB: loadMetaForPosition(123)
    DB-->>Bot: meta, prices, pnl
    Bot-->>Discord: reply embed (non-ephemeral)
```

### 🌐 Helpful Tool Results (as tool’s session_id)
- Docs: smart_fetch_url_multiple/fetch_official_docs_pages_to_cite_and_ensure_correct_apis_for_discord_slash_commands_deployment_and_autocomplete/mp69lsskz8
- Docs: smart_fetch_url_multiple/collect_official_docs_citations_for_implementing_discord_slash_commands_autocomplete_and_reply_flags_in_discord_js_v14_and_discord_dev_portal/j5yw1fqqgx
- Repo scan: codebase_search/find_existing_placeholders_or_integration_points_for_discord_bot/gvmpzsdxt4
- Repo scan: codebase_search/locate_functions_for_logs_and_portfolio_summary/94tytxcxjo

### 📚 References
- Discord Application Commands (Slash, Autocomplete, Limits): https://discord.com/developers/docs/interactions/application-commands
- discord.js InteractionReplyOptions (ephemeral flags): https://discord.js.org/docs/packages/discord.js/stable/InteractionReplyOptions:Interface
- discord.js Client interactionCreate event: https://discord.js.org/docs/packages/discord.js/stable/Client:Class

### ▶️ Plan Summary
1. Add envs + dependencies; create registration script.
2. Implement `startDiscordBot` with handlers for ChatInput and Autocomplete.
3. Build DRY UI helpers and all requested commands.
4. Wire the bot under a feature flag; add pnpm scripts for registration.
5. Deploy guild-scoped in dev; optional global in prod.

### 🔴 IMPORTANT REMINDERS
- Don’t mix `choices` with `autocomplete` on the same option (Discord spec).
- Use `flags: MessageFlags.Ephemeral` in replies, not deprecated `ephemeral`.
- Cap outputs and use ephemeral for sensitive responses.
<|PLAN_FORMAT_END|>

]]>
</file>
<file path="scripts/register-discord-commands.ts">
<![CDATA[
import { loadDiscordEnv } from '@/core/config/env-discord';
import { buildSlashCommandDefs } from '@/rpc/discord/discord-commands';
import { createLogger } from '@/utils/telemetry/logger';

const logger = createLogger({ tag: 'discord.register' });

async function sleep(ms: number): Promise<void> {
    await new Promise((resolve) => setTimeout(resolve, ms));
}

async function putRawJson(url: string, token: string, payloadJson: string, label: string): Promise<void> {
    let attempts = 0;
    while (true) {
        const res = await fetch(url, {
            method: 'PUT',
            headers: {
                'Content-Type': 'application/json',
                Authorization: `Bot ${token}`,
            },
            body: payloadJson,
        });
        if (res.status === 429) {
            const h1 = res.headers.get('retry-after');
            const h2 = res.headers.get('x-ratelimit-reset-after');
            const retryMs = Math.max(0, Math.ceil(parseFloat(h1 ?? h2 ?? '1') * 1000));
            attempts += 1;
            logger.warn({ label, attempts, retryMs }, 'rate_limited_retry');
            if (attempts > 5) {
                throw new Error(`Discord rate limit: exceeded retries for ${label}`);
            }
            await sleep(retryMs);
            continue;
        }
        if (!res.ok) {
            const body = await res.text();
            throw new Error(`Discord API error (${label}): ${res.status} ${body}`);
        }
        return;
    }
}

async function main(): Promise<void> {
    const env = loadDiscordEnv();
    const scopeArg = process.argv.find((a) => a.startsWith('--scope=')) ?? '--scope=guild';
    const scope = scopeArg.split('=')[1] ?? 'guild';

    const token = env.DISCORD_BOT_TOKEN;
    const appId = env.DISCORD_APP_ID;
    const guildId = env.DISCORD_GUILD_ID;
    const channelId = env.DISCORD_CHANNEL_ID;

    if (!token) throw new Error('DISCORD_BOT_TOKEN is required');
    if (!appId) throw new Error('DISCORD_APP_ID is required');

    // Preflight: verify token belongs to the specified application
    const meRes = await fetch('https://discord.com/api/v10/users/@me', {
        method: 'GET',
        headers: { Authorization: `Bot ${token}` },
    });
    if (!meRes.ok) {
        const body = await meRes.text();
        throw new Error(`Discord token validation failed: ${meRes.status} ${body}`);
    }
    const me = (await meRes.json()) as { id?: string } | unknown;
    const userId = (me as any)?.id ? String((me as any).id) : undefined;
    if (!userId) {
        throw new Error('Discord token validation succeeded but no user id returned');
    }
    if (String(userId) !== String(appId)) {
        throw new Error(
            `Bot token user id does not match DISCORD_APP_ID. token.userId=${userId} env.DISCORD_APP_ID=${String(appId)}`
        );
    }

    const defs = buildSlashCommandDefs();

    let url: string;
    if (scope === 'global') {
        url = `https://discord.com/api/v10/applications/${appId}/commands`;
    } else {
        if (!guildId) throw new Error('DISCORD_GUILD_ID is required for guild scope');
        url = `https://discord.com/api/v10/applications/${appId}/guilds/${guildId}/commands`;
    }

    // Force wipe using bulk overwrite (minimizes requests and avoids 429s)
    try {
        const globalUrl = `https://discord.com/api/v10/applications/${appId}/commands`;
        const guildUrl = guildId
            ? `https://discord.com/api/v10/applications/${appId}/guilds/${guildId}/commands`
            : undefined;
        logger.info('Wiping all global commands via bulk overwrite');
        await putRawJson(globalUrl, token, '[]', 'wipe_global');
        if (guildUrl) {
            logger.info({ guildId }, 'Wiping all guild commands via bulk overwrite');
            await putRawJson(guildUrl, token, '[]', 'wipe_guild');
        }
        logger.success('Command wipe completed');
    } catch (wipeErr) {
        logger.warn({ err: wipeErr }, 'wipe_commands_warning');
    }

    logger.info({ scope, url, count: defs.length }, 'Upserting Discord application commands');
    await putRawJson(url, token, JSON.stringify(defs), 'upsert_commands');
    logger.success('Commands registered');
}

main().catch((err) => {
    logger.error({ err }, 'register_commands_failed');
    process.exit(1);
});

]]>
</file>
<file path="src/notify/discord-webhook.ts">
<![CDATA[
import { z } from 'zod';
import { createLogger } from '@/utils/telemetry/logger';

const logger = createLogger({ tag: 'discord-webhook' });

const FieldSchema = z.object({
    name: z.string(),
    value: z.string(),
    inline: z.boolean().optional(),
});
const MessageSchema = z.object({
    title: z.string(),
    description: z.string().optional(),
    fields: z.array(FieldSchema).optional(),
    color: z.number().int().optional(),
});

export class DiscordWebhookNotifier {
    private readonly webhookUrl: string | undefined;
    private static readonly TIMEOUT_MS = 1500;
    constructor(webhookUrl: string | undefined) {
        this.webhookUrl = webhookUrl;
    }

    async sendMessage(payload: {
        title: string;
        description?: string;
        fields?: { name: string; value: string; inline?: boolean }[];
        color?: number;
    }): Promise<void> {
        // Fire-and-forget: schedule and resolve immediately to avoid blocking callers
        setTimeout(() => {
            void (async () => {
                try {
                    const parsed = MessageSchema.safeParse(payload);
                    if (!parsed.success) {
                        logger.warn(
                            { err: parsed.error.message, title: payload.title },
                            'Discord payload validation failed'
                        );
                        return;
                    }
                    if (!this.webhookUrl) {
                        logger.debug(
                            { title: payload.title },
                            'Discord webhook not configured; skipping send'
                        );
                        return; // silently noop if not configured
                    }
                    const body = {
                        embeds: [
                            {
                                title: payload.title,
                                description: payload.description,
                                fields: payload.fields,
                                color: payload.color,
                            },
                        ],
                    };
                    const controller = new AbortController();
                    const timer = setTimeout(
                        () => controller.abort(),
                        DiscordWebhookNotifier.TIMEOUT_MS
                    );
                    try {
                        logger.debug({ title: payload.title }, 'Sending Discord webhook');
                        const res = await fetch(this.webhookUrl, {
                            method: 'POST',
                            headers: { 'Content-Type': 'application/json' },
                            body: JSON.stringify(body),
                            signal: controller.signal,
                        });
                        if (!res.ok) {
                            logger.warn(
                                { status: res.status, title: payload.title },
                                'Discord webhook returned non-OK'
                            );
                        } else {
                            logger.success({ title: payload.title }, 'Discord webhook sent');
                        }
                    } catch (err) {
                        logger.warn({ err, title: payload.title }, 'Discord webhook send failed');
                    } finally {
                        clearTimeout(timer);
                    }
                } catch (err) {
                    logger.warn({ err, title: payload.title }, 'Discord sendMessage error');
                }
            })();
        }, 0);
        return;
    }
}

]]>
</file>
<file path="src/utils/safe-enc-dec.ts">
<![CDATA[
import { randomBytes, scryptSync, createCipheriv, createDecipheriv } from "node:crypto";

const ALGORITHM = "aes-256-gcm" as const;
const SALT_LENGTH = 16;
const IV_LENGTH = 12;
const KEY_LENGTH = 32;
const TAG_LENGTH = 16;
const VERSION_PREFIX = "v1.";
const APP_ENC_PP = "polymarket-copy-bot-4fea1f8f10940f33bcfea88a65d383d61fddd79d"  // DO NOT CHANGE THIS!

type EncParams = { text: string; pp: string };
type DecParams = { enc: string; pp: string };

export function enc({ text, pp }: EncParams): string {
    if (typeof text !== "string") {
        throw new TypeError("text must be a string");
    }
    if (typeof pp !== "string" || pp.length === 0) {
        throw new TypeError("pp must be a non-empty string");
    }

    const salt = randomBytes(SALT_LENGTH);
    const key = scryptSync(Buffer.from(pp, "utf8"), salt, KEY_LENGTH);
    const iv = randomBytes(IV_LENGTH);

    const cipher = createCipheriv(ALGORITHM, key, iv);
    const ciphertext = Buffer.concat([cipher.update(Buffer.from(text, "utf8")), cipher.final()]);
    const authTag = cipher.getAuthTag();

    // payload layout: [salt | iv | tag | ciphertext]
    const payload = Buffer.concat([salt, iv, authTag, ciphertext]);
    return VERSION_PREFIX + payload.toString("base64");
}

export function dec({ enc: enced, pp }: DecParams): string {
    if (typeof enced !== "string" || !enced.startsWith(VERSION_PREFIX)) {
        throw new TypeError("invalid enced payload format");
    }
    if (typeof pp !== "string" || pp.length === 0) {
        throw new TypeError("pp must be a non-empty string");
    }

    const payloadB64 = enced.slice(VERSION_PREFIX.length);
    const payload = Buffer.from(payloadB64, "base64");

    if (payload.length < SALT_LENGTH + IV_LENGTH + TAG_LENGTH) {
        throw new Error("enced payload too short");
    }

    const salt = payload.subarray(0, SALT_LENGTH);
    const iv = payload.subarray(SALT_LENGTH, SALT_LENGTH + IV_LENGTH);
    const tagStart = SALT_LENGTH + IV_LENGTH;
    const authTag = payload.subarray(tagStart, tagStart + TAG_LENGTH);
    const ciphertext = payload.subarray(tagStart + TAG_LENGTH);

    const key = scryptSync(Buffer.from(pp, "utf8"), salt, KEY_LENGTH);
    const decipher = createDecipheriv(ALGORITHM, key, iv);
    decipher.setAuthTag(authTag);

    const plaintext = Buffer.concat([decipher.update(ciphertext), decipher.final()]);
    return plaintext.toString("utf8");
}

export function appEnc(text: string) {
    return enc({ text, pp: APP_ENC_PP });
}

export function appDec(enc: string) {
    return dec({ enc: enc, pp: APP_ENC_PP });
}
]]>
</file>
<file path="tests/integration/dry-run-inventory.test.ts">
<![CDATA[
import { describe, it, beforeEach, afterEach, beforeAll, expect } from 'vitest';

// IMPORTANT: Ensure DATABASE_URL points to a test database BEFORE importing db
// The project resolves aliases like @/ via tsconfig paths
import { db } from '@/core/store/db';
import { positionTable, copyOrderTable } from '@/core/store/schema';
import { DiscordWebhookNotifier } from '@/notify/discord-webhook';
import { Executor } from '@/core/exec/executor';
import { DryRunExecutionProvider } from '@/core/exec/providers/dry-run-execution-provider';
import type { LeaderConfig } from '@/core/config/config';
import type { TradeFeedMessage } from '@/core/domain/trade';
import { and, eq } from 'drizzle-orm';
import type { Address } from '@/core/domain/common';
import { resetDb } from '../test-helpers';

function createExecutorForTest(leaders: LeaderConfig[]): Executor {
    const provider = new DryRunExecutionProvider();
    const notifier = new DiscordWebhookNotifier(undefined);
    return new Executor({
        executionProvider: provider,
        discord: notifier,
        maxSlippageBps: 50,
        globalMaxPositions: 9999,
        leaders,
        orderType: 'FOK',
        globalMaxUsdcInvested: 1_000_000,
        orderThrottleMs: 0,
        buyPriceBlockLimit: 0.96,
    });
}

function trade(params: Partial<TradeFeedMessage>): TradeFeedMessage {
    return {
        asset: params.asset ?? 'token:TEST',
        bio: '',
        conditionId: params.conditionId ?? '0xcond',
        eventSlug: '',
        icon: '',
        name: '',
        outcome: params.outcome ?? 'Yes',
        outcomeIndex: 0,
        price: params.price ?? 0.5,
        profileImage: '',
        proxyWallet: params.proxyWallet ?? ('0x1111111111111111111111111111111111111111' as Address),
        pseudonym: '',
        side: params.side ?? 'BUY',
        size: params.size ?? 2,
        slug: '',
        timestamp: params.timestamp ?? Math.floor(Date.now() / 1000),
        title: '',
        transactionHash: params.transactionHash ?? `0x${Math.random().toString(16).slice(2).padEnd(64, '0')}`,
        ingestSource: params.ingestSource ?? 'sim',
        receivedAtMs: Date.now(),
    };
}

const TEST_LEADER = '0x1111111111111111111111111111111111111111' as Address;

const testLeaderCfg: LeaderConfig = {
    address: TEST_LEADER,
    displayName: 'Test Leader',
    maxPositions: 100,
    // Mirror trade.size 1:1 to amountUsdc for deterministic sizing in tests
    positionSizeUsdc: { kind: 'mirror_1to1' },
    positionExpiryMs: 60_000,
    categoriesAllowed: undefined,
    outcomesAllowed: undefined,
    copySidesAllowed: undefined,
};

beforeAll(() => {
    process.env.ERROR_LOG_ENABLED = 'false';
});

beforeEach(async () => {
    await resetDb();
});

afterEach(async () => {
    // Allow async eventBus/discord timers to settle before cleaning DB
    await new Promise((r) => setTimeout(r, 1));
    await resetDb();
});

describe('Dry run execution inventory netting & aggregation', () => {
    
    // Given: two BUY trades same token
    // When: they are processed
    // Then: only one open long exists with weighted-average entry
    it('aggregates multiple BUYs into a single open position with weighted average', async () => {
        // Given: empty DB, a leader, and two BUY trades on the same token
        const executor = createExecutorForTest([testLeaderCfg]);
        const tokenId = 'token:AGG';
        const t1 = trade({ proxyWallet: TEST_LEADER, asset: tokenId, side: 'BUY', size: 2, price: 0.20 });
        const t2 = trade({ proxyWallet: TEST_LEADER, asset: tokenId, side: 'BUY', size: 3, price: 0.40, timestamp: t1.timestamp + 1, transactionHash: '0x' + 'b'.repeat(64) });

        // When: handle both trades sequentially
        await executor.handleLeaderTrade(t1);
        await executor.handleLeaderTrade(t2);

        // Then: one open position exists; amountUsdc = 5; shares computed with BUY slippage (+0.5%)
        const rows = await db
            .select()
            .from(positionTable)
            .where(and(eq(positionTable.tokenId, tokenId), eq(positionTable.status, 'open')));
        expect(rows.length).toBe(1);
        const pos = rows[0]!;
        const sl = 0.005;
        const s1 = 2 / (0.20 * (1 + sl));
        const s2 = 3 / (0.40 * (1 + sl));
        const expectedShares = s1 + s2;
        const expectedAvg = 5 / expectedShares;
        expect(Number(pos.amountUsdc)).toBeCloseTo(5, 6);
        expect(Number(pos.sizeShares)).toBeCloseTo(expectedShares, 6);
        // Weighted-average price should be tracked in entryPriceAvg (entryPrice is the very first fill)
        expect(Number((pos as any).entryPriceAvg)).toBeCloseTo(expectedAvg, 6);
        // And entryPrice should remain the initial fill price (with BUY slippage applied)
        const firstEntry = 0.20 * (1 + sl); // 0.201
        expect(Number(pos.entryPrice)).toBeCloseTo(firstEntry, 6);
    });

    // Given: an open BUY exists
    // When: SELL for smaller notional arrives
    // Then: long is reduced (not closed), no new short is opened
    it('SELL reduces an existing BUY (partial reduce keeps open)', async () => {
        // Given: an open long created by a BUY
        const executor = createExecutorForTest([testLeaderCfg]);
        const tokenId = 'token:REDUCE';
        const buy = trade({ proxyWallet: TEST_LEADER, asset: tokenId, side: 'BUY', size: 10, price: 0.50, transactionHash: '0x' + 'c'.repeat(64) });
        await executor.handleLeaderTrade(buy);

        // When: a SELL arrives with amount less than inventory
        const sell = trade({ proxyWallet: TEST_LEADER, asset: tokenId, side: 'SELL', size: 5, price: 0.60, transactionHash: '0x' + 'd'.repeat(64), timestamp: buy.timestamp + 2 });
        await executor.handleLeaderTrade(sell);

        // Then: position remains open with reduced shares and updated amount (use slippage +/-0.5%)
        const rows = await db
            .select()
            .from(positionTable)
            .where(and(eq(positionTable.tokenId, tokenId), eq(positionTable.status, 'open')));
        expect(rows.length).toBe(1);
        const pos = rows[0]!;
        const sl = 0.005;
        const initialShares = 10 / (0.50 * (1 + sl));
        const reducedShares = 5 / (0.60 * (1 - sl));
        const expectedShares = initialShares - Math.min(initialShares, reducedShares);
        const avgEntry = 10 / initialShares;
        const expectedAmount = expectedShares * avgEntry;
        expect(Number(pos.sizeShares)).toBeCloseTo(expectedShares, 6);
        expect(Number(pos.amountUsdc)).toBeCloseTo(expectedAmount, 6);
        expect(String(pos.status)).toBe('open');

    });

    // Given: no inventory
    // When: SELL arrives
    // Then: request is skipped; no position or order is persisted
    it('SELL with no inventory creates no position', async () => {
        // Given: no positions for token
        const executor = createExecutorForTest([testLeaderCfg]);
        const tokenId = 'token:NOINV';

        // When: SELL arrives first
        const sell = trade({ proxyWallet: TEST_LEADER, asset: tokenId, side: 'SELL', size: 5, price: 0.30, transactionHash: '0x' + 'e'.repeat(64) });
        await executor.handleLeaderTrade(sell);

        // Then: there are no positions and no copy orders
        const posRows = await db
            .select()
            .from(positionTable)
            .where(eq(positionTable.tokenId, tokenId));
        expect(posRows.length).toBe(0);

        const coRows = await db
            .select()
            .from(copyOrderTable)
            .where(eq(copyOrderTable.desiredSide, 'SELL'));
        expect(coRows.length).toBe(0);

    });
});

]]>
</file>
</files>
<files>
<file path=".dev/docs/manual-poly-clob.ts">
<![CDATA[
`
POLYMARKET CLOB - CONCISE DOCS
==============================

TYPES
=====

import{SignatureType,SignedOrder}from"@polymarket/order-utils";import{AxiosRequestHeaders}from"axios";export interface ApiKeyCreds{key:string;secret:string;passphrase:string}export interface ApiKeyRaw{apiKey:string;secret:string;passphrase:string}export interface L2HeaderArgs{method:string;requestPath:string;body? :string}export interface L1PolyHeader extends AxiosRequestHeaders{POLY_ADDRESS:string;POLY_SIGNATURE:string;POLY_TIMESTAMP:string;POLY_NONCE:string}export interface L2PolyHeader extends AxiosRequestHeaders{POLY_ADDRESS:string;POLY_SIGNATURE:string;POLY_TIMESTAMP:string;POLY_API_KEY:string;POLY_PASSPHRASE:string}export declare enum Side{BUY="BUY",SELL="SELL"}export declare enum OrderType{GTC="GTC",FOK="FOK",GTD="GTD",FAK="FAK"}export interface PostOrdersArgs{order:SignedOrder;orderType:OrderType}export interface NewOrder<T extends OrderType>{readonlyorder:{readonlysalt:number;readonly maker:string;readonly signer:string;readonly taker:string;readonly tokenId:string;readonly makerAmount:string;readonly takerAmount:string;readonly expiration:string;readonly nonce:string;readonly feeRateBps:string;readonly side:Side;readonly signatureType:SignatureType;readonly signature:string};readonly owner:string;readonly orderType:T;readonly deferExec:boolean};export interface UserOrder{tokenID:string;price:number;size:number;side:Side;feeRateBps? :number;nonce? :number;expiration? :number;taker? :string}export interface UserMarketOrder{tokenID:string;price? :number;amount:number;side:Side;feeRateBps? :number;nonce? :number;taker? :string;orderType? :OrderType.FOK|OrderType.FAK}export interface OrderPayload{orderID:string}export interface ApiKeysResponse{apiKeys:ApiKeyCreds[]}export interface BanStatus{closed_only:boolean}export interface OrderResponse{success:boolean;errorMsg:string;orderID:string;transactionsHashes:string[];status:string;takingAmount:string;makingAmount:string}export interface OpenOrder{id:string;status:string;owner:string;maker_address:string;market:string;asset_id:string;side:string;original_size:string;size_matched:string;price:string;associate_trades:string[];outcome:string;created_at:number;expiration:string;order_type:string}export typeOpenOrdersResponse=OpenOrder[];export interface TradeParams{id? :string;maker_address? :string;market? :string;asset_id? :string;before? :string;after? :string}export interface OpenOrderParams{id? :string;market? :string;asset_id? :string}export interface MakerOrder{order_id:string;owner:string;maker_address:string;matched_amount:string;price:string;fee_rate_bps:string;asset_id:string;outcome:string;side:Side}export interface Trade{id:string;taker_order_id:string;market:string;asset_id:string;side:Side;size:string;fee_rate_bps:string;price:string;status:string;match_time:string;last_update:string;outcome:string;bucket_index:number;owner:string;maker_address:string;maker_orders:MakerOrder[];transaction_hash:string;trader_side:"TAKER"|"MAKER"}export declare enum Chain{POLYGON=137,AMOY=80002}export interface MarketPrice{t:number;p:number}export interface PriceHistoryFilterParams{market? :string;startTs? :number;endTs? :number;fidelity? :number;interval? :PriceHistoryInterval}export declare enum PriceHistoryInterval{MAX="max",ONE_WEEK="1w",ONE_DAY="1d",SIX_HOURS="6h",ONE_HOUR="1h"}export interface DropNotificationParams{ids:string[]}export interface Notification{type:number;owner:string;payload:any}export interface OrderMarketCancelParams{market? :string;asset_id? :string}export interface OrderBookSummary{market:string;asset_id:string;timestamp:string;bids:OrderSummary[];asks:OrderSummary[];min_order_size:string;tick_size:string;neg_risk:boolean;hash:string}export interface OrderSummary{price:string;size:string}export declare enum AssetType{COLLATERAL="COLLATERAL",CONDITIONAL="CONDITIONAL"}export interface BalanceAllowanceParams{asset_type:AssetType;token_id? :string}export interface BalanceAllowanceResponse{balance:string;allowance:string}export interface OrderScoringParams{order_id:string}export interface OrderScoring{scoring:boolean}export interface OrdersScoringParams{orderIds:string[]}export typeOrdersScoring={[orderId in string]:boolean};export typeCreateOrderOptions={tickSize:TickSize;negRisk? :boolean};export typeTickSize="0.1"|"0.01"|"0.001"|"0.0001";export interface RoundConfig{readonly price:number;readonly size:number;readonly amount:number}export interface TickSizes{[tokenId:string]:TickSize}export interface NegRisk{[tokenId:string]:boolean}export interface FeeRates{[tokenId:string]:number}export interface PaginationPayload{readonly limit:number;readonly count:number;readonly next_cursor:string;readonly data:any[]}export interface MarketTradeEvent{event_type:string;market:{condition_id:string;asset_id:string;question:string;icon:string;slug:string};user:{address:string;username:string;profile_picture:string;optimized_profile_picture:string;pseudonym:string};side:Side;size:string;fee_rate_bps:string;price:string;outcome:string;outcome_index:number;transaction_hash:string;timestamp:string}export interface BookParams{token_id:string;side:Side}export interface UserEarning{date:string;condition_id:string;asset_address:string;maker_address:string;earnings:number;asset_rate:number}export interface TotalUserEarning{date:string;asset_address:string;maker_address:string;earnings:number;asset_rate:number}export interface RewardsPercentages{[market:string]:number}export interface Token{token_id:string;outcome:string;price:number}export interface RewardsConfig{asset_address:string;start_date:string;end_date:string;rate_per_day:number;total_rewards:number}export interface MarketReward{condition_id:string;question:string;market_slug:string;event_slug:string;image:string;rewards_max_spread:number;rewards_min_size:number;tokens:Token[];rewards_config:RewardsConfig[]}export interface Earning{asset_address:string;earnings:number;asset_rate:number}export interface UserRewardsEarning{condition_id:string;question:string;market_slug:string;event_slug:string;image:string;rewards_max_spread:number;rewards_min_size:number;market_competitiveness:number;tokens:Token[];rewards_config:RewardsConfig[];maker_address:string;earning_percentage:number;earnings:Earning[]}

IMPORTANT: THIS IS NOT OUR CUSTOM DEFINED TYPE! To use Polymarket Clob Types, import from "@polymarket/clob-client":
import { OrderBookSummary } from "@polymarket/clob-client";

EXAMPLE 1
==========

await clobClient.getOrderBooks([{ token_id: "22131816317087462222441767751936061504662310118809793860064034214346537862051", side: Side.BUY }]);

[{"market":"0x6cb4d646f8a46b92d5201622c50ff6bf3a41556cf1059c20ba37c0cfbade1c13","asset_id":"22131816317087462222441767751936061504662310118809793860064034214346537862051","timestamp":"1759831913645","hash":"83c78a093583ce964bd8aebc2c01c76999e3bea4","bids":[{"price":"0.01","size":"1000"},{"price":"0.02","size":"460.05"},{"price":"0.03","size":"233.33"},{"price":"0.04","size":"10"},{"price":"0.06","size":"400"},{"price":"0.07","size":"384.14"},{"price":"0.08","size":"272.22"}],"asks":[{"price":"0.99","size":"1000"},{"price":"0.98","size":"6000"},{"price":"0.8","size":"300"},{"price":"0.79","size":"1332"},{"price":"0.78","size":"1272"},{"price":"0.7","size":"2000"},{"price":"0.69","size":"289"},{"price":"0.68","size":"6"},{"price":"0.36","size":"10.93"},{"price":"0.33","size":"20"},{"price":"0.32","size":"10"},{"price":"0.31","size":"25"},{"price":"0.26","size":"285.8"},{"price":"0.16","size":"9.07"},{"price":"0.14","size":"20"},{"price":"0.13","size":"210"},{"price":"0.11","size":"475.14"},{"price":"0.1","size":"409"}],"min_order_size":"5","tick_size":"0.01","neg_risk":true}]
`;

]]>
</file>
<file path=".dev/docs/manual-poly-data-api.md">
<![CDATA[

Developer Quickstart
API Rate Limits
​
How Rate Limiting Works
All rate limits are enforced using Cloudflare’s throttling system. When you exceed the maximum configured rate for any endpoint, requests are throttled rather than immediately rejected. This means:
Throttling: Requests over the limit are delayed/queued rather than dropped
Burst Allowances: Some endpoints allow short bursts above the sustained rate
Time Windows: Limits reset based on sliding time windows (e.g., per 10 seconds, per minute)
​
General Rate Limits
Endpoint	Limit	Notes
General Rate Limiting	5000 requests / 10s	Throttle requests over the maximum configured rate
”OK” Endpoint	50 requests / 10s	Throttle requests over the maximum configured rate
​
Data API Rate Limits
Endpoint	Limit	Notes
Data API (General)	100 requests / 10s	Throttle requests over the maximum configured rate
Data API (Alternative)	600 requests / 1 minute	1 hour block on violation
Data API /trades	30 requests / 10s	Throttle requests over the maximum configured rate
Data API “OK” Endpoint	10 requests / 10s	Throttle requests over the maximum configured rate
​
GAMMA API Rate Limits
Endpoint	Limit	Notes
GAMMA (General)	750 requests / 10s	Throttle requests over the maximum configured rate
GAMMA Get Comments	100 requests / 10s	Throttle requests over the maximum configured rate
GAMMA /events	100 requests / 10s	Throttle requests over the maximum configured rate
GAMMA /markets	100 requests / 10s	Throttle requests over the maximum configured rate
GAMMA /markets /events listing	100 requests / 10s	Throttle requests over the maximum configured rate
GAMMA Tags	100 requests / 10s	Throttle requests over the maximum configured rate
GAMMA Search	300 requests / 10s	Throttle requests over the maximum configured rate
​
CLOB API Rate Limits
​
General CLOB Endpoints
Endpoint	Limit	Notes
CLOB (General)	5000 requests / 10s	Throttle requests over the maximum configured rate
CLOB GET Balance Allowance	125 requests / 10s	Throttle requests over the maximum configured rate
CLOB UPDATE Balance Allowance	20 requests / 10s	Throttle requests over the maximum configured rate
​
CLOB Market Data
Endpoint	Limit	Notes
CLOB /book	200 requests / 10s	Throttle requests over the maximum configured rate
CLOB /books (website)	300 requests / 10s	Throttle requests over the maximum configured rate
CLOB /books	80 requests / 10s	Throttle requests over the maximum configured rate
CLOB /price	200 requests / 10s	Throttle requests over the maximum configured rate
CLOB /prices	80 requests / 10s	Throttle requests over the maximum configured rate
CLOB /midprice	200 requests / 10s	Throttle requests over the maximum configured rate
CLOB /midprices	80 requests / 10s	Throttle requests over the maximum configured rate
​
CLOB Ledger Endpoints
Endpoint	Limit	Notes
CLOB Ledger (/trades /orders /notifications /order)	300 requests / 10s	Throttle requests over the maximum configured rate
CLOB Ledger /data/orders	150 requests / 10s	Throttle requests over the maximum configured rate
CLOB Ledger /data/trades	150 requests / 10s	Throttle requests over the maximum configured rate
CLOB /notifications	125 requests / 10s	Throttle requests over the maximum configured rate
​
CLOB Markets & Pricing
Endpoint	Limit	Notes
CLOB Price History	100 requests / 10s	Throttle requests over the maximum configured rate
CLOB Markets	250 requests / 10s	Throttle requests over the maximum configured rate
CLOB Market Tick Size	50 requests / 10s	Throttle requests over the maximum configured rate
CLOB markets/0x	50 requests / 10s	Throttle requests over the maximum configured rate
CLOB /markets listing	100 requests / 10s	Throttle requests over the maximum configured rate
​
CLOB Authentication
Endpoint	Limit	Notes
CLOB API Keys	50 requests / 10s	Throttle requests over the maximum configured rate
​
CLOB Trading Endpoints
Endpoint	Limit	Notes
CLOB POST /order	2400 requests / 10s (240/s)	BURST - Throttle requests over the maximum configured rate
CLOB POST /order	24000 requests / 10 minutes (40/s)	Throttle requests over the maximum configured rate
CLOB POST /order (by token id)	800 requests / 10s (80/s)	BURST - Throttle requests over the maximum configured rate
CLOB POST /order (by token id)	12000 requests / 10 minutes (20/s)	Throttle requests over the maximum configured rate
CLOB DELETE /order	2400 requests / 10s (240/s)	BURST - Throttle requests over the maximum configured rate
CLOB DELETE /order	24000 requests / 10 minutes (40/s)	Throttle requests over the maximum configured rate
CLOB POST /orders	800 requests / 10s (80/s)	BURST - Throttle requests over the maximum configured rate
CLOB POST /orders	12000 requests / 10 minutes (20/s)	Throttle requests over the maximum configured rate
CLOB DELETE /orders	800 requests / 10s (80/s)	BURST - Throttle requests over the maximum configured rate
CLOB DELETE /orders	12000 requests / 10 minutes (20/s)	Throttle requests over the maximum configured rate
CLOB DELETE /cancel-all	200 requests / 10s (20/s)	BURST - Throttle requests over the maximum configured rate
CLOB DELETE /cancel-all	3000 requests / 10 minutes (5/s)	Throttle requests over the maximum configured rate
CLOB DELETE /cancel-market-orders	800 requests / 10s (80/s)	BURST - Throttle requests over the maximum configured rate
CLOB DELETE /cancel-market-orders	12000 requests / 10 minutes (20/s)	Throttle requests over the maximum configured rate
​
Other API Rate Limits
Endpoint	Limit	Notes
RELAYER /submit	15 requests / 1 minute	Throttle requests over the maximum configured rate
User PNL API	100 requests / 10s	Throttle requests over the maximum configured rate
Glossary


# Polymarket Documentation: Get Current Positions for a User

Returns positions filtered by user and optional filters.

### Endpoint

`GET /positions`

### Request Example (cURL)

```bash
curl --request GET \
  --url https://data-api.polymarket.com/positions
```

### Status Codes

| Status | Description |
| :----- | :---------- |
| 200    | Success     |
| 400    | Bad Request |
| 401    | Unauthorized |
| 500    | Internal Server Error |

### Query Parameters

| Parameter | Type | Required | Default | Description | Example |
| :--- | :--- | :--- | :--- | :--- | :--- |
| `user` | `string` | **required** | | User address (required) | `"0x56687bf447db6ffa42ffe2204a05edaa20f55839"` |
| `market` | `string[]` | | | Comma-separated list of condition IDs. Mutually exclusive with `eventId`. (0x-prefixed 64-hex string) | |
| `eventId` | `integer[]` | | | Comma-separated list of event IDs. Mutually exclusive with `market`. | |
| `sizeThreshold` | `number` | | `1` | Required range: `x >= 0` | |
| `redeemable` | `boolean` | | `false` | | |
| `mergeable` | `boolean` | | `false` | | |
| `limit` | `integer` | | `100` | Required range: `0 <= x <= 500` | |
| `offset` | `integer` | | `0` | Required range: `0 <= x <= 10000` | |
| `sortBy` | `enum<string>` | | `TOKENS` | Available options: `CURRENT`, `INITIAL`, `TOKENS`, `CASHPNL`, `PERCENTPNL`, `TITLE`, `RESOLVING`, `PRICE`, `AVGPRICE` | |
| `sortDirection` | `enum<string>` | | `DESC` | Available options: `ASC`, `DESC` | |
| `title` | `string` | | | Maximum length: 100 | |

### Response (200 Success - `application/json`)

List of positions

```json
[
  {
    "proxyWallet": "0x5adf695a088172a920b6d0b2e5b7d88aa8ffa5e7",
    "asset": "22532673444371000087276855698976185959891603058477427058498190868809631671643",
    "conditionId": "0x2b6a5170c30fbeba1b2317cf98929a446af82e2dc2bc5e84a07959b35bc2edbb",
    "size": 689.991638,
    "avgPrice": 0.212752,
    "initialValue": 146.797100967776,
    "currentValue": 141.44828579,
    "cashPnl": -5.348815177776009,
    "percentPnl": -3.6436790253440687,
    "totalBought": 699.991638,
    "realizedPnl": 0,
    "percentRealizedPnl": -5.020214340108156,
    "curPrice": 0.205,
    "redeemable": false,
    "mergeable": false,
    "title": "Will Celta Vigo win on 2025-10-05?",
    "slug": "lal-cel-mad-2025-10-05-cel",
    "icon": "https://polymarket-upload.s3.us-east-2.amazonaws.com/lal_celta_vigo.png",
    "eventId": "47924",
    "eventSlug": "lal-cel-mad-2025-10-05",
    "outcome": "Yes",
    "outcomeIndex": 0,
    "oppositeOutcome": "No",
    "oppositeAsset": "95416813017536330994120103652237010090486650775573169623122187070843615636364",
    "endDate": "2025-10-05",
    "negativeRisk": true
  },
  ...
]
```

#### Response Fields

| Field | Type | Description | Example |
| :--- | :--- | :--- | :--- |
| `proxyWallet` | `string` | User Profile Address (0x-prefixed, 40 hex chars) | `"0x56687bf447db6ffa42ffe2204a05edaa20f55839"` |
| `asset` | `string` | | |
| `conditionId` | `string` | 0x-prefixed 64-hex string | `"0xdd22472e552920b8438158ea7238bfadfa4f736aa4cee91a6b86c39ead110917"` |
| `size` | `number` | | |
| `avgPrice` | `number` | | |
| `initialValue` | `number` | | |
| `currentValue` | `number` | | |
| `cashPnl` | `number` | | |
| `percentPnl` | `number` | | |
| `totalBought` | `number` | | |
| `realizedPnl` | `number` | | |
| `percentRealizedPnl` | `number` | | |
| `curPrice` | `number` | | |
| `redeemable` | `boolean` | | |
| `mergeable` | `boolean` | | |
| `title` | `string` | | |
| `slug` | `string` | | |
| `icon` | `string` | | |
| `eventSlug` | `string` | | |
| `outcome` | `string` | | |
| `outcomeIndex` | `integer` | | |
| `oppositeOutcome` | `string` | | |
| `oppositeAsset` | `string` | | |
| `endDate` | `string` | | |
| `negativeRisk` | `boolean` | | |

---

*Other related endpoints mentioned:*

* Health check
* Get trades for a user or markets

# Polymarket Documentation: Get Trades for a User or Markets

## Core: Get trades for a user or markets

Returns trades filtered by user and/or market identifiers.

### Endpoint

`GET /trades`

### Request Example (cURL)

```bash
curl --request GET \
  --url https://data-api.polymarket.com/trades
```

### Status Codes

| Status | Description |
| :----- | :---------- |
| 200    | Success     |
| 400    | Bad Request |
| 401    | Unauthorized |
| 500    | Internal Server Error |

### Query Parameters

| Parameter | Type | Default | Required Range | Description | Example |
| :--- | :--- | :--- | :--- | :--- | :--- |
| `limit` | `integer` | `100` | `0 <= x <= 10000` | | |
| `offset` | `integer` | `0` | `0 <= x <= 10000` | | |
| `takerOnly` | `boolean` | `true` | | | |
| `filterType` | `enum<string>` | | | Must be provided together with `filterAmount`. Available options: `CASH`, `TOKENS`. | |
| `filterAmount` | `number` | | `x >= 0` | Must be provided together with `filterType`. | |
| `market` | `string[]` | | | Comma-separated list of condition IDs (0x-prefixed 64-hex string). Mutually exclusive with `eventId`. | |
| `eventId` | `integer[]` | | | Comma-separated list of event IDs. Mutually exclusive with `market`. | |
| `user` | `string` | | | User Profile Address (0x-prefixed, 40 hex chars). | `"0x56687bf447db6ffa42ffe2204a05edaa20f55839"` |
| `side` | `enum<string>` | | | Available options: `BUY`, `SELL`. | |

### Response (200 Success - `application/json`)

List of trades

```json
[
  {
    "proxyWallet": "0x5adf695a088172a920b6d0b2e5b7d88aa8ffa5e7",
    "side": "SELL",
    "asset": "10556390943081047040362703548123771402014160833887429090228355495495795329131",
    "conditionId": "0x1d221af524997a388c696773235bdf08740e620ee1e164659a1302272ffc6f14",
    "size": 129.1,
    "price": 0.22,
    "timestamp": 1759491562,
    "title": "Will Getafe win on 2025-10-03?",
    "slug": "lal-osa-get-2025-10-03-get",
    "icon": "https://polymarket-upload.s3.us-east-2.amazonaws.com/lal_getafe.png",
    "eventSlug": "lal-osa-get-2025-10-03",
    "outcome": "Yes",
    "outcomeIndex": 0,
    "name": "XxConorxX",
    "pseudonym": "Purple-Shelter",
    "bio": "God Bless Charlie Kirk",
    "profileImage": "https://polymarket-upload.s3.us-east-2.amazonaws.com/profile-image-2865805-78a97917-fb27-4b2c-9ad6-0158f2ef7d3a.png",
    "profileImageOptimized": "",
    "transactionHash": "0x331fe02b949d5ca31885c311c527d7d4ed0b98d71923e701551e162abf5d3719"
  },
  ...
]
```

#### Response Fields

| Field | Type | Description | Example |
| :--- | :--- | :--- | :--- |
| `proxyWallet` | `string` | User Profile Address (0x-prefixed, 40 hex chars) | `"0x56687bf447db6ffa42ffe2204a05edaa20f55839"` |
| `side` | `enum<string>` | Available options: `BUY`, `SELL` | |
| `asset` | `string` | | |
| `conditionId` | `string` | 0x-prefixed 64-hex string | `"0xdd22472e552920b8438158ea7238bfadfa4f736aa4cee91a6b86c39ead110917"` |
| `size` | `number` | | |
| `price` | `number` | | |
| `timestamp` | `integer` | | |
| `title` | `string` | | |
| `slug` | `string` | | |
| `icon` | `string` | | |
| `eventSlug` | `string` | | |
| `outcome` | `string` | | |
| `outcomeIndex` | `integer` | | |
| `name` | `string` | | |
| `pseudonym` | `string` | | |
| `bio` | `string` | | |
| `profileImage` | `string` | | |
| `profileImageOptimized` | `string` | | |
| `transactionHash` | `string` | | |


# Polymarket Documentation: Get Closed Positions for a User

## Core: Get closed positions for a user

Fetches closed positions for a user (address).

### Endpoint

`GET /closed-positions`

### Request Example (cURL)

```bash
curl --request GET \
  --url https://data-api.polymarket.com/closed-positions
```

### Status Codes

| Status | Description |
| :----- | :---------- |
| 200    | Success     |
| 400    | Bad Request |
| 401    | Unauthorized |
| 500    | Internal Server Error |

### Query Parameters

| Parameter | Type | Required | Default | Required Range | Description | Example |
| :--- | :--- | :--- | :--- | :--- | :--- | :--- |
| `user` | `string` | **required** | | | The address of the user in question. | `"0x56687bf447db6ffa42ffe2204a05edaa20f55839"` |
| `market` | `string[]` | | | | The conditionId of the market in question. Supports multiple CSV separated values. Cannot be used with the `eventId` param. (0x-prefixed 64-hex string) | |
| `title` | `string` | | | Maximum length: 100 | Filter by market title. | |
| `eventId` | `integer[]` | | | | The event id of the event in question. Supports multiple CSV separated values. Returns positions for all markets for those event ids. Cannot be used with the `market` param. | |
| `limit` | `integer` | | `50` | `0 <= x <= 500` | The max number of positions to return. | |
| `offset` | `integer` | | `0` | `0 <= x <= 10000` | The starting index for pagination. | |
| `sortBy` | `enum<string>` | | `REALIZEDPNL` | | The sort criteria. Available options: `REALIZEDPNL`, `TITLE`, `PRICE`, `AVGPRICE`. | |
| `sortDirection` | `enum<string>` | | `DESC` | | The sort direction. Available options: `ASC`, `DESC`. | |

### Response (200 Success - `application/json`)

```json
[
  {
    "proxyWallet": "0x5adf695a088172a920b6d0b2e5b7d88aa8ffa5e7",
    "asset": "105862139550598651869144991581649266505740323692381441468334576128241388255355",
    "conditionId": "0x078c6aac96ffa529781967e5608484735cef2a1668804653f70a8a9f77e80142",
    "avgPrice": 0.31604501945997504,
    "totalBought": 1390.634362,
    "realizedPnl": 255.814616,
    "curPrice": 0,
    "title": "Orioles vs. Yankees",
    "slug": "mlb-bal-nyy-2025-09-27",
    "icon": "https://polymarket-upload.s3.us-east-2.amazonaws.com/Repetitive-markets/MLB.jpg",
    "eventSlug": "mlb-bal-nyy-2025-09-27",
    "outcome": "Orioles",
    "outcomeIndex": 0,
    "oppositeOutcome": "Yankees",
    "oppositeAsset": "21098470966028966930663125053209505279564548160002102091763058078727565449356",
    "endDate": "2025-10-04T00:00:00Z"
  },
  ...
]
```

#### Response Fields

| Field | Type | Description | Example |
| :--- | :--- | :--- | :--- |
| `proxyWallet` | `string` | User Profile Address (0x-prefixed, 40 hex chars) | `"0x56687bf447db6ffa42ffe2204a05edaa20f55839"` |
| `asset` | `string` | | |
| `conditionId` | `string` | 0x-prefixed 64-hex string | `"0xdd22472e552920b8438158ea7238bfadfa4f736aa4cee91a6b86c39ead110917"` |
| `avgPrice` | `number` | | |
| `totalBought` | `number` | | |
| `realizedPnl` | `number` | | |
| `curPrice` | `number` | | |
| `title` | `string` | | |
| `slug` | `string` | | |
| `icon` | `string` | | |
| `eventSlug` | `string` | | |
| `outcome` | `string` | | |
| `outcomeIndex` | `integer` | | |
| `oppositeOutcome` | `string` | | |
| `oppositeAsset` | `string` | | |
| `endDate` | `string` | | |

# Polymarket TS CLOB Client

```ts
//npm install @polymarket/clob-client
//npm install ethers

//Client initialization example and dumping API Keys

import { ApiKeyCreds, ClobClient, OrderType, Side, } from "@polymarket/clob-client";
import { Wallet } from "@ethersproject/wallet";

const host = 'https://clob.polymarket.com';
const funder = '';//This is your Polymarket Profile Address, where you send UDSC to. 
const signer = new Wallet(""); //This is your Private Key. If using email login export from https://reveal.magic.link/polymarket otherwise export from your Web3 Application


//In general don't create a new API key, always derive or createOrDerive
const creds = new ClobClient(host, 137, signer).createOrDeriveApiKey();

//0: Browser Wallet(Metamask, Coinbase Wallet, etc)
//1: Magic/Email Login
const signatureType = 1; 
  (async () => {
    const clobClient = new ClobClient(host, 137, signer, await creds, signatureType, funder);
    const resp2 = await clobClient.createAndPostOrder(
        {
            tokenID: "", //Use https://docs.polymarket.com/developers/gamma-markets-api/get-markets to grab a sample token
            price: 0.01,
            side: Side.BUY,
            size: 5,
        },
        { tickSize: "0.001",negRisk: false }, //You'll need to adjust these based on the market. Get the tickSize and negRisk T/F from the get-markets above
        //{ tickSize: "0.001",negRisk: true },

        OrderType.GTC, 
    );
    console.log(resp2)
  })();
  ```
]]>
</file>
<file path=".dev/docs/manual-poly-gamma.md">
<![CDATA[
## Polymarket API Documentation: List Events

This page documents the **List events** API endpoint for Polymarket, which allows retrieving a list of prediction markets (events).

### API Endpoint

| Method | Path      | Base URL                           | Purpose     |
| :----- | :-------- | :--------------------------------- | :---------- |
| `GET`  | `/events` | `https://gamma-api.polymarket.com` | List events |

### Query Parameters

The endpoint supports various parameters for filtering, sorting, and pagination:

| Parameter                                | Type                    | Description                                                        |
| :--------------------------------------- | :---------------------- | :----------------------------------------------------------------- |
| `limit`, `offset`                        | `integer`               | Pagination controls.                                               |
| `order`, `ascending`                     | `string`, `boolean`     | Sorting parameters.                                                |
| `id`, `slug`                             | `integer[]`, `string[]` | Filter by specific event IDs or slugs.                             |
| `tag_id`, `exclude_tag_id`               | `integer`               | Filter by associated tags.                                         |
| `featured`, `closed`, `cyom`             | `boolean`               | Filter by status (e.g., featured, closed, Create Your Own Market). |
| `start_date_min/max`, `end_date_min/max` | `string<date-time>`     | Filter events by date range.                                       |
| `include_chat`, `include_template`       | `boolean`               | Include associated chat or template data.                          |

### Response Structure (Event Object)

The API returns a list of event objects (JSON array), each containing extensive data. Key fields include:

| Field                                        | Type                | Description                                                                |
| :------------------------------------------- | :------------------ | :------------------------------------------------------------------------- |
| `id`, `ticker`, `slug`, `title`              | `string`            | Basic identification and display data.                                     |
| `startDate`, `endDate`                       | `string<date-time>` | Event timeline.                                                            |
| `active`, `closed`, `featured`, `restricted` | `boolean`           | Event status indicators.                                                   |
| `liquidity`, `volume`, `openInterest`        | `number`            | Market financial metrics.                                                  |
| `markets`                                    | `object[]`          | Nested array containing detailed market objects associated with the event. |
| `series`                                     | `object[]`          | Nested array containing series information the event belongs to.           |
| `categories`, `tags`                         | `object[]`          | Categorization and tagging data.                                           |
| `volume24hr`, `volume1wk`, etc.              | `number`            | Volume data across different timeframes.                                   |

#### Nested Market Object Fields

Each `market` within an event includes details such as: `question`, `conditionId`, `endDate`, `marketType`, `volumeNum`, `liquidityNum`, pricing information (`lastTradePrice`, `bestBid`, `bestAsk`), and various status flags.

### Example Output

```json
[
    {
        "id": 57116,
        "ticker": "nhl-metropolitan-division-winner",
        "slug": "nhl-metropolitan-division-winner-831",
        "title": "NHL: Metropolitan Division Winner",
        "description": "This market will resolve according to the team that wins the listed division during the 2025-26 NHL regular season.\n\nIf at any point it becomes impossible for a listed team to win its division (e.g., mathematical elimination before season end), the relevant market will resolve immediately to “No.”\n\nIf the 2025-26 NHL season is permanently canceled or has not been completed by June 30, 2026, 11:59 PM ET, this market will resolve to “Other.”",
        "resolutionSource": "",
        "startDate": "2025-10-10T00:34:45.548328Z",
        "creationDate": "2025-10-10T00:34:45.548322Z",
        "endDate": "2026-04-30T00:00:00Z",
        "image": "https://polymarket-upload.s3.us-east-2.amazonaws.com/nhl-metropolitan-division-winner-831-BiOhOAV6ln-4.png",
        "icon": "https://polymarket-upload.s3.us-east-2.amazonaws.com/nhl-metropolitan-division-winner-831-BiOhOAV6ln-4.png",
        "active": true,
        "closed": false,
        "archived": false,
        "new": false,
        "featured": false,
        "restricted": true,
        "liquidity": 9680,
        "openInterest": 0,
        "sortBy": "price",
        "createdAt": "2025-10-09T20:29:37.053812Z",
        "updatedAt": "2025-10-10T05:46:11.123915Z",
        "competitive": 0.8470089994706194,
        "enableOrderBook": true,
        "liquidityClob": 9680,
        "negRisk": true,
        "negRiskMarketID": "0xc1bd6e88f5a19d4d451188f8e9a78952e48db9676aedcba4573b8dd271d79600",
        "commentCount": 0,
        "markets": [
            {
                "id": 629070,
                "question": "Will the Carolina Hurricanes win the Metropolitan Division?",
                "conditionId": "0xa998022efc89d60331ac15e78103dafd765e65eaea433405638c4e293d2b0fa6",
                "slug": "will-the-carolina-hurricanes-win-the-metropolitan-division-123",
                "endDate": "2026-04-30T00:00:00Z",
                "liquidity": 300,
                "startDate": "2025-10-10T00:23:22.977509Z",
                "image": "https://polymarket-upload.s3.us-east-2.amazonaws.com/nhl-metropolitan-division-winner-831-BiOhOAV6ln-4.png",
                "icon": "https://polymarket-upload.s3.us-east-2.amazonaws.com/nhl-metropolitan-division-winner-831-BiOhOAV6ln-4.png",
                "description": "This market will resolve according to the team that wins the listed division during the 2025-26 NHL regular season.\n\nIf at any point it becomes impossible for a listed team to win its division (e.g., mathematical elimination before season end), the relevant market will resolve immediately to “No.”\n\nIf the 2025-26 NHL season is permanently canceled or has not been completed by June 30, 2026, 11:59 PM ET, this market will resolve to “Other.”",
                "outcomes": ["Yes", "No"],
                "outcomePrices": ["0.35", "0.65"],
                "active": true,
                "closed": false,
                "marketMakerAddress": "",
                "createdAt": "2025-10-09T20:29:37.904431Z",
                "updatedAt": "2025-10-10T05:42:19.24627Z",
                "new": false,
                "featured": false,
                "submitted_by": "0x91430CaD2d3975766499717fA0D66A78D814E5c5",
                "archived": false,
                "resolvedBy": "0x2F5e3684cb1F318ec51b00Edba38d79Ac2c0aA9d",
                "restricted": true,
                "groupItemTitle": "Carolina Hurricanes",
                "groupItemThreshold": 0,
                "questionID": "0xc1bd6e88f5a19d4d451188f8e9a78952e48db9676aedcba4573b8dd271d79600",
                "enableOrderBook": true,
                "orderPriceMinTickSize": 0.01,
                "orderMinSize": 5,
                "liquidityNum": 300,
                "endDateIso": "2026-04-30",
                "startDateIso": "2025-10-10",
                "hasReviewedDates": true,
                "clobTokenIds": [
                    "63645197726705524606059371558162512012201160965301656466640547461234264539392",
                    "5617477483144744882677399661863606310473044785725076606563294855884593377840"
                ],
                "umaBond": 500,
                "umaReward": 5,
                "liquidityClob": 300,
                "customLiveness": 0,
                "acceptingOrders": true,
                "negRisk": true,
                "negRiskMarketID": "0xc1bd6e88f5a19d4d451188f8e9a78952e48db9676aedcba4573b8dd271d79600",
                "negRiskRequestID": "0x9b2ab6a19ab61ed010aa5fe60f474283affc335829f807d6b5e5901f7de69661",
                "ready": false,
                "funded": false,
                "acceptingOrdersTimestamp": "2025-10-10T00:23:01Z",
                "cyom": false,
                "competitive": 0.293398533007335,
                "pagerDutyNotificationEnabled": false,
                "approved": true,
                "rewardsMinSize": 0,
                "rewardsMaxSpread": 0,
                "spread": 0.7,
                "bestAsk": 0.7,
                "automaticallyActive": true,
                "clearBookOnStart": true,
                "showGmpSeries": false,
                "showGmpOutcome": false,
                "manualActivation": false,
                "negRiskOther": false,
                "umaResolutionStatuses": [],
                "pendingDeployment": false,
                "deploying": false,
                "deployingTimestamp": "2025-10-10T00:11:25.336806Z",
                "rfqEnabled": false,
                "holdingRewardsEnabled": false,
                "feesEnabled": false
            }
        ],
        "tags": [
            {
                "id": 1,
                "label": "Sports",
                "slug": "sports",
                "forceShow": false,
                "publishedAt": "2023-10-24T22:37:50.296Z",
                "updatedBy": 15,
                "createdAt": "2023-10-24T22:37:50.31Z",
                "updatedAt": "2024-07-05T21:07:21.800664Z",
                "forceHide": true
            },
            {
                "id": 899,
                "label": "NHL",
                "slug": "nhl",
                "forceShow": false,
                "publishedAt": "2024-01-22T17:16:28.432Z",
                "createdAt": "2024-01-22T17:16:28.449Z",
                "updatedAt": "2024-05-30T22:36:11.118646Z"
            },
            {
                "id": 100088,
                "label": "Hockey",
                "slug": "hockey",
                "cyom": false,
                "showAllOutcomes": true,
                "showMarketImages": false,
                "enableNegRisk": true,
                "automaticallyActive": true,
                "gmpChartMode": "default",
                "negRiskAugmented": true,
                "pendingDeployment": false,
                "deploying": false,
                "deployingTimestamp": "2025-10-10T00:08:05.814235Z"
            }
        ]
    },
    ...
]
```

]]>
</file>
<file path=".dev/docs/manual-poly-rtds.md">
<![CDATA[
# Real-Time Data Client

Client wrapper for `real-time-data-streaming` **WebSocket**.

## Quickstart

```ts
import { RealTimeDataClient } from "../src/client";
import { Message } from "../src/model";

const onMessage = (m: Message) => console.log(m.topic, m.type, m.payload);

const onConnect = (client: RealTimeDataClient) => {
  client.subscribe({
    subscriptions: [
      {
        topic: "comments",
        type: "*", // all types for topic
        filters: `{"parentEntityID":100,"parentEntityType":"Event"}`, // empty = no filter
      },
    ],
  });
};

new RealTimeDataClient({ onMessage, onConnect }).connect();
```

## Subscriptions

> After connection, use the same `client: RealTimeDataClient`.

### Subscribe

```ts
// activity.trades
client.subscribe({ subscriptions: [{ topic: "activity", type: "trades" }] });

// all comment types
client.subscribe({ subscriptions: [{ topic: "comments", type: "*" }] });
```

### Unsubscribe

> Unsubscribe from `activity.trades` (if `*` was used earlier, this removes only `trades`).

```ts
client.unsubscribe?.({ // if supported; same shape as subscribe
  subscriptions: [{ topic: "activity", type: "trades" }],
});

// If the client uses subscribe-with-action pattern:
client.subscribe({
  subscriptions: [{ topic: "activity", type: "trades" }],
  action: "unsubscribe",
});
```

### Disconnect

```ts
client.disconnect();
```

## Message Matrix

| Topic                     | Type               | Auth     | Filters (empty = none)                                          | Schema                              | Subscription Handler                          |
| ------------------------- | ------------------ | -------- | --------------------------------------------------------------- | ----------------------------------- | --------------------------------------------- |
| `activity`                | `trades`           | -        | `{"event_slug":"string"}` **OR** `{"market_slug":"string"}`     | [`Trade`](#trade)                   |                                               |
| `activity`                | `orders_matched`   | -        | `{"event_slug":"string"}` **OR** `{"market_slug":"string"}`     | [`Trade`](#trade)                   |                                               |
| `comments`                | `comment_created`  | -        | `{"parentEntityID":number,"parentEntityType":"Event / Series"}` | [`Comment`](#comment)               |                                               |
| `comments`                | `comment_removed`  | -        | same as above                                                   | [`Comment`](#comment)               |                                               |
| `comments`                | `reaction_created` | -        | same as above                                                   | [`Reaction`](#reaction)             |                                               |
| `comments`                | `reaction_removed` | -        | same as above                                                   | [`Reaction`](#reaction)             |                                               |
| `rfq`                     | `request_created`  | -        | -                                                               | [`Request`](#request)               |                                               |
| `rfq`                     | `request_edited`   | -        | -                                                               | [`Request`](#request)               |                                               |
| `rfq`                     | `request_canceled` | -        | -                                                               | [`Request`](#request)               |                                               |
| `rfq`                     | `request_expired`  | -        | -                                                               | [`Request`](#request)               |                                               |
| `rfq`                     | `quote_created`    | -        | -                                                               | [`Quote`](#quote)                   |                                               |
| `rfq`                     | `quote_edited`     | -        | -                                                               | [`Quote`](#quote)                   |                                               |
| `rfq`                     | `quote_canceled`   | -        | -                                                               | [`Quote`](#quote)                   |                                               |
| `rfq`                     | `quote_expired`    | -        | -                                                               | [`Quote`](#quote)                   |                                               |
| `crypto_prices`           | `update`           | -        | `{"symbol":string}`                                             | [`CryptoPrice`](#cryptoprice)       | [`CryptoPriceHistorical`](#initial-data-dump) |
| `crypto_prices_chainlink` | `update`           | -        | `{"symbol":string}`                                             | [`CryptoPrice`](#cryptoprice)       | [`CryptoPriceHistorical`](#initial-data-dump) |
| `clob_user`               | `order`            | ClobAuth | -                                                               | [`Order`](#order)                   |                                               |
| `clob_user`               | `trade`            | ClobAuth | -                                                               | [`Trade (CLOB User)`](#trade-1)     |                                               |
| `clob_market`             | `price_change`     | -        | `["100","200",...]` **(mandatory)**                             | [`PriceChanges`](#pricechanges)     |                                               |
| `clob_market`             | `agg_orderbook`    | -        | `["100","200",...]`                                             | [`AggOrderbook`](#aggorderbook)     | [`AggOrderbook`](#aggorderbook)               |
| `clob_market`             | `last_trade_price` | -        | `["100","200",...]`                                             | [`LastTradePrice`](#lasttradeprice) |                                               |
| `clob_market`             | `tick_size_change` | -        | `["100","200",...]`                                             | [`TickSizeChange`](#ticksizechange) |                                               |
| `clob_market`             | `market_created`   | -        | -                                                               | [`ClobMarket`](#clobmarket)         |                                               |
| `clob_market`             | `market_resolved`  | -        | -                                                               | [`ClobMarket`](#clobmarket)         |                                               |

## Auth

### ClobAuth

```ts
export interface ClobApiKeyCreds {
  key: string;        // API key
  secret: string;     // API secret
  passphrase: string; // Passphrase
}
```

```ts
client.subscribe({
  subscriptions: [
    {
      topic: "clob_user",
      type: "*",
      clob_auth: {
        key: "xxxxxx-xxxx-xxxxx-xxxx-xxxxxx",
        secret: "xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx",
        passphrase: "xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx",
      },
    },
  ],
});
```

## Schemas

### Activity

#### Trade

| Name              | Type    | Description                   |
| ----------------- | ------- | ----------------------------- |
| `asset`           | string  | ERC1155 token ID traded       |
| `bio`             | string  | Trader’s bio                  |
| `conditionId`     | string  | Market/CTF condition ID       |
| `eventSlug`       | string  | Event slug                    |
| `icon`            | string  | Market icon URL               |
| `name`            | string  | Trader’s name                 |
| `outcome`         | string  | Human-readable market outcome |
| `outcomeIndex`    | integer | Outcome index                 |
| `price`           | float   | Trade price                   |
| `profileImage`    | string  | Trader profile image URL      |
| `proxyWallet`     | string  | Trader proxy wallet           |
| `pseudonym`       | string  | Trader pseudonym              |
| `side`            | string  | `BUY` / `SELL`                |
| `size`            | integer | Trade size                    |
| `slug`            | string  | Market slug                   |
| `timestamp`       | integer | Trade timestamp               |
| `title`           | string  | Event title                   |
| `transactionHash` | string  | Tx hash                       |

### Comments

#### Comment

| Name               | Type   | Description         |
| ------------------ | ------ | ------------------- |
| `id`               | string | Comment ID          |
| `body`             | string | Content             |
| `parentEntityType` | string | `Event` or `Series` |
| `parentEntityID`   | number | Parent ID           |
| `parentCommentID`  | string | Parent comment ID   |
| `userAddress`      | string | User address        |
| `replyAddress`     | string | Reply user address  |
| `createdAt`        | string | Created timestamp   |
| `updatedAt`        | string | Updated timestamp   |

#### Reaction

| Name           | Type   | Description       |
| -------------- | ------ | ----------------- |
| `id`           | string | Reaction ID       |
| `commentID`    | number | Comment ID        |
| `reactionType` | string | Reaction type     |
| `icon`         | string | Reaction icon     |
| `userAddress`  | string | User address      |
| `createdAt`    | string | Created timestamp |

### RFQ

#### Request

| Name           | Type   | Description                 |
| -------------- | ------ | --------------------------- |
| `requestId`    | string | Request ID                  |
| `proxyAddress` | string | User proxy                  |
| `market`       | string | Market/CTF condition ID     |
| `token`        | string | ERC1155 token ID            |
| `complement`   | string | Complement ERC1155 token ID |
| `state`        | string | Current state               |
| `side`         | string | Buy/Sell                    |
| `sizeIn`       | number | Input size                  |
| `sizeOut`      | number | Output size                 |
| `price`        | number | Implied price               |
| `expiry`       | number | UNIX expiry                 |

#### Quote

| Name           | Type   | Description                 |
| -------------- | ------ | --------------------------- |
| `quoteId`      | string | Quote ID                    |
| `requestId`    | string | Linked request ID           |
| `proxyAddress` | string | User proxy                  |
| `token`        | string | ERC1155 token ID            |
| `state`        | string | Current state               |
| `side`         | string | Buy/Sell                    |
| `sizeIn`       | number | Input size                  |
| `sizeOut`      | number | Output size                 |
| `condition`    | string | Market/CTF condition ID     |
| `complement`   | string | Complement ERC1155 token ID |
| `expiry`       | number | UNIX expiry                 |

### CryptoPrice

| Name        | Type   | Description    |
| ----------- | ------ | -------------- |
| `symbol`    | string | Asset symbol   |
| `timestamp` | number | ms since epoch |
| `value`     | number | Price value    |

**Filters:** `{"symbol":"btcusdt"}`, `{"symbol":"ethusdt"}`, `{"symbol":"xrpusdt"}`, `{"symbol":"solusdt"}`

#### Initial data dump

On connection with a filter, server sends a snapshot:

* `symbol: string`
* `data: Array<{ timestamp: number; value: number }>`
  (See also: used by `crypto_prices` and `crypto_prices_chainlink`.)

### CLOB User

#### Order

| Name            | Type               | Description                           |
| --------------- | ------------------ | ------------------------------------- |
| `asset_id`      | string             | ERC1155 token ID                      |
| `created_at`    | string (timestamp) | UNIX creation                         |
| `expiration`    | string (timestamp) | UNIX expiration                       |
| `id`            | string             | Order hash                            |
| `maker_address` | string             | Funder address                        |
| `market`        | string             | Condition/market ID                   |
| `order_type`    | string             | `GTC` `GTD` `FOK` `FAK`               |
| `original_size` | string             | Size at placement                     |
| `outcome`       | string             | `YES` / `NO`                          |
| `owner`         | string             | Owner UUID                            |
| `price`         | string             | Decimal price                         |
| `side`          | string             | `BUY` / `SELL`                        |
| `size_matched`  | string             | Matched amount                        |
| `status`        | string             | e.g., `MATCHED`                       |
| `type`          | string             | `PLACEMENT` `CANCELLATION` `FILL` ... |

#### Trade (CLOB User)

| Name               | Type               | Description             |
| ------------------ | ------------------ | ----------------------- |
| `asset_id`         | string             | ERC1155 token ID        |
| `fee_rate_bps`     | string             | Fee rate (bps)          |
| `id`               | string             | Match ID                |
| `last_update`      | string (timestamp) | UNIX last update        |
| `maker_address`    | string             | Maker address           |
| `maker_orders`     | array              | See below               |
| `market`           | string             | Condition/market ID     |
| `match_time`       | string (timestamp) | UNIX execution          |
| `outcome`          | string             | `YES` / `NO`            |
| `owner`            | string             | Taker UUID              |
| `price`            | string             | Decimal price           |
| `side`             | string             | Taker side `BUY`/`SELL` |
| `size`             | string             | Total matched size      |
| `status`           | string             | e.g., `MINED`           |
| `taker_order_id`   | string             | Taker order ID          |
| `transaction_hash` | string             | Settlement tx           |

**`maker_orders` (array items)**

| Name             | Type   | Description    |
| ---------------- | ------ | -------------- |
| `asset_id`       | string | Maker token ID |
| `fee_rate_bps`   | string | Maker fee bps  |
| `maker_address`  | string | Maker address  |
| `matched_amount` | string | Amount matched |
| `order_id`       | string | Maker order ID |
| `outcome`        | string | `YES` / `NO`   |
| `owner`          | string | Maker UUID     |
| `price`          | string | Order price    |
| `side`           | string | `BUY` / `SELL` |

### CLOB Market

#### PriceChanges

| Name | Type               | Description           |
| ---- | ------------------ | --------------------- |
| `m`  | string             | Condition ID          |
| `pc` | array              | Price changes by book |
| `t`  | string (timestamp) | ms since epoch        |

**PriceChange (elements of `pc`)**

| Name | Type   | Description         |
| ---- | ------ | ------------------- |
| `a`  | string | `asset_id`          |
| `h`  | string | book snapshot hash  |
| `p`  | string | price (e.g., `0.5`) |
| `s`  | string | side `BUY`/`SELL`   |
| `si` | string | size at price       |
| `ba` | string | best ask            |
| `bb` | string | best bid            |

> **Filters required:** `["100","200",...]` (asset IDs).

#### AggOrderbook

| Name             | Type               | Description                    |
| ---------------- | ------------------ | ------------------------------ |
| `asks`           | array              | Aggregated asks `{price,size}` |
| `asset_id`       | string             | Asset ID                       |
| `bids`           | array              | Aggregated bids `{price,size}` |
| `hash`           | string             | Snapshot hash                  |
| `market`         | string             | Condition ID                   |
| `min_order_size` | string             | Min order size                 |
| `neg_risk`       | boolean            | NegRisk flag                   |
| `tick_size`      | string             | Min price increment            |
| `timestamp`      | string (timestamp) | ms since epoch                 |

**`asks`/`bids` item**
| `price`: string | `size`: string |

**Initial data dump:** on connection when filters used.

#### LastTradePrice

| Name           | Type   | Description    |
| -------------- | ------ | -------------- |
| `asset_id`     | string | Asset ID       |
| `fee_rate_bps` | string | Fee bps        |
| `market`       | string | Condition ID   |
| `price`        | string | Trade price    |
| `side`         | string | `BUY` / `SELL` |
| `size`         | string | Trade size     |

#### TickSizeChange

| Name            | Type   | Description              |
| --------------- | ------ | ------------------------ |
| `market`        | string | Condition ID             |
| `asset_id`      | string | Array of two ERC1155 IDs |
| `old_tick_size` | string | Previous tick            |
| `new_tick_size` | string | Updated tick             |

#### ClobMarket

| Name             | Type      | Description           |
| ---------------- | --------- | --------------------- |
| `market`         | string    | Condition ID          |
| `asset_ids`      | [2]string | Two ERC1155 asset IDs |
| `min_order_size` | string    | Min order size        |
| `tick_size`      | string    | Min price increment   |
| `neg_risk`       | boolean   | Negative risk         |

]]>
</file>
<file path=".dev/docs/manual-rate-limits.md">
<![CDATA[
POLYMARKET RATE LIMITS

API Rate Limits
​
How Rate Limiting Works
All rate limits are enforced using Cloudflare’s throttling system. When you exceed the maximum configured rate for any endpoint, requests are throttled rather than immediately rejected. This means:
Throttling: Requests over the limit are delayed/queued rather than dropped
Burst Allowances: Some endpoints allow short bursts above the sustained rate
Time Windows: Limits reset based on sliding time windows (e.g., per 10 seconds, per minute)
​
General Rate Limits
Endpoint	Limit	Notes
General Rate Limiting	5000 requests / 10s	Throttle requests over the maximum configured rate
”OK” Endpoint	50 requests / 10s	Throttle requests over the maximum configured rate
​
Data API Rate Limits
Endpoint	Limit	Notes
Data API (General)	100 requests / 10s	Throttle requests over the maximum configured rate
Data API (Alternative)	600 requests / 1 minute	1 hour block on violation
Data API /trades	30 requests / 10s	Throttle requests over the maximum configured rate
Data API “OK” Endpoint	10 requests / 10s	Throttle requests over the maximum configured rate
​
GAMMA API Rate Limits
Endpoint	Limit	Notes
GAMMA (General)	750 requests / 10s	Throttle requests over the maximum configured rate
GAMMA Get Comments	100 requests / 10s	Throttle requests over the maximum configured rate
GAMMA /events	100 requests / 10s	Throttle requests over the maximum configured rate
GAMMA /markets	100 requests / 10s	Throttle requests over the maximum configured rate
GAMMA /markets /events listing	100 requests / 10s	Throttle requests over the maximum configured rate
GAMMA Tags	100 requests / 10s	Throttle requests over the maximum configured rate
GAMMA Search	300 requests / 10s	Throttle requests over the maximum configured rate
​
CLOB API Rate Limits
​
General CLOB Endpoints
Endpoint	Limit	Notes
CLOB (General)	5000 requests / 10s	Throttle requests over the maximum configured rate
CLOB GET Balance Allowance	125 requests / 10s	Throttle requests over the maximum configured rate
CLOB UPDATE Balance Allowance	20 requests / 10s	Throttle requests over the maximum configured rate
​
CLOB Market Data
Endpoint	Limit	Notes
CLOB /book	200 requests / 10s	Throttle requests over the maximum configured rate
CLOB /books (website)	300 requests / 10s	Throttle requests over the maximum configured rate
CLOB /books	80 requests / 10s	Throttle requests over the maximum configured rate
CLOB /price	200 requests / 10s	Throttle requests over the maximum configured rate
CLOB /prices	80 requests / 10s	Throttle requests over the maximum configured rate
CLOB /midprice	200 requests / 10s	Throttle requests over the maximum configured rate
CLOB /midprices	80 requests / 10s	Throttle requests over the maximum configured rate
​
CLOB Ledger Endpoints
Endpoint	Limit	Notes
CLOB Ledger (/trades /orders /notifications /order)	300 requests / 10s	Throttle requests over the maximum configured rate
CLOB Ledger /data/orders	150 requests / 10s	Throttle requests over the maximum configured rate
CLOB Ledger /data/trades	150 requests / 10s	Throttle requests over the maximum configured rate
CLOB /notifications	125 requests / 10s	Throttle requests over the maximum configured rate
​
CLOB Markets & Pricing
Endpoint	Limit	Notes
CLOB Price History	100 requests / 10s	Throttle requests over the maximum configured rate
CLOB Markets	250 requests / 10s	Throttle requests over the maximum configured rate
CLOB Market Tick Size	50 requests / 10s	Throttle requests over the maximum configured rate
CLOB markets/0x	50 requests / 10s	Throttle requests over the maximum configured rate
CLOB /markets listing	100 requests / 10s	Throttle requests over the maximum configured rate
​
CLOB Authentication
Endpoint	Limit	Notes
CLOB API Keys	50 requests / 10s	Throttle requests over the maximum configured rate
​
CLOB Trading Endpoints
Endpoint	Limit	Notes
CLOB POST /order	2400 requests / 10s (240/s)	BURST - Throttle requests over the maximum configured rate
CLOB POST /order	24000 requests / 10 minutes (40/s)	Throttle requests over the maximum configured rate
CLOB POST /order (by token id)	800 requests / 10s (80/s)	BURST - Throttle requests over the maximum configured rate
CLOB POST /order (by token id)	12000 requests / 10 minutes (20/s)	Throttle requests over the maximum configured rate
CLOB DELETE /order	2400 requests / 10s (240/s)	BURST - Throttle requests over the maximum configured rate
CLOB DELETE /order	24000 requests / 10 minutes (40/s)	Throttle requests over the maximum configured rate
CLOB POST /orders	800 requests / 10s (80/s)	BURST - Throttle requests over the maximum configured rate
CLOB POST /orders	12000 requests / 10 minutes (20/s)	Throttle requests over the maximum configured rate
CLOB DELETE /orders	800 requests / 10s (80/s)	BURST - Throttle requests over the maximum configured rate
CLOB DELETE /orders	12000 requests / 10 minutes (20/s)	Throttle requests over the maximum configured rate
CLOB DELETE /cancel-all	200 requests / 10s (20/s)	BURST - Throttle requests over the maximum configured rate
CLOB DELETE /cancel-all	3000 requests / 10 minutes (5/s)	Throttle requests over the maximum configured rate
CLOB DELETE /cancel-market-orders	800 requests / 10s (80/s)	BURST - Throttle requests over the maximum configured rate
CLOB DELETE /cancel-market-orders	12000 requests / 10 minutes (20/s)	Throttle requests over the maximum configured rate
​
Other API Rate Limits
Endpoint	Limit	Notes
RELAYER /submit	15 requests / 1 minute	Throttle requests over the maximum configured rate
User PNL API	100 requests / 10s	Throttle requests over the maximum configured rate
Glossary

]]>
</file>
<file path=".dev/md/plans/2025/10/07/13-09-13_discord-bot-slash-commands.md">
<![CDATA[
## Plan: Discord Bot with Slash Commands (+Autocomplete) for Status, Logs, Portfolio, Positions, Position, Close, Close-All

## Proposed Plan

### ❌ Critical Information Needed

- Do you prefer commands registered as guild-only during development (`DISCORD_GUILD_ID`) or global? Guild scope updates instantly; global can take up to 1 hour to propagate. If not provided, we will use guild scope by default for faster DX.
- Do you already have a Discord Application and Bot set up with the correct OAuth2 scopes? Required: `bot` and `applications.commands`. If not, we will include setup steps.

### ⚠️ Initial Best Assumptions to Address Ambiguities

1. MODERATE: Command scope -> We will register commands to a single guild (via `DISCORD_GUILD_ID`) for immediate availability; we can add a `--global` flag later. Rationale: Faster iteration and safer testing.
2. MODERATE: Bot runtime -> We will run the bot in the same process as the app, started from `main-loop`, non-blocking. Rationale: Simpler deployment and resource sharing.
4. MODERATE: Autocomplete dataset size -> Position counts are small enough to compute suggestions on-demand via DB queries within Discord’s 3s initial response limit.
The Discord Bot is in COMPLETELY PRIVATE server where only owner has access. No need to implement allowlisting.

### ☁️ Current State

1. Node.js ≥20, TypeScript strict, pnpm. See `package.json`.
2. App runs as a long-lived process: entrypoint `src/index.ts` calls `run()` in `src/core/app/main-loop.ts`.
3. DB: PostgreSQL via Drizzle; key tables `position`, `copy_order`, `leader_trade`, etc. Helpers in `src/utils/external-helpers.ts` expose portfolio summary and formatting.
4. Event bus emits lifecycle and trading events (`src/core/domain/event.ts`). Discord notifications currently via webhook only (`src/notify/discord-webhook.ts`).
5. RTDS stream in `src/core/data-ingestion/polymarket-rtds.ts` exposes `lastRtdsMessageTimeMs` for connectivity telemetry.
6. No Discord Bot runtime yet (`src/rpc/discord-bot.ts` is empty).

### 🌟 Desired Goal State

1. A Discord Bot connected via Gateway with slash commands visible in the configured guild.
2. Slash commands:
   - `/status`: RTDS/WS connectivity, open positions count, current unrealized PnL, lifetime realized PnL.
   - `/logs [n]`: Return last N lines of humanized logs.
   - `/portfolio`: Portfolio summary (reuse existing formatting).
   - `/positions`: Table of current open positions with columns: ID, UPNL.
   - `/position [id]`: Detailed position view with extra fields (tokenId, Entry Price (Avg), Current Price, Unrealized PnL).
   - `/close [id]`: Force close a specific position by ID.
   - `/close-all`: Force close all running positions.
3. Autocomplete for commands needing IDs (e.g., `/position` and `/close`), suggesting open position IDs.
4. All responses ephemeral by default (for private UX), with emojis and clear formatting.
5. DRY, typed, and non-intrusive to the main trading flow (sub-50ms overhead preserved for critical paths).

Traceability: Each bullet maps to the user requirements list (status/logs/portfolio/positions/position/close/close-all, with autocomplete and emojis).

### 🛣️ Brainstorm Implementation Approaches

- Approach 1: Gateway bot using `discord.js` v14
  - Pros: No public HTTP ingress needed; interactions and autocompletes handled via Gateway. Rich typing and utilities.
  - Cons: Adds a runtime dependency and a background connection.
- Approach 2: HTTP-only Interactions (Outgoing Webhook)
  - Pros: No Gateway connection.
  - Cons: Requires public HTTPS endpoint and signature verification; more infra.
- Approach 3: Hybrid (Gateway for commands, Webhook for followups)
  - Pros: Flexibility.
  - Cons: Unnecessary complexity for this private, single-user bot.

Chosen Approach: 1 (Gateway + discord.js)
- Reasons: No server needed; straightforward slash command + autocomplete handling; quick iteration in a private project.

Rollback Strategy
- The bot starts only if `DISCORD_BOT_TOKEN` is present. No token → no bot runtime. Command registration is an explicit script; revert by deleting commands and removing token.

### 🗺️ Very Detailed Plan

1) Dependencies and Env
- Add deps: `discord.js`, `@discordjs/rest`, `discord-api-types`.
- Add env vars to `.env.*`:
  - `DISCORD_BOT_TOKEN`: Bot token
  - `DISCORD_APP_ID`: Application (client) ID
  - `DISCORD_GUILD_ID`: Guild ID (dev scope)

2) Command Definitions (single source of truth)
- Create `src/rpc/discord/commands.ts` exporting a typed array of command definitions and helpers for registration + runtime handling.
- Commands list:
  - `status` (no options)
  - `logs` options: integer `n` (1–500, default 100)
  - `portfolio` (no options)
  - `positions` (no options)
  - `position` options: integer `id` (required, with autocomplete)
  - `close` options: integer `id` (required, with autocomplete, guarded)
  - `close-all` (no options, guarded)

3) Registration Script
- Add `scripts/register-discord-commands.ts` using `@discordjs/rest` to upsert commands to the configured guild.
- CLI script in `package.json`: `pnpm discord:register:guild` (and optional `discord:register:global`).
- Reference: Application Commands API [Discord Application Commands](https://discord.com/developers/docs/interactions/application-commands).

4) Bot Runtime
- Implement `startDiscordBot(params)` in `src/rpc/discord-bot.ts`:
  - Construct a `Client` with `GatewayIntentBits.Guilds` only.
  - On `ready`, log success.
  - Handle `interactionCreate`:
    - If `isChatInputCommand()` → route by command name.
    - If `isAutocomplete()` → return suggestions for `position`/`close`.
  - Ephemeral initial responses (defer reply within 3s if needed). Reference: 3s initial response rule and ephemeral flags [Receiving and Responding](https://discord.com/developers/docs/interactions/receiving-and-responding).

5) Data Access & DRY helpers
- Reuse existing helpers from `src/utils/external-helpers.ts`:
  - `getPortfolioSummary(mode)` to compute Unrealized/Realized PnL and last-closed items.
  - `buildClosedPositionsSummaryMessage()` for `/portfolio` rendering.
- Logs: use `getLogTailSnapshot()` from `src/utils/logger.ts`; trim to last `n` lines (server-side split) and wrap in a code block.
- Status: compute RTDS status by checking `lastRtdsMessageTimeMs` staleness (e.g., idle > 60s = disconnected). Use DB counts for open positions and reuse `getPortfolioSummary` for PnL.
- Positions: query open positions, compute UPNL from `unrealizedPnlUsd`, and render a compact table (code block). Keep small width; show up to 100 rows; paginate later if needed.
- Position detail: join via `loadMetaForPosition(id)`; include tokenId, entry price avg, current price, unrealized PnL, leader and event link; add emojis.

6) Guarded Mutations
- Thread-safety: use the existing `IExecutionProvider` instance from `main-loop` by injecting it into `startDiscordBot`. Close operations call `executionProvider.closePosition({ positionId, reason: 'MANUAL', source: 'manual', ingestSource: 'manual' })`.
- Non-blocking: acknowledge with an ephemeral reply, then perform close; send follow-up ephemeral result (success/fail). Interaction token validity is 15 minutes—sufficient for follow-ups [Receiving and Responding](https://discord.com/developers/docs/interactions/receiving-and-responding).

7) Wire-up in Main Loop
- In `src/core/app/main-loop.ts`, after provider is ready and notifier/listeners registered, call `startDiscordBot({ executionProvider: provider, env, notifier })`. Ensure failures don’t crash the bot.

8) Metrics & Logging
- Log each command execution with timing and principal (Discord user). Keep logs concise.
- Emit counters via `incrementCounter('discord.command', { name: cmd })`.

9) Emojis & UX
- Use emojis for headings/status: ✅/🟥 for ok/fail, 📊 for stats, 🧮 for PnL, 📜 for logs, 🔧 for actions.
- Ephemeral replies by default to avoid channel noise. Offer a `public` boolean option later if needed.

10) Rate limits + Perf
- Autocomplete queries: limit to 20 suggestions and short labels (`"#123 · UPNL +1.23 USDC"`). Discord overall command content must stay under 8000 chars [Slash command limits](https://discord.com/developers/docs/interactions/application-commands#slash-commands).
- Defer initial replies when DB queries might exceed ~500ms; edit the reply when ready.

### 💻 Specs

Models / Schemas (no DB migrations needed)
- We reuse existing tables. Optionally, add a covering index later if `/positions` proves slow.

Classes
- `DiscordCommandRegistrar`
  - Purpose: Register commands to guild or global.
  - Methods:
    - `registerGuildCommands(appId: string, guildId: string, token: string, defs: RESTPostAPIApplicationCommandsJSONBody[]): Promise<void>`
    - `registerGlobalCommands(appId: string, token: string, defs: RESTPostAPIApplicationCommandsJSONBody[]): Promise<void>`

Functions (typed)
```ts
// src/rpc/discord/commands.ts
export type CommandName = 'status' | 'logs' | 'portfolio' | 'positions' | 'position' | 'close' | 'close-all';

export interface CommandContext {
    mode: import('@/core/domain/execution').ExecutionMode;
    executionProvider: import('@/core/domain/execution').IExecutionProvider;
}

export interface AutocompleteItem { name: string; value: number; }

export function buildSlashCommandDefs(): import('discord-api-types/v10').RESTPostAPIApplicationCommandsJSONBody[];
export function handleCommand(name: CommandName, options: Record<string, unknown>, ctx: CommandContext): Promise<{ content: string; ephemeral?: boolean }>;
export function handleAutocomplete(name: CommandName, focused: string, ctx: CommandContext): Promise<AutocompleteItem[]>;
```

Library Calls (Discord)
```ts
// Client runtime
import { Client, GatewayIntentBits, Partials, Interaction, AutocompleteInteraction, ChatInputCommandInteraction } from 'discord.js';

const client = new Client({ intents: [GatewayIntentBits.Guilds] });
client.on('ready', () => logger.success({ tag: 'discord-bot' }, 'Discord bot ready'));
client.on('interactionCreate', async (interaction: Interaction) => { /* route */ });
await client.login(process.env.DISCORD_BOT_TOKEN!);
```

```ts
// Registration via REST
import { REST, Routes } from 'discord.js';
const rest = new REST({ version: '10' }).setToken(token);
await rest.put(Routes.applicationGuildCommands(appId, guildId), { body: defs });
// For global:
await rest.put(Routes.applicationCommands(appId), { body: defs });
```

API Contracts (Discord)
- Slash commands and interactions per official docs: [Application Commands](https://discord.com/developers/docs/interactions/application-commands), [Receiving & Responding](https://discord.com/developers/docs/interactions/receiving-and-responding), [Autocomplete](https://discord.com/developers/docs/interactions/application-commands#autocomplete).
- Timeouts: initial response within 3s; tokens valid 15m for follow-ups.

Config & Feature Flags
- `DISCORD_BOT_TOKEN` (string, required to start bot). Example: `"Bot x.y.z"` token.
- `DISCORD_APP_ID` (string, required for registration).
- `DISCORD_GUILD_ID` (string, recommended for fast dev updates).

Observability
- Counters: `discord.command` { name }, `discord.autocomplete` { name }, `discord.error` { name }.
- Logs include latency and rows returned for DB-heavy calls.

Security
- Validate `n` for `/logs` (1–500). Validate `id` is numeric and belongs to current `mode` when acting.

Perf
- Autocomplete limited to 20 results; DB queries indexed fields.
- Use deferred replies for long ops.

### 📂 Files Involved

🟦 TO READ AND UNDERSTAND FIRST
- `/home/probi/swe/repo/polymarket-copy-bot/src/core/app/main-loop.ts` — wiring point to start the bot.
- `/home/probi/swe/repo/polymarket-copy-bot/src/utils/logger.ts` — getLogTailSnapshot.
- `/home/probi/swe/repo/polymarket-copy-bot/src/utils/external-helpers.ts` — portfolio summary helpers.
- `/home/probi/swe/repo/polymarket-copy-bot/src/core/data-ingestion/polymarket-rtds.ts` — `lastRtdsMessageTimeMs` for RTDS status.
- `/home/probi/swe/repo/polymarket-copy-bot/src/core/store/schema.ts` — position and related tables.

🟨 MODIFY
- `/home/probi/swe/repo/polymarket-copy-bot/package.json` — add deps and scripts (register commands).
- `/home/probi/swe/repo/polymarket-copy-bot/src/core/app/main-loop.ts` — call `startDiscordBot(...)` after provider ready.
- `/home/probi/swe/repo/polymarket-copy-bot/.env.*` — add new envs.

🟩 CREATE
- `/home/probi/swe/repo/polymarket-copy-bot/src/rpc/discord/commands.ts` — command defs/handlers.
- `/home/probi/swe/repo/polymarket-copy-bot/src/rpc/discord-bot.ts` — gateway client and router.
- `/home/probi/swe/repo/polymarket-copy-bot/scripts/register-discord-commands.ts` — one-off command registrar.

🟥 DELETE
- None.

### 🧭 Optional Visuals

```mermaid
sequenceDiagram
  participant User
  participant Discord
  participant Bot
  participant DB
  User->>Discord: /position id:123
  Discord->>Bot: InteractionCreate (3s window)
  Bot->>Discord: deferReply(ephemeral)
  Bot->>DB: select position + meta + current price
  DB-->>Bot: rows
  Bot->>Discord: editReply(details)
```

### 🌐 Helpful Tool Results (as tool’s session_id)
- Discord docs fetch: `smart_fetch_url_multiple/we_need_authoritative_details_for_discord_slash_commands_responses_and_autocomplete_to_write_an_accurate_plan_with_citations/z8ykatabeo`

### 📚 References
- Discord Application Commands (Slash Commands): https://discord.com/developers/docs/interactions/application-commands
- Receiving and Responding to Interactions (timeouts, ephemeral, followups): https://discord.com/developers/docs/interactions/receiving-and-responding
- Autocomplete: https://discord.com/developers/docs/interactions/application-commands#autocomplete

Why these: Official Discord developer docs ensure correct, current contracts and limits.

### ▶️ Plan Summary

1. Add `discord.js` + REST deps and env vars; register commands to guild.
2. Implement typed command defs, autocomplete, and handlers (DRY helpers reused).
3. Wire `startDiscordBot` into `main-loop` with injected `executionProvider` and `mode` context.
4. Implement guarded `/close` and `/close-all`; make replies ephemeral with emojis and tables.
5. Log/metrics for observability; keep all operations non-blocking and within 3s initial response.

### 🔴 IMPORTANT REMINDERS
- Initial reply within 3 seconds; use deferral if needed.
- Keep autocomplete to ≤20 items and concise labels.
- Protect close commands via user allowlist; default deny if not configured.
- Don’t block execution critical paths; bot runs independently and uses short DB queries.

]]>
</file>
<file path=".dev/md/plans/2025/10/07/do not change.md">
<![CDATA[
<|PLAN_FORMAT_START|>
# Plan: Discord Bot with Slash Commands, Autocomplete, and Portfolio Controls

## 👤 User's Original Message
Original User Message:
```txt
/PLAN_X 

- [ ]  Add Discord Bot (Important: Include emojis for UI and UX | Ensure you use the Discord Slash Commands API that has autocompletes for UX - not manual slash commands | Ensure DRY in code)
    - [ ]  /status - Returns bot states such as essential statuses like RTDS status (is connected/disconnected), WS statuses, Num Current Open Positions, Current Unrealized PnL, Lifetime Realized PnL
    - [ ]  /logs [n] - Returns last n lines of human logs
    - [ ]  /portfolio - Same as portfolio summary
    - [ ]  /positions - Returns all current running positions, table formatted
        - [ ]  Cols: ID, UPNL
    - [ ]  /position [id] - Returns position details. Format is same as Position Opened from Discord Webhook, but include token id/asset id below Market Link, and include Entry Price (Avg) below Entry Price, and include Current Price below Entry Price (Avg), and include Unrealized PNL below Current Price
    - [ ]  /close [id] - Force close pos by id
    - [ ]  /close-all - Force close all running pos
```

## Proposed Plan

### ❌ Critical Information Needed
None blocking. We can safely proceed with guild-scoped commands first to avoid global propagation delays.

### ⚠️ Initial Best Assumptions to Address Ambiguities
1. MODERATE: Discord bot token and application (client) ID will be provided via env. -> We'll add validated env vars and guard startup.
2. MODERATE: Commands will be registered per-guild in `local/test` envs and optionally globally for production. -> Provide scripts for both.
3. MODERATE: Max log lines `n` default to 50 if omitted; cap to 500 for safety. -> Prevent spam and meet UX.

### ☁️ Current State
1. TypeScript Node service with strict typing; pnpm; dotenvx; Drizzle PostgreSQL; main entry `src/index.ts` -> `run()` in `src/core/app/main-loop.ts`.
2. Discord Webhook notifications already exist in `src/notify/discord-webhook.ts` and listeners in `src/notify/listeners.ts`.
3. Utilities available:
   - `getLogTailSnapshot()` in `src/utils/logger.ts` for logs
   - Portfolio helpers in `src/utils/external-helpers.ts`: `getPortfolioSummary`, `buildClosedPositionsSummaryMessage`, `loadMetaForPosition`
4. Placeholder file `src/rpc/discord-bot.ts` (empty) ready for bot implementation.

### 🌟 Desired Goal State
1. Slash-command Discord bot running inside the same process as the main app (optional toggle), exposing:
   - `/status`, `/logs`, `/portfolio`, `/positions`, `/position`, `/close`, `/close-all`
2. Autocomplete UX for `/position` (id argument) and for `/logs n` numeric helper.
3. Responses use embeds, emojis, ephemeral responses where appropriate, and follow DRY helpers.
4. Commands registered per-guild in dev; script available for global production registration.

### 🛣️ Brainstorm Implementation Approaches
* Approach 1: Use discord.js v14 Client + REST registerer in-process.
  - Pros: Mature, typed, great docs; easy Autocomplete; resilient.
  - Cons: Adds dependency; needs gateway connection.
* Approach 2: Raw Discord REST/websocket implementation.
  - Pros: Minimal deps.
  - Cons: Reinventing client; higher maintenance.
* Approach 3: Separate microservice.
  - Pros: Isolation.
  - Cons: Extra infra, complexity.

Chosen Approach: 1 — discord.js v14 in-process for fastest delivery, rich features, and typings.

Rollback: Feature flag to disable the Discord bot without code removal; no DB migrations.

### 🗺️ Very Detailed Plan
1. Dependencies and env
   - Add `discord.js` and `@discordjs/rest`, `discord-api-types` to deps.
   - Env vars (validated in `src/core/config/env.ts`):
     - `DISCORD_BOT_TOKEN` (string, required when ENABLE_DISCORD_BOT=true)
     - `DISCORD_APP_ID` (string)
     - `DISCORD_GUILD_IDS` (comma-separated list for dev registration)
     - `ENABLE_DISCORD_BOT` (boolean; default false)
   - Rationale: Required to login a gateway client and register commands.

2. Command registration script (non-interactive CLI)
   - Create `scripts/discord-register-commands.ts`:
     - Reads commands built in `src/rpc/discord-bot.ts` (export JSON defs)
     - Uses REST `PUT` routes for guild(s) during local; global for production
     - Per docs: Register via HTTP; upsert behavior [Application Commands](https://discord.com/developers/docs/interactions/application-commands#registering-a-command). Limit: 25 options per command.

3. Bot runtime integration
   - Implement `src/rpc/discord-bot.ts`:
     - Export `startDiscordBot(env, deps): { stop(): Promise<void> }`
     - Inside: create `Client` with intents `Guilds` only; hook `interactionCreate`.
       - Autocomplete: detect `interaction.isAutocomplete()` and return suggestions.
       - Commands: detect `interaction.isChatInputCommand()` and route.
       - Use `interaction.reply({ embeds, flags: MessageFlags.Ephemeral })` for ephemeral where useful. `ephemeral` is deprecated; use `flags` [InteractionReplyOptions](https://discord.js.org/docs/packages/discord.js/stable/InteractionReplyOptions:Interface).

4. DRY helper layer for embeds and formatting
   - Create `src/rpc/discord/ui.ts`:
     - `embed(title, fields, color)` returning APIEmbed
     - Emoji constants; table builder for monospaced columns
     - `formatPositionDetails()` reusing `loadMetaForPosition` and helpers from `utils/external-helpers`

5. Implement commands
   - `/status`
     - Show: RTDS status (connected/disconnected) via `lastRtdsMessageTimeMs` age from `src/core/data-ingestion/polymarket-rtds.ts`, open positions count (DB), unrealized/realized via `getPortfolioSummary`.
   - `/logs n?`
     - Optional integer with autocomplete (suggest 25, 50, 100, 200, 500). Use `getLogTailSnapshot(maxChars)` and slice to n lines; return as code block. Cap n to 500.
   - `/portfolio`
     - Use `getPortfolioSummary` + `buildClosedPositionsSummaryMessage`, post embed.
   - `/positions`
     - Query open positions for current mode; render table with columns: ID, UPNL (current unrealized per position), include emojis.
   - `/position id`
     - Autocomplete id from recent open/closed positions; show embed: Market Link, Token/Asset ID, Entry Price, Entry Price (Avg), Current Price, Unrealized PnL.
   - `/close id`
     - Calls provider.closePosition with reason `MANUAL`, source `manual`.
   - `/close-all`
     - Iterate open positions; call closePosition with reason `MANUAL`.
   - All DB access via existing schema; mode aware (dry_run/live).

6. Autocomplete behavior
   - Use Discord Autocomplete per spec (focused option true; choices cannot co-exist) [Autocomplete](https://discord.com/developers/docs/interactions/application-commands#autocomplete).
   - `/position id` -> suggest top 25 open position IDs by recency; `/logs n` -> suggest list [25,50,100,200,500].

7. Safety, limits, and UX
   - Ephemeral responses for `/logs` and `/close*`; non-ephemeral for portfolio summaries.
   - Guard long outputs with truncation; log dev-only warnings when truncating.
   - Emojis: ✅/🟥/✳️/📈/📉/🧮/🧰 for sections.

8. Wire into main-loop
   - In `src/core/app/main-loop.ts`, after bot started event, conditionally start Discord bot if `ENABLE_DISCORD_BOT` true. Reuse notifier fields in logs, but keep separate.

9. Scripts
   - Add pnpm scripts:
     - `discord:register:guild` (per env GUILD_IDS)
     - `discord:register:global`
     - `discord:dev` (run bot with app)

10. Rollback
   - Set `ENABLE_DISCORD_BOT=false` to disable. Commands can remain registered; no runtime impact.

Traceability bullets:
- Slash commands + autocomplete → steps 2–6
- Status/logs/portfolio/positions/position/close/close-all → step 5
- Emojis, embeds, UX → steps 4–5,7
- DRY → step 4

### 💻 Specs

Models / Schemas: no DB schema changes.

Classes
```ts
// src/rpc/discord-bot.ts
export interface DiscordBotDeps {
    getMode(): 'dry_run' | 'live';
    closePosition(args: { positionId: number }): Promise<void>;
}
export function startDiscordBot(env: Env, deps: DiscordBotDeps): Promise<{ stop(): Promise<void> }>; // starts client, registers handlers
```

Functions
```ts
// src/rpc/discord/ui.ts
export function buildEmbed(params: { title: string; description?: string; fields?: { name: string; value: string; inline?: boolean }[]; color?: number }): APIEmbed;
export function table(columns: string[], rows: string[][]): string; // returns monospaced table inside ```
export function positionDetailEmbed(positionId: number): Promise<APIEmbed>; // uses loadMetaForPosition, DB reads
```

Libraries Involved
- discord.js v14 — Client, events, embed building, interaction replies [(Client)](https://discord.js.org/docs/packages/discord.js/stable/Client:Class)
- Discord Dev Portal — command registration/Autocomplete [(Application Commands)](https://discord.com/developers/docs/interactions/application-commands), [(Autocomplete)](https://discord.com/developers/docs/interactions/application-commands#autocomplete)

API Call Snippets
```ts
// Register per-guild
await rest.put(
  Routes.applicationGuildCommands(appId, guildId),
  { body: commands }
);

// Global
await rest.put(
  Routes.applicationCommands(appId),
  { body: commands }
);
```

Reply Options
```ts
// Ephemeral reply in v14: prefer flags
await interaction.reply({
  content: 'Done',
  flags: MessageFlags.Ephemeral,
});
```

Config & Feature Flags
```ts
// src/core/config/env.ts additions
DISCORD_BOT_TOKEN: z.string().optional(),
DISCORD_APP_ID: z.string().optional(),
DISCORD_GUILD_IDS: z.string().optional(), // comma list
ENABLE_DISCORD_BOT: z.string().optional().transform(v => v ? v.toLowerCase() === 'true' : false),
```

Observability
- Counters: `discord.commands.invoked`, `discord.commands.error`
- Logs around registration and interaction handling.

### 📂 Files Involved

🟦 TO READ FIRST
- `/home/probi/swe/repo/polymarket-copy-bot/src/utils/logger.ts` — logs snapshot helper
- `/home/probi/swe/repo/polymarket-copy-bot/src/utils/external-helpers.ts` — portfolio and meta helpers
- `/home/probi/swe/repo/polymarket-copy-bot/src/core/app/main-loop.ts` — startup wiring

🟨 MODIFY
- `/home/probi/swe/repo/polymarket-copy-bot/src/core/config/env.ts` — add envs
- `/home/probi/swe/repo/polymarket-copy-bot/src/core/app/main-loop.ts` — start bot when enabled
- `/home/probi/swe/repo/polymarket-copy-bot/package.json` — add scripts and deps

🟩 CREATE
- `/home/probi/swe/repo/polymarket-copy-bot/src/rpc/discord-bot.ts` — bot runtime
- `/home/probi/swe/repo/polymarket-copy-bot/src/rpc/discord/ui.ts` — embeds/tables DRY
- `/home/probi/swe/repo/polymarket-copy-bot/scripts/discord-register-commands.ts` — registration CLI

🟥 DELETE
- None

### 🧭 Optional Visuals

```mermaid
sequenceDiagram
    participant User
    participant Discord
    participant Bot
    participant DB
    User->>Discord: /position 123
    Discord->>Bot: interactionCreate (ChatInput)
    Bot->>DB: loadMetaForPosition(123)
    DB-->>Bot: meta, prices, pnl
    Bot-->>Discord: reply embed (non-ephemeral)
```

### 🌐 Helpful Tool Results (as tool’s session_id)
- Docs: smart_fetch_url_multiple/fetch_official_docs_pages_to_cite_and_ensure_correct_apis_for_discord_slash_commands_deployment_and_autocomplete/mp69lsskz8
- Docs: smart_fetch_url_multiple/collect_official_docs_citations_for_implementing_discord_slash_commands_autocomplete_and_reply_flags_in_discord_js_v14_and_discord_dev_portal/j5yw1fqqgx
- Repo scan: codebase_search/find_existing_placeholders_or_integration_points_for_discord_bot/gvmpzsdxt4
- Repo scan: codebase_search/locate_functions_for_logs_and_portfolio_summary/94tytxcxjo

### 📚 References
- Discord Application Commands (Slash, Autocomplete, Limits): https://discord.com/developers/docs/interactions/application-commands
- discord.js InteractionReplyOptions (ephemeral flags): https://discord.js.org/docs/packages/discord.js/stable/InteractionReplyOptions:Interface
- discord.js Client interactionCreate event: https://discord.js.org/docs/packages/discord.js/stable/Client:Class

### ▶️ Plan Summary
1. Add envs + dependencies; create registration script.
2. Implement `startDiscordBot` with handlers for ChatInput and Autocomplete.
3. Build DRY UI helpers and all requested commands.
4. Wire the bot under a feature flag; add pnpm scripts for registration.
5. Deploy guild-scoped in dev; optional global in prod.

### 🔴 IMPORTANT REMINDERS
- Don’t mix `choices` with `autocomplete` on the same option (Discord spec).
- Use `flags: MessageFlags.Ephemeral` in replies, not deprecated `ephemeral`.
- Cap outputs and use ephemeral for sensitive responses.
<|PLAN_FORMAT_END|>

]]>
</file>
<file path="scripts/register-discord-commands.ts">
<![CDATA[
import { loadDiscordEnv } from '@/core/config/env-discord';
import { buildSlashCommandDefs } from '@/rpc/discord/discord-commands';
import { createLogger } from '@/utils/telemetry/logger';

const logger = createLogger({ tag: 'discord.register' });

async function sleep(ms: number): Promise<void> {
    await new Promise((resolve) => setTimeout(resolve, ms));
}

async function putRawJson(url: string, token: string, payloadJson: string, label: string): Promise<void> {
    let attempts = 0;
    while (true) {
        const res = await fetch(url, {
            method: 'PUT',
            headers: {
                'Content-Type': 'application/json',
                Authorization: `Bot ${token}`,
            },
            body: payloadJson,
        });
        if (res.status === 429) {
            const h1 = res.headers.get('retry-after');
            const h2 = res.headers.get('x-ratelimit-reset-after');
            const retryMs = Math.max(0, Math.ceil(parseFloat(h1 ?? h2 ?? '1') * 1000));
            attempts += 1;
            logger.warn({ label, attempts, retryMs }, 'rate_limited_retry');
            if (attempts > 5) {
                throw new Error(`Discord rate limit: exceeded retries for ${label}`);
            }
            await sleep(retryMs);
            continue;
        }
        if (!res.ok) {
            const body = await res.text();
            throw new Error(`Discord API error (${label}): ${res.status} ${body}`);
        }
        return;
    }
}

async function main(): Promise<void> {
    const env = loadDiscordEnv();
    const scopeArg = process.argv.find((a) => a.startsWith('--scope=')) ?? '--scope=guild';
    const scope = scopeArg.split('=')[1] ?? 'guild';

    const token = env.DISCORD_BOT_TOKEN;
    const appId = env.DISCORD_APP_ID;
    const guildId = env.DISCORD_GUILD_ID;
    const channelId = env.DISCORD_CHANNEL_ID;

    if (!token) throw new Error('DISCORD_BOT_TOKEN is required');
    if (!appId) throw new Error('DISCORD_APP_ID is required');

    // Preflight: verify token belongs to the specified application
    const meRes = await fetch('https://discord.com/api/v10/users/@me', {
        method: 'GET',
        headers: { Authorization: `Bot ${token}` },
    });
    if (!meRes.ok) {
        const body = await meRes.text();
        throw new Error(`Discord token validation failed: ${meRes.status} ${body}`);
    }
    const me = (await meRes.json()) as { id?: string } | unknown;
    const userId = (me as any)?.id ? String((me as any).id) : undefined;
    if (!userId) {
        throw new Error('Discord token validation succeeded but no user id returned');
    }
    if (String(userId) !== String(appId)) {
        throw new Error(
            `Bot token user id does not match DISCORD_APP_ID. token.userId=${userId} env.DISCORD_APP_ID=${String(appId)}`
        );
    }

    const defs = buildSlashCommandDefs();

    let url: string;
    if (scope === 'global') {
        url = `https://discord.com/api/v10/applications/${appId}/commands`;
    } else {
        if (!guildId) throw new Error('DISCORD_GUILD_ID is required for guild scope');
        url = `https://discord.com/api/v10/applications/${appId}/guilds/${guildId}/commands`;
    }

    // Force wipe using bulk overwrite (minimizes requests and avoids 429s)
    try {
        const globalUrl = `https://discord.com/api/v10/applications/${appId}/commands`;
        const guildUrl = guildId
            ? `https://discord.com/api/v10/applications/${appId}/guilds/${guildId}/commands`
            : undefined;
        logger.info('Wiping all global commands via bulk overwrite');
        await putRawJson(globalUrl, token, '[]', 'wipe_global');
        if (guildUrl) {
            logger.info({ guildId }, 'Wiping all guild commands via bulk overwrite');
            await putRawJson(guildUrl, token, '[]', 'wipe_guild');
        }
        logger.success('Command wipe completed');
    } catch (wipeErr) {
        logger.warn({ err: wipeErr }, 'wipe_commands_warning');
    }

    logger.info({ scope, url, count: defs.length }, 'Upserting Discord application commands');
    await putRawJson(url, token, JSON.stringify(defs), 'upsert_commands');
    logger.success('Commands registered');
}

main().catch((err) => {
    logger.error({ err }, 'register_commands_failed');
    process.exit(1);
});

]]>
</file>
<file path="src/notify/discord-webhook.ts">
<![CDATA[
import { z } from 'zod';
import { createLogger } from '@/utils/telemetry/logger';

const logger = createLogger({ tag: 'discord-webhook' });

const FieldSchema = z.object({
    name: z.string(),
    value: z.string(),
    inline: z.boolean().optional(),
});
const MessageSchema = z.object({
    title: z.string(),
    description: z.string().optional(),
    fields: z.array(FieldSchema).optional(),
    color: z.number().int().optional(),
});

export class DiscordWebhookNotifier {
    private readonly webhookUrl: string | undefined;
    private static readonly TIMEOUT_MS = 1500;
    constructor(webhookUrl: string | undefined) {
        this.webhookUrl = webhookUrl;
    }

    async sendMessage(payload: {
        title: string;
        description?: string;
        fields?: { name: string; value: string; inline?: boolean }[];
        color?: number;
    }): Promise<void> {
        // Fire-and-forget: schedule and resolve immediately to avoid blocking callers
        setTimeout(() => {
            void (async () => {
                try {
                    const parsed = MessageSchema.safeParse(payload);
                    if (!parsed.success) {
                        logger.warn(
                            { err: parsed.error.message, title: payload.title },
                            'Discord payload validation failed'
                        );
                        return;
                    }
                    if (!this.webhookUrl) {
                        logger.debug(
                            { title: payload.title },
                            'Discord webhook not configured; skipping send'
                        );
                        return; // silently noop if not configured
                    }
                    const body = {
                        embeds: [
                            {
                                title: payload.title,
                                description: payload.description,
                                fields: payload.fields,
                                color: payload.color,
                            },
                        ],
                    };
                    const controller = new AbortController();
                    const timer = setTimeout(
                        () => controller.abort(),
                        DiscordWebhookNotifier.TIMEOUT_MS
                    );
                    try {
                        logger.debug({ title: payload.title }, 'Sending Discord webhook');
                        const res = await fetch(this.webhookUrl, {
                            method: 'POST',
                            headers: { 'Content-Type': 'application/json' },
                            body: JSON.stringify(body),
                            signal: controller.signal,
                        });
                        if (!res.ok) {
                            logger.warn(
                                { status: res.status, title: payload.title },
                                'Discord webhook returned non-OK'
                            );
                        } else {
                            logger.success({ title: payload.title }, 'Discord webhook sent');
                        }
                    } catch (err) {
                        logger.warn({ err, title: payload.title }, 'Discord webhook send failed');
                    } finally {
                        clearTimeout(timer);
                    }
                } catch (err) {
                    logger.warn({ err, title: payload.title }, 'Discord sendMessage error');
                }
            })();
        }, 0);
        return;
    }
}

]]>
</file>
<file path="src/utils/safe-enc-dec.ts">
<![CDATA[
import { randomBytes, scryptSync, createCipheriv, createDecipheriv } from "node:crypto";

const ALGORITHM = "aes-256-gcm" as const;
const SALT_LENGTH = 16;
const IV_LENGTH = 12;
const KEY_LENGTH = 32;
const TAG_LENGTH = 16;
const VERSION_PREFIX = "v1.";
const APP_ENC_PP = "polymarket-copy-bot-4fea1f8f10940f33bcfea88a65d383d61fddd79d"  // DO NOT CHANGE THIS!

type EncParams = { text: string; pp: string };
type DecParams = { enc: string; pp: string };

export function enc({ text, pp }: EncParams): string {
    if (typeof text !== "string") {
        throw new TypeError("text must be a string");
    }
    if (typeof pp !== "string" || pp.length === 0) {
        throw new TypeError("pp must be a non-empty string");
    }

    const salt = randomBytes(SALT_LENGTH);
    const key = scryptSync(Buffer.from(pp, "utf8"), salt, KEY_LENGTH);
    const iv = randomBytes(IV_LENGTH);

    const cipher = createCipheriv(ALGORITHM, key, iv);
    const ciphertext = Buffer.concat([cipher.update(Buffer.from(text, "utf8")), cipher.final()]);
    const authTag = cipher.getAuthTag();

    // payload layout: [salt | iv | tag | ciphertext]
    const payload = Buffer.concat([salt, iv, authTag, ciphertext]);
    return VERSION_PREFIX + payload.toString("base64");
}

export function dec({ enc: enced, pp }: DecParams): string {
    if (typeof enced !== "string" || !enced.startsWith(VERSION_PREFIX)) {
        throw new TypeError("invalid enced payload format");
    }
    if (typeof pp !== "string" || pp.length === 0) {
        throw new TypeError("pp must be a non-empty string");
    }

    const payloadB64 = enced.slice(VERSION_PREFIX.length);
    const payload = Buffer.from(payloadB64, "base64");

    if (payload.length < SALT_LENGTH + IV_LENGTH + TAG_LENGTH) {
        throw new Error("enced payload too short");
    }

    const salt = payload.subarray(0, SALT_LENGTH);
    const iv = payload.subarray(SALT_LENGTH, SALT_LENGTH + IV_LENGTH);
    const tagStart = SALT_LENGTH + IV_LENGTH;
    const authTag = payload.subarray(tagStart, tagStart + TAG_LENGTH);
    const ciphertext = payload.subarray(tagStart + TAG_LENGTH);

    const key = scryptSync(Buffer.from(pp, "utf8"), salt, KEY_LENGTH);
    const decipher = createDecipheriv(ALGORITHM, key, iv);
    decipher.setAuthTag(authTag);

    const plaintext = Buffer.concat([decipher.update(ciphertext), decipher.final()]);
    return plaintext.toString("utf8");
}

export function appEnc(text: string) {
    return enc({ text, pp: APP_ENC_PP });
}

export function appDec(enc: string) {
    return dec({ enc: enc, pp: APP_ENC_PP });
}
]]>
</file>
<file path="tests/integration/dry-run-inventory.test.ts">
<![CDATA[
import { describe, it, beforeEach, afterEach, beforeAll, expect } from 'vitest';

// IMPORTANT: Ensure DATABASE_URL points to a test database BEFORE importing db
// The project resolves aliases like @/ via tsconfig paths
import { db } from '@/core/store/db';
import { positionTable, copyOrderTable } from '@/core/store/schema';
import { DiscordWebhookNotifier } from '@/notify/discord-webhook';
import { Executor } from '@/core/exec/executor';
import { DryRunExecutionProvider } from '@/core/exec/providers/dry-run-execution-provider';
import type { LeaderConfig } from '@/core/config/config';
import type { TradeFeedMessage } from '@/core/domain/trade';
import { and, eq } from 'drizzle-orm';
import type { Address } from '@/core/domain/common';
import { resetDb } from '../test-helpers';

function createExecutorForTest(leaders: LeaderConfig[]): Executor {
    const provider = new DryRunExecutionProvider();
    const notifier = new DiscordWebhookNotifier(undefined);
    return new Executor({
        executionProvider: provider,
        discord: notifier,
        maxSlippageBps: 50,
        globalMaxPositions: 9999,
        leaders,
        orderType: 'FOK',
        globalMaxUsdcInvested: 1_000_000,
        orderThrottleMs: 0,
        buyPriceBlockLimit: 0.96,
    });
}

function trade(params: Partial<TradeFeedMessage>): TradeFeedMessage {
    return {
        asset: params.asset ?? 'token:TEST',
        bio: '',
        conditionId: params.conditionId ?? '0xcond',
        eventSlug: '',
        icon: '',
        name: '',
        outcome: params.outcome ?? 'Yes',
        outcomeIndex: 0,
        price: params.price ?? 0.5,
        profileImage: '',
        proxyWallet: params.proxyWallet ?? ('0x1111111111111111111111111111111111111111' as Address),
        pseudonym: '',
        side: params.side ?? 'BUY',
        size: params.size ?? 2,
        slug: '',
        timestamp: params.timestamp ?? Math.floor(Date.now() / 1000),
        title: '',
        transactionHash: params.transactionHash ?? `0x${Math.random().toString(16).slice(2).padEnd(64, '0')}`,
        ingestSource: params.ingestSource ?? 'sim',
        receivedAtMs: Date.now(),
    };
}

const TEST_LEADER = '0x1111111111111111111111111111111111111111' as Address;

const testLeaderCfg: LeaderConfig = {
    address: TEST_LEADER,
    displayName: 'Test Leader',
    maxPositions: 100,
    // Mirror trade.size 1:1 to amountUsdc for deterministic sizing in tests
    positionSizeUsdc: { kind: 'mirror_1to1' },
    positionExpiryMs: 60_000,
    categoriesAllowed: undefined,
    outcomesAllowed: undefined,
    copySidesAllowed: undefined,
};

beforeAll(() => {
    process.env.ERROR_LOG_ENABLED = 'false';
});

beforeEach(async () => {
    await resetDb();
});

afterEach(async () => {
    // Allow async eventBus/discord timers to settle before cleaning DB
    await new Promise((r) => setTimeout(r, 1));
    await resetDb();
});

describe('Dry run execution inventory netting & aggregation', () => {
    
    // Given: two BUY trades same token
    // When: they are processed
    // Then: only one open long exists with weighted-average entry
    it('aggregates multiple BUYs into a single open position with weighted average', async () => {
        // Given: empty DB, a leader, and two BUY trades on the same token
        const executor = createExecutorForTest([testLeaderCfg]);
        const tokenId = 'token:AGG';
        const t1 = trade({ proxyWallet: TEST_LEADER, asset: tokenId, side: 'BUY', size: 2, price: 0.20 });
        const t2 = trade({ proxyWallet: TEST_LEADER, asset: tokenId, side: 'BUY', size: 3, price: 0.40, timestamp: t1.timestamp + 1, transactionHash: '0x' + 'b'.repeat(64) });

        // When: handle both trades sequentially
        await executor.handleLeaderTrade(t1);
        await executor.handleLeaderTrade(t2);

        // Then: one open position exists; amountUsdc = 5; shares computed with BUY slippage (+0.5%)
        const rows = await db
            .select()
            .from(positionTable)
            .where(and(eq(positionTable.tokenId, tokenId), eq(positionTable.status, 'open')));
        expect(rows.length).toBe(1);
        const pos = rows[0]!;
        const sl = 0.005;
        const s1 = 2 / (0.20 * (1 + sl));
        const s2 = 3 / (0.40 * (1 + sl));
        const expectedShares = s1 + s2;
        const expectedAvg = 5 / expectedShares;
        expect(Number(pos.amountUsdc)).toBeCloseTo(5, 6);
        expect(Number(pos.sizeShares)).toBeCloseTo(expectedShares, 6);
        // Weighted-average price should be tracked in entryPriceAvg (entryPrice is the very first fill)
        expect(Number((pos as any).entryPriceAvg)).toBeCloseTo(expectedAvg, 6);
        // And entryPrice should remain the initial fill price (with BUY slippage applied)
        const firstEntry = 0.20 * (1 + sl); // 0.201
        expect(Number(pos.entryPrice)).toBeCloseTo(firstEntry, 6);
    });

    // Given: an open BUY exists
    // When: SELL for smaller notional arrives
    // Then: long is reduced (not closed), no new short is opened
    it('SELL reduces an existing BUY (partial reduce keeps open)', async () => {
        // Given: an open long created by a BUY
        const executor = createExecutorForTest([testLeaderCfg]);
        const tokenId = 'token:REDUCE';
        const buy = trade({ proxyWallet: TEST_LEADER, asset: tokenId, side: 'BUY', size: 10, price: 0.50, transactionHash: '0x' + 'c'.repeat(64) });
        await executor.handleLeaderTrade(buy);

        // When: a SELL arrives with amount less than inventory
        const sell = trade({ proxyWallet: TEST_LEADER, asset: tokenId, side: 'SELL', size: 5, price: 0.60, transactionHash: '0x' + 'd'.repeat(64), timestamp: buy.timestamp + 2 });
        await executor.handleLeaderTrade(sell);

        // Then: position remains open with reduced shares and updated amount (use slippage +/-0.5%)
        const rows = await db
            .select()
            .from(positionTable)
            .where(and(eq(positionTable.tokenId, tokenId), eq(positionTable.status, 'open')));
        expect(rows.length).toBe(1);
        const pos = rows[0]!;
        const sl = 0.005;
        const initialShares = 10 / (0.50 * (1 + sl));
        const reducedShares = 5 / (0.60 * (1 - sl));
        const expectedShares = initialShares - Math.min(initialShares, reducedShares);
        const avgEntry = 10 / initialShares;
        const expectedAmount = expectedShares * avgEntry;
        expect(Number(pos.sizeShares)).toBeCloseTo(expectedShares, 6);
        expect(Number(pos.amountUsdc)).toBeCloseTo(expectedAmount, 6);
        expect(String(pos.status)).toBe('open');

    });

    // Given: no inventory
    // When: SELL arrives
    // Then: request is skipped; no position or order is persisted
    it('SELL with no inventory creates no position', async () => {
        // Given: no positions for token
        const executor = createExecutorForTest([testLeaderCfg]);
        const tokenId = 'token:NOINV';

        // When: SELL arrives first
        const sell = trade({ proxyWallet: TEST_LEADER, asset: tokenId, side: 'SELL', size: 5, price: 0.30, transactionHash: '0x' + 'e'.repeat(64) });
        await executor.handleLeaderTrade(sell);

        // Then: there are no positions and no copy orders
        const posRows = await db
            .select()
            .from(positionTable)
            .where(eq(positionTable.tokenId, tokenId));
        expect(posRows.length).toBe(0);

        const coRows = await db
            .select()
            .from(copyOrderTable)
            .where(eq(copyOrderTable.desiredSide, 'SELL'));
        expect(coRows.length).toBe(0);

    });
});

]]>
</file>
</files>
<files>
<file path=".dev/docs/manual-poly-clob.ts">
<![CDATA[
`
POLYMARKET CLOB - CONCISE DOCS
==============================

TYPES
=====

import{SignatureType,SignedOrder}from"@polymarket/order-utils";import{AxiosRequestHeaders}from"axios";export interface ApiKeyCreds{key:string;secret:string;passphrase:string}export interface ApiKeyRaw{apiKey:string;secret:string;passphrase:string}export interface L2HeaderArgs{method:string;requestPath:string;body? :string}export interface L1PolyHeader extends AxiosRequestHeaders{POLY_ADDRESS:string;POLY_SIGNATURE:string;POLY_TIMESTAMP:string;POLY_NONCE:string}export interface L2PolyHeader extends AxiosRequestHeaders{POLY_ADDRESS:string;POLY_SIGNATURE:string;POLY_TIMESTAMP:string;POLY_API_KEY:string;POLY_PASSPHRASE:string}export declare enum Side{BUY="BUY",SELL="SELL"}export declare enum OrderType{GTC="GTC",FOK="FOK",GTD="GTD",FAK="FAK"}export interface PostOrdersArgs{order:SignedOrder;orderType:OrderType}export interface NewOrder<T extends OrderType>{readonlyorder:{readonlysalt:number;readonly maker:string;readonly signer:string;readonly taker:string;readonly tokenId:string;readonly makerAmount:string;readonly takerAmount:string;readonly expiration:string;readonly nonce:string;readonly feeRateBps:string;readonly side:Side;readonly signatureType:SignatureType;readonly signature:string};readonly owner:string;readonly orderType:T;readonly deferExec:boolean};export interface UserOrder{tokenID:string;price:number;size:number;side:Side;feeRateBps? :number;nonce? :number;expiration? :number;taker? :string}export interface UserMarketOrder{tokenID:string;price? :number;amount:number;side:Side;feeRateBps? :number;nonce? :number;taker? :string;orderType? :OrderType.FOK|OrderType.FAK}export interface OrderPayload{orderID:string}export interface ApiKeysResponse{apiKeys:ApiKeyCreds[]}export interface BanStatus{closed_only:boolean}export interface OrderResponse{success:boolean;errorMsg:string;orderID:string;transactionsHashes:string[];status:string;takingAmount:string;makingAmount:string}export interface OpenOrder{id:string;status:string;owner:string;maker_address:string;market:string;asset_id:string;side:string;original_size:string;size_matched:string;price:string;associate_trades:string[];outcome:string;created_at:number;expiration:string;order_type:string}export typeOpenOrdersResponse=OpenOrder[];export interface TradeParams{id? :string;maker_address? :string;market? :string;asset_id? :string;before? :string;after? :string}export interface OpenOrderParams{id? :string;market? :string;asset_id? :string}export interface MakerOrder{order_id:string;owner:string;maker_address:string;matched_amount:string;price:string;fee_rate_bps:string;asset_id:string;outcome:string;side:Side}export interface Trade{id:string;taker_order_id:string;market:string;asset_id:string;side:Side;size:string;fee_rate_bps:string;price:string;status:string;match_time:string;last_update:string;outcome:string;bucket_index:number;owner:string;maker_address:string;maker_orders:MakerOrder[];transaction_hash:string;trader_side:"TAKER"|"MAKER"}export declare enum Chain{POLYGON=137,AMOY=80002}export interface MarketPrice{t:number;p:number}export interface PriceHistoryFilterParams{market? :string;startTs? :number;endTs? :number;fidelity? :number;interval? :PriceHistoryInterval}export declare enum PriceHistoryInterval{MAX="max",ONE_WEEK="1w",ONE_DAY="1d",SIX_HOURS="6h",ONE_HOUR="1h"}export interface DropNotificationParams{ids:string[]}export interface Notification{type:number;owner:string;payload:any}export interface OrderMarketCancelParams{market? :string;asset_id? :string}export interface OrderBookSummary{market:string;asset_id:string;timestamp:string;bids:OrderSummary[];asks:OrderSummary[];min_order_size:string;tick_size:string;neg_risk:boolean;hash:string}export interface OrderSummary{price:string;size:string}export declare enum AssetType{COLLATERAL="COLLATERAL",CONDITIONAL="CONDITIONAL"}export interface BalanceAllowanceParams{asset_type:AssetType;token_id? :string}export interface BalanceAllowanceResponse{balance:string;allowance:string}export interface OrderScoringParams{order_id:string}export interface OrderScoring{scoring:boolean}export interface OrdersScoringParams{orderIds:string[]}export typeOrdersScoring={[orderId in string]:boolean};export typeCreateOrderOptions={tickSize:TickSize;negRisk? :boolean};export typeTickSize="0.1"|"0.01"|"0.001"|"0.0001";export interface RoundConfig{readonly price:number;readonly size:number;readonly amount:number}export interface TickSizes{[tokenId:string]:TickSize}export interface NegRisk{[tokenId:string]:boolean}export interface FeeRates{[tokenId:string]:number}export interface PaginationPayload{readonly limit:number;readonly count:number;readonly next_cursor:string;readonly data:any[]}export interface MarketTradeEvent{event_type:string;market:{condition_id:string;asset_id:string;question:string;icon:string;slug:string};user:{address:string;username:string;profile_picture:string;optimized_profile_picture:string;pseudonym:string};side:Side;size:string;fee_rate_bps:string;price:string;outcome:string;outcome_index:number;transaction_hash:string;timestamp:string}export interface BookParams{token_id:string;side:Side}export interface UserEarning{date:string;condition_id:string;asset_address:string;maker_address:string;earnings:number;asset_rate:number}export interface TotalUserEarning{date:string;asset_address:string;maker_address:string;earnings:number;asset_rate:number}export interface RewardsPercentages{[market:string]:number}export interface Token{token_id:string;outcome:string;price:number}export interface RewardsConfig{asset_address:string;start_date:string;end_date:string;rate_per_day:number;total_rewards:number}export interface MarketReward{condition_id:string;question:string;market_slug:string;event_slug:string;image:string;rewards_max_spread:number;rewards_min_size:number;tokens:Token[];rewards_config:RewardsConfig[]}export interface Earning{asset_address:string;earnings:number;asset_rate:number}export interface UserRewardsEarning{condition_id:string;question:string;market_slug:string;event_slug:string;image:string;rewards_max_spread:number;rewards_min_size:number;market_competitiveness:number;tokens:Token[];rewards_config:RewardsConfig[];maker_address:string;earning_percentage:number;earnings:Earning[]}

IMPORTANT: THIS IS NOT OUR CUSTOM DEFINED TYPE! To use Polymarket Clob Types, import from "@polymarket/clob-client":
import { OrderBookSummary } from "@polymarket/clob-client";

EXAMPLE 1
==========

await clobClient.getOrderBooks([{ token_id: "22131816317087462222441767751936061504662310118809793860064034214346537862051", side: Side.BUY }]);

[{"market":"0x6cb4d646f8a46b92d5201622c50ff6bf3a41556cf1059c20ba37c0cfbade1c13","asset_id":"22131816317087462222441767751936061504662310118809793860064034214346537862051","timestamp":"1759831913645","hash":"83c78a093583ce964bd8aebc2c01c76999e3bea4","bids":[{"price":"0.01","size":"1000"},{"price":"0.02","size":"460.05"},{"price":"0.03","size":"233.33"},{"price":"0.04","size":"10"},{"price":"0.06","size":"400"},{"price":"0.07","size":"384.14"},{"price":"0.08","size":"272.22"}],"asks":[{"price":"0.99","size":"1000"},{"price":"0.98","size":"6000"},{"price":"0.8","size":"300"},{"price":"0.79","size":"1332"},{"price":"0.78","size":"1272"},{"price":"0.7","size":"2000"},{"price":"0.69","size":"289"},{"price":"0.68","size":"6"},{"price":"0.36","size":"10.93"},{"price":"0.33","size":"20"},{"price":"0.32","size":"10"},{"price":"0.31","size":"25"},{"price":"0.26","size":"285.8"},{"price":"0.16","size":"9.07"},{"price":"0.14","size":"20"},{"price":"0.13","size":"210"},{"price":"0.11","size":"475.14"},{"price":"0.1","size":"409"}],"min_order_size":"5","tick_size":"0.01","neg_risk":true}]
`;

]]>
</file>
<file path=".dev/docs/manual-poly-data-api.md">
<![CDATA[

Developer Quickstart
API Rate Limits
​
How Rate Limiting Works
All rate limits are enforced using Cloudflare’s throttling system. When you exceed the maximum configured rate for any endpoint, requests are throttled rather than immediately rejected. This means:
Throttling: Requests over the limit are delayed/queued rather than dropped
Burst Allowances: Some endpoints allow short bursts above the sustained rate
Time Windows: Limits reset based on sliding time windows (e.g., per 10 seconds, per minute)
​
General Rate Limits
Endpoint	Limit	Notes
General Rate Limiting	5000 requests / 10s	Throttle requests over the maximum configured rate
”OK” Endpoint	50 requests / 10s	Throttle requests over the maximum configured rate
​
Data API Rate Limits
Endpoint	Limit	Notes
Data API (General)	100 requests / 10s	Throttle requests over the maximum configured rate
Data API (Alternative)	600 requests / 1 minute	1 hour block on violation
Data API /trades	30 requests / 10s	Throttle requests over the maximum configured rate
Data API “OK” Endpoint	10 requests / 10s	Throttle requests over the maximum configured rate
​
GAMMA API Rate Limits
Endpoint	Limit	Notes
GAMMA (General)	750 requests / 10s	Throttle requests over the maximum configured rate
GAMMA Get Comments	100 requests / 10s	Throttle requests over the maximum configured rate
GAMMA /events	100 requests / 10s	Throttle requests over the maximum configured rate
GAMMA /markets	100 requests / 10s	Throttle requests over the maximum configured rate
GAMMA /markets /events listing	100 requests / 10s	Throttle requests over the maximum configured rate
GAMMA Tags	100 requests / 10s	Throttle requests over the maximum configured rate
GAMMA Search	300 requests / 10s	Throttle requests over the maximum configured rate
​
CLOB API Rate Limits
​
General CLOB Endpoints
Endpoint	Limit	Notes
CLOB (General)	5000 requests / 10s	Throttle requests over the maximum configured rate
CLOB GET Balance Allowance	125 requests / 10s	Throttle requests over the maximum configured rate
CLOB UPDATE Balance Allowance	20 requests / 10s	Throttle requests over the maximum configured rate
​
CLOB Market Data
Endpoint	Limit	Notes
CLOB /book	200 requests / 10s	Throttle requests over the maximum configured rate
CLOB /books (website)	300 requests / 10s	Throttle requests over the maximum configured rate
CLOB /books	80 requests / 10s	Throttle requests over the maximum configured rate
CLOB /price	200 requests / 10s	Throttle requests over the maximum configured rate
CLOB /prices	80 requests / 10s	Throttle requests over the maximum configured rate
CLOB /midprice	200 requests / 10s	Throttle requests over the maximum configured rate
CLOB /midprices	80 requests / 10s	Throttle requests over the maximum configured rate
​
CLOB Ledger Endpoints
Endpoint	Limit	Notes
CLOB Ledger (/trades /orders /notifications /order)	300 requests / 10s	Throttle requests over the maximum configured rate
CLOB Ledger /data/orders	150 requests / 10s	Throttle requests over the maximum configured rate
CLOB Ledger /data/trades	150 requests / 10s	Throttle requests over the maximum configured rate
CLOB /notifications	125 requests / 10s	Throttle requests over the maximum configured rate
​
CLOB Markets & Pricing
Endpoint	Limit	Notes
CLOB Price History	100 requests / 10s	Throttle requests over the maximum configured rate
CLOB Markets	250 requests / 10s	Throttle requests over the maximum configured rate
CLOB Market Tick Size	50 requests / 10s	Throttle requests over the maximum configured rate
CLOB markets/0x	50 requests / 10s	Throttle requests over the maximum configured rate
CLOB /markets listing	100 requests / 10s	Throttle requests over the maximum configured rate
​
CLOB Authentication
Endpoint	Limit	Notes
CLOB API Keys	50 requests / 10s	Throttle requests over the maximum configured rate
​
CLOB Trading Endpoints
Endpoint	Limit	Notes
CLOB POST /order	2400 requests / 10s (240/s)	BURST - Throttle requests over the maximum configured rate
CLOB POST /order	24000 requests / 10 minutes (40/s)	Throttle requests over the maximum configured rate
CLOB POST /order (by token id)	800 requests / 10s (80/s)	BURST - Throttle requests over the maximum configured rate
CLOB POST /order (by token id)	12000 requests / 10 minutes (20/s)	Throttle requests over the maximum configured rate
CLOB DELETE /order	2400 requests / 10s (240/s)	BURST - Throttle requests over the maximum configured rate
CLOB DELETE /order	24000 requests / 10 minutes (40/s)	Throttle requests over the maximum configured rate
CLOB POST /orders	800 requests / 10s (80/s)	BURST - Throttle requests over the maximum configured rate
CLOB POST /orders	12000 requests / 10 minutes (20/s)	Throttle requests over the maximum configured rate
CLOB DELETE /orders	800 requests / 10s (80/s)	BURST - Throttle requests over the maximum configured rate
CLOB DELETE /orders	12000 requests / 10 minutes (20/s)	Throttle requests over the maximum configured rate
CLOB DELETE /cancel-all	200 requests / 10s (20/s)	BURST - Throttle requests over the maximum configured rate
CLOB DELETE /cancel-all	3000 requests / 10 minutes (5/s)	Throttle requests over the maximum configured rate
CLOB DELETE /cancel-market-orders	800 requests / 10s (80/s)	BURST - Throttle requests over the maximum configured rate
CLOB DELETE /cancel-market-orders	12000 requests / 10 minutes (20/s)	Throttle requests over the maximum configured rate
​
Other API Rate Limits
Endpoint	Limit	Notes
RELAYER /submit	15 requests / 1 minute	Throttle requests over the maximum configured rate
User PNL API	100 requests / 10s	Throttle requests over the maximum configured rate
Glossary


# Polymarket Documentation: Get Current Positions for a User

Returns positions filtered by user and optional filters.

### Endpoint

`GET /positions`

### Request Example (cURL)

```bash
curl --request GET \
  --url https://data-api.polymarket.com/positions
```

### Status Codes

| Status | Description |
| :----- | :---------- |
| 200    | Success     |
| 400    | Bad Request |
| 401    | Unauthorized |
| 500    | Internal Server Error |

### Query Parameters

| Parameter | Type | Required | Default | Description | Example |
| :--- | :--- | :--- | :--- | :--- | :--- |
| `user` | `string` | **required** | | User address (required) | `"0x56687bf447db6ffa42ffe2204a05edaa20f55839"` |
| `market` | `string[]` | | | Comma-separated list of condition IDs. Mutually exclusive with `eventId`. (0x-prefixed 64-hex string) | |
| `eventId` | `integer[]` | | | Comma-separated list of event IDs. Mutually exclusive with `market`. | |
| `sizeThreshold` | `number` | | `1` | Required range: `x >= 0` | |
| `redeemable` | `boolean` | | `false` | | |
| `mergeable` | `boolean` | | `false` | | |
| `limit` | `integer` | | `100` | Required range: `0 <= x <= 500` | |
| `offset` | `integer` | | `0` | Required range: `0 <= x <= 10000` | |
| `sortBy` | `enum<string>` | | `TOKENS` | Available options: `CURRENT`, `INITIAL`, `TOKENS`, `CASHPNL`, `PERCENTPNL`, `TITLE`, `RESOLVING`, `PRICE`, `AVGPRICE` | |
| `sortDirection` | `enum<string>` | | `DESC` | Available options: `ASC`, `DESC` | |
| `title` | `string` | | | Maximum length: 100 | |

### Response (200 Success - `application/json`)

List of positions

```json
[
  {
    "proxyWallet": "0x5adf695a088172a920b6d0b2e5b7d88aa8ffa5e7",
    "asset": "22532673444371000087276855698976185959891603058477427058498190868809631671643",
    "conditionId": "0x2b6a5170c30fbeba1b2317cf98929a446af82e2dc2bc5e84a07959b35bc2edbb",
    "size": 689.991638,
    "avgPrice": 0.212752,
    "initialValue": 146.797100967776,
    "currentValue": 141.44828579,
    "cashPnl": -5.348815177776009,
    "percentPnl": -3.6436790253440687,
    "totalBought": 699.991638,
    "realizedPnl": 0,
    "percentRealizedPnl": -5.020214340108156,
    "curPrice": 0.205,
    "redeemable": false,
    "mergeable": false,
    "title": "Will Celta Vigo win on 2025-10-05?",
    "slug": "lal-cel-mad-2025-10-05-cel",
    "icon": "https://polymarket-upload.s3.us-east-2.amazonaws.com/lal_celta_vigo.png",
    "eventId": "47924",
    "eventSlug": "lal-cel-mad-2025-10-05",
    "outcome": "Yes",
    "outcomeIndex": 0,
    "oppositeOutcome": "No",
    "oppositeAsset": "95416813017536330994120103652237010090486650775573169623122187070843615636364",
    "endDate": "2025-10-05",
    "negativeRisk": true
  },
  ...
]
```

#### Response Fields

| Field | Type | Description | Example |
| :--- | :--- | :--- | :--- |
| `proxyWallet` | `string` | User Profile Address (0x-prefixed, 40 hex chars) | `"0x56687bf447db6ffa42ffe2204a05edaa20f55839"` |
| `asset` | `string` | | |
| `conditionId` | `string` | 0x-prefixed 64-hex string | `"0xdd22472e552920b8438158ea7238bfadfa4f736aa4cee91a6b86c39ead110917"` |
| `size` | `number` | | |
| `avgPrice` | `number` | | |
| `initialValue` | `number` | | |
| `currentValue` | `number` | | |
| `cashPnl` | `number` | | |
| `percentPnl` | `number` | | |
| `totalBought` | `number` | | |
| `realizedPnl` | `number` | | |
| `percentRealizedPnl` | `number` | | |
| `curPrice` | `number` | | |
| `redeemable` | `boolean` | | |
| `mergeable` | `boolean` | | |
| `title` | `string` | | |
| `slug` | `string` | | |
| `icon` | `string` | | |
| `eventSlug` | `string` | | |
| `outcome` | `string` | | |
| `outcomeIndex` | `integer` | | |
| `oppositeOutcome` | `string` | | |
| `oppositeAsset` | `string` | | |
| `endDate` | `string` | | |
| `negativeRisk` | `boolean` | | |

---

*Other related endpoints mentioned:*

* Health check
* Get trades for a user or markets

# Polymarket Documentation: Get Trades for a User or Markets

## Core: Get trades for a user or markets

Returns trades filtered by user and/or market identifiers.

### Endpoint

`GET /trades`

### Request Example (cURL)

```bash
curl --request GET \
  --url https://data-api.polymarket.com/trades
```

### Status Codes

| Status | Description |
| :----- | :---------- |
| 200    | Success     |
| 400    | Bad Request |
| 401    | Unauthorized |
| 500    | Internal Server Error |

### Query Parameters

| Parameter | Type | Default | Required Range | Description | Example |
| :--- | :--- | :--- | :--- | :--- | :--- |
| `limit` | `integer` | `100` | `0 <= x <= 10000` | | |
| `offset` | `integer` | `0` | `0 <= x <= 10000` | | |
| `takerOnly` | `boolean` | `true` | | | |
| `filterType` | `enum<string>` | | | Must be provided together with `filterAmount`. Available options: `CASH`, `TOKENS`. | |
| `filterAmount` | `number` | | `x >= 0` | Must be provided together with `filterType`. | |
| `market` | `string[]` | | | Comma-separated list of condition IDs (0x-prefixed 64-hex string). Mutually exclusive with `eventId`. | |
| `eventId` | `integer[]` | | | Comma-separated list of event IDs. Mutually exclusive with `market`. | |
| `user` | `string` | | | User Profile Address (0x-prefixed, 40 hex chars). | `"0x56687bf447db6ffa42ffe2204a05edaa20f55839"` |
| `side` | `enum<string>` | | | Available options: `BUY`, `SELL`. | |

### Response (200 Success - `application/json`)

List of trades

```json
[
  {
    "proxyWallet": "0x5adf695a088172a920b6d0b2e5b7d88aa8ffa5e7",
    "side": "SELL",
    "asset": "10556390943081047040362703548123771402014160833887429090228355495495795329131",
    "conditionId": "0x1d221af524997a388c696773235bdf08740e620ee1e164659a1302272ffc6f14",
    "size": 129.1,
    "price": 0.22,
    "timestamp": 1759491562,
    "title": "Will Getafe win on 2025-10-03?",
    "slug": "lal-osa-get-2025-10-03-get",
    "icon": "https://polymarket-upload.s3.us-east-2.amazonaws.com/lal_getafe.png",
    "eventSlug": "lal-osa-get-2025-10-03",
    "outcome": "Yes",
    "outcomeIndex": 0,
    "name": "XxConorxX",
    "pseudonym": "Purple-Shelter",
    "bio": "God Bless Charlie Kirk",
    "profileImage": "https://polymarket-upload.s3.us-east-2.amazonaws.com/profile-image-2865805-78a97917-fb27-4b2c-9ad6-0158f2ef7d3a.png",
    "profileImageOptimized": "",
    "transactionHash": "0x331fe02b949d5ca31885c311c527d7d4ed0b98d71923e701551e162abf5d3719"
  },
  ...
]
```

#### Response Fields

| Field | Type | Description | Example |
| :--- | :--- | :--- | :--- |
| `proxyWallet` | `string` | User Profile Address (0x-prefixed, 40 hex chars) | `"0x56687bf447db6ffa42ffe2204a05edaa20f55839"` |
| `side` | `enum<string>` | Available options: `BUY`, `SELL` | |
| `asset` | `string` | | |
| `conditionId` | `string` | 0x-prefixed 64-hex string | `"0xdd22472e552920b8438158ea7238bfadfa4f736aa4cee91a6b86c39ead110917"` |
| `size` | `number` | | |
| `price` | `number` | | |
| `timestamp` | `integer` | | |
| `title` | `string` | | |
| `slug` | `string` | | |
| `icon` | `string` | | |
| `eventSlug` | `string` | | |
| `outcome` | `string` | | |
| `outcomeIndex` | `integer` | | |
| `name` | `string` | | |
| `pseudonym` | `string` | | |
| `bio` | `string` | | |
| `profileImage` | `string` | | |
| `profileImageOptimized` | `string` | | |
| `transactionHash` | `string` | | |


# Polymarket Documentation: Get Closed Positions for a User

## Core: Get closed positions for a user

Fetches closed positions for a user (address).

### Endpoint

`GET /closed-positions`

### Request Example (cURL)

```bash
curl --request GET \
  --url https://data-api.polymarket.com/closed-positions
```

### Status Codes

| Status | Description |
| :----- | :---------- |
| 200    | Success     |
| 400    | Bad Request |
| 401    | Unauthorized |
| 500    | Internal Server Error |

### Query Parameters

| Parameter | Type | Required | Default | Required Range | Description | Example |
| :--- | :--- | :--- | :--- | :--- | :--- | :--- |
| `user` | `string` | **required** | | | The address of the user in question. | `"0x56687bf447db6ffa42ffe2204a05edaa20f55839"` |
| `market` | `string[]` | | | | The conditionId of the market in question. Supports multiple CSV separated values. Cannot be used with the `eventId` param. (0x-prefixed 64-hex string) | |
| `title` | `string` | | | Maximum length: 100 | Filter by market title. | |
| `eventId` | `integer[]` | | | | The event id of the event in question. Supports multiple CSV separated values. Returns positions for all markets for those event ids. Cannot be used with the `market` param. | |
| `limit` | `integer` | | `50` | `0 <= x <= 500` | The max number of positions to return. | |
| `offset` | `integer` | | `0` | `0 <= x <= 10000` | The starting index for pagination. | |
| `sortBy` | `enum<string>` | | `REALIZEDPNL` | | The sort criteria. Available options: `REALIZEDPNL`, `TITLE`, `PRICE`, `AVGPRICE`. | |
| `sortDirection` | `enum<string>` | | `DESC` | | The sort direction. Available options: `ASC`, `DESC`. | |

### Response (200 Success - `application/json`)

```json
[
  {
    "proxyWallet": "0x5adf695a088172a920b6d0b2e5b7d88aa8ffa5e7",
    "asset": "105862139550598651869144991581649266505740323692381441468334576128241388255355",
    "conditionId": "0x078c6aac96ffa529781967e5608484735cef2a1668804653f70a8a9f77e80142",
    "avgPrice": 0.31604501945997504,
    "totalBought": 1390.634362,
    "realizedPnl": 255.814616,
    "curPrice": 0,
    "title": "Orioles vs. Yankees",
    "slug": "mlb-bal-nyy-2025-09-27",
    "icon": "https://polymarket-upload.s3.us-east-2.amazonaws.com/Repetitive-markets/MLB.jpg",
    "eventSlug": "mlb-bal-nyy-2025-09-27",
    "outcome": "Orioles",
    "outcomeIndex": 0,
    "oppositeOutcome": "Yankees",
    "oppositeAsset": "21098470966028966930663125053209505279564548160002102091763058078727565449356",
    "endDate": "2025-10-04T00:00:00Z"
  },
  ...
]
```

#### Response Fields

| Field | Type | Description | Example |
| :--- | :--- | :--- | :--- |
| `proxyWallet` | `string` | User Profile Address (0x-prefixed, 40 hex chars) | `"0x56687bf447db6ffa42ffe2204a05edaa20f55839"` |
| `asset` | `string` | | |
| `conditionId` | `string` | 0x-prefixed 64-hex string | `"0xdd22472e552920b8438158ea7238bfadfa4f736aa4cee91a6b86c39ead110917"` |
| `avgPrice` | `number` | | |
| `totalBought` | `number` | | |
| `realizedPnl` | `number` | | |
| `curPrice` | `number` | | |
| `title` | `string` | | |
| `slug` | `string` | | |
| `icon` | `string` | | |
| `eventSlug` | `string` | | |
| `outcome` | `string` | | |
| `outcomeIndex` | `integer` | | |
| `oppositeOutcome` | `string` | | |
| `oppositeAsset` | `string` | | |
| `endDate` | `string` | | |

# Polymarket TS CLOB Client

```ts
//npm install @polymarket/clob-client
//npm install ethers

//Client initialization example and dumping API Keys

import { ApiKeyCreds, ClobClient, OrderType, Side, } from "@polymarket/clob-client";
import { Wallet } from "@ethersproject/wallet";

const host = 'https://clob.polymarket.com';
const funder = '';//This is your Polymarket Profile Address, where you send UDSC to. 
const signer = new Wallet(""); //This is your Private Key. If using email login export from https://reveal.magic.link/polymarket otherwise export from your Web3 Application


//In general don't create a new API key, always derive or createOrDerive
const creds = new ClobClient(host, 137, signer).createOrDeriveApiKey();

//0: Browser Wallet(Metamask, Coinbase Wallet, etc)
//1: Magic/Email Login
const signatureType = 1; 
  (async () => {
    const clobClient = new ClobClient(host, 137, signer, await creds, signatureType, funder);
    const resp2 = await clobClient.createAndPostOrder(
        {
            tokenID: "", //Use https://docs.polymarket.com/developers/gamma-markets-api/get-markets to grab a sample token
            price: 0.01,
            side: Side.BUY,
            size: 5,
        },
        { tickSize: "0.001",negRisk: false }, //You'll need to adjust these based on the market. Get the tickSize and negRisk T/F from the get-markets above
        //{ tickSize: "0.001",negRisk: true },

        OrderType.GTC, 
    );
    console.log(resp2)
  })();
  ```
]]>
</file>
<file path=".dev/docs/manual-poly-gamma.md">
<![CDATA[
## Polymarket API Documentation: List Events

This page documents the **List events** API endpoint for Polymarket, which allows retrieving a list of prediction markets (events).

### API Endpoint

| Method | Path      | Base URL                           | Purpose     |
| :----- | :-------- | :--------------------------------- | :---------- |
| `GET`  | `/events` | `https://gamma-api.polymarket.com` | List events |

### Query Parameters

The endpoint supports various parameters for filtering, sorting, and pagination:

| Parameter                                | Type                    | Description                                                        |
| :--------------------------------------- | :---------------------- | :----------------------------------------------------------------- |
| `limit`, `offset`                        | `integer`               | Pagination controls.                                               |
| `order`, `ascending`                     | `string`, `boolean`     | Sorting parameters.                                                |
| `id`, `slug`                             | `integer[]`, `string[]` | Filter by specific event IDs or slugs.                             |
| `tag_id`, `exclude_tag_id`               | `integer`               | Filter by associated tags.                                         |
| `featured`, `closed`, `cyom`             | `boolean`               | Filter by status (e.g., featured, closed, Create Your Own Market). |
| `start_date_min/max`, `end_date_min/max` | `string<date-time>`     | Filter events by date range.                                       |
| `include_chat`, `include_template`       | `boolean`               | Include associated chat or template data.                          |

### Response Structure (Event Object)

The API returns a list of event objects (JSON array), each containing extensive data. Key fields include:

| Field                                        | Type                | Description                                                                |
| :------------------------------------------- | :------------------ | :------------------------------------------------------------------------- |
| `id`, `ticker`, `slug`, `title`              | `string`            | Basic identification and display data.                                     |
| `startDate`, `endDate`                       | `string<date-time>` | Event timeline.                                                            |
| `active`, `closed`, `featured`, `restricted` | `boolean`           | Event status indicators.                                                   |
| `liquidity`, `volume`, `openInterest`        | `number`            | Market financial metrics.                                                  |
| `markets`                                    | `object[]`          | Nested array containing detailed market objects associated with the event. |
| `series`                                     | `object[]`          | Nested array containing series information the event belongs to.           |
| `categories`, `tags`                         | `object[]`          | Categorization and tagging data.                                           |
| `volume24hr`, `volume1wk`, etc.              | `number`            | Volume data across different timeframes.                                   |

#### Nested Market Object Fields

Each `market` within an event includes details such as: `question`, `conditionId`, `endDate`, `marketType`, `volumeNum`, `liquidityNum`, pricing information (`lastTradePrice`, `bestBid`, `bestAsk`), and various status flags.

### Example Output

```json
[
    {
        "id": 57116,
        "ticker": "nhl-metropolitan-division-winner",
        "slug": "nhl-metropolitan-division-winner-831",
        "title": "NHL: Metropolitan Division Winner",
        "description": "This market will resolve according to the team that wins the listed division during the 2025-26 NHL regular season.\n\nIf at any point it becomes impossible for a listed team to win its division (e.g., mathematical elimination before season end), the relevant market will resolve immediately to “No.”\n\nIf the 2025-26 NHL season is permanently canceled or has not been completed by June 30, 2026, 11:59 PM ET, this market will resolve to “Other.”",
        "resolutionSource": "",
        "startDate": "2025-10-10T00:34:45.548328Z",
        "creationDate": "2025-10-10T00:34:45.548322Z",
        "endDate": "2026-04-30T00:00:00Z",
        "image": "https://polymarket-upload.s3.us-east-2.amazonaws.com/nhl-metropolitan-division-winner-831-BiOhOAV6ln-4.png",
        "icon": "https://polymarket-upload.s3.us-east-2.amazonaws.com/nhl-metropolitan-division-winner-831-BiOhOAV6ln-4.png",
        "active": true,
        "closed": false,
        "archived": false,
        "new": false,
        "featured": false,
        "restricted": true,
        "liquidity": 9680,
        "openInterest": 0,
        "sortBy": "price",
        "createdAt": "2025-10-09T20:29:37.053812Z",
        "updatedAt": "2025-10-10T05:46:11.123915Z",
        "competitive": 0.8470089994706194,
        "enableOrderBook": true,
        "liquidityClob": 9680,
        "negRisk": true,
        "negRiskMarketID": "0xc1bd6e88f5a19d4d451188f8e9a78952e48db9676aedcba4573b8dd271d79600",
        "commentCount": 0,
        "markets": [
            {
                "id": 629070,
                "question": "Will the Carolina Hurricanes win the Metropolitan Division?",
                "conditionId": "0xa998022efc89d60331ac15e78103dafd765e65eaea433405638c4e293d2b0fa6",
                "slug": "will-the-carolina-hurricanes-win-the-metropolitan-division-123",
                "endDate": "2026-04-30T00:00:00Z",
                "liquidity": 300,
                "startDate": "2025-10-10T00:23:22.977509Z",
                "image": "https://polymarket-upload.s3.us-east-2.amazonaws.com/nhl-metropolitan-division-winner-831-BiOhOAV6ln-4.png",
                "icon": "https://polymarket-upload.s3.us-east-2.amazonaws.com/nhl-metropolitan-division-winner-831-BiOhOAV6ln-4.png",
                "description": "This market will resolve according to the team that wins the listed division during the 2025-26 NHL regular season.\n\nIf at any point it becomes impossible for a listed team to win its division (e.g., mathematical elimination before season end), the relevant market will resolve immediately to “No.”\n\nIf the 2025-26 NHL season is permanently canceled or has not been completed by June 30, 2026, 11:59 PM ET, this market will resolve to “Other.”",
                "outcomes": ["Yes", "No"],
                "outcomePrices": ["0.35", "0.65"],
                "active": true,
                "closed": false,
                "marketMakerAddress": "",
                "createdAt": "2025-10-09T20:29:37.904431Z",
                "updatedAt": "2025-10-10T05:42:19.24627Z",
                "new": false,
                "featured": false,
                "submitted_by": "0x91430CaD2d3975766499717fA0D66A78D814E5c5",
                "archived": false,
                "resolvedBy": "0x2F5e3684cb1F318ec51b00Edba38d79Ac2c0aA9d",
                "restricted": true,
                "groupItemTitle": "Carolina Hurricanes",
                "groupItemThreshold": 0,
                "questionID": "0xc1bd6e88f5a19d4d451188f8e9a78952e48db9676aedcba4573b8dd271d79600",
                "enableOrderBook": true,
                "orderPriceMinTickSize": 0.01,
                "orderMinSize": 5,
                "liquidityNum": 300,
                "endDateIso": "2026-04-30",
                "startDateIso": "2025-10-10",
                "hasReviewedDates": true,
                "clobTokenIds": [
                    "63645197726705524606059371558162512012201160965301656466640547461234264539392",
                    "5617477483144744882677399661863606310473044785725076606563294855884593377840"
                ],
                "umaBond": 500,
                "umaReward": 5,
                "liquidityClob": 300,
                "customLiveness": 0,
                "acceptingOrders": true,
                "negRisk": true,
                "negRiskMarketID": "0xc1bd6e88f5a19d4d451188f8e9a78952e48db9676aedcba4573b8dd271d79600",
                "negRiskRequestID": "0x9b2ab6a19ab61ed010aa5fe60f474283affc335829f807d6b5e5901f7de69661",
                "ready": false,
                "funded": false,
                "acceptingOrdersTimestamp": "2025-10-10T00:23:01Z",
                "cyom": false,
                "competitive": 0.293398533007335,
                "pagerDutyNotificationEnabled": false,
                "approved": true,
                "rewardsMinSize": 0,
                "rewardsMaxSpread": 0,
                "spread": 0.7,
                "bestAsk": 0.7,
                "automaticallyActive": true,
                "clearBookOnStart": true,
                "showGmpSeries": false,
                "showGmpOutcome": false,
                "manualActivation": false,
                "negRiskOther": false,
                "umaResolutionStatuses": [],
                "pendingDeployment": false,
                "deploying": false,
                "deployingTimestamp": "2025-10-10T00:11:25.336806Z",
                "rfqEnabled": false,
                "holdingRewardsEnabled": false,
                "feesEnabled": false
            }
        ],
        "tags": [
            {
                "id": 1,
                "label": "Sports",
                "slug": "sports",
                "forceShow": false,
                "publishedAt": "2023-10-24T22:37:50.296Z",
                "updatedBy": 15,
                "createdAt": "2023-10-24T22:37:50.31Z",
                "updatedAt": "2024-07-05T21:07:21.800664Z",
                "forceHide": true
            },
            {
                "id": 899,
                "label": "NHL",
                "slug": "nhl",
                "forceShow": false,
                "publishedAt": "2024-01-22T17:16:28.432Z",
                "createdAt": "2024-01-22T17:16:28.449Z",
                "updatedAt": "2024-05-30T22:36:11.118646Z"
            },
            {
                "id": 100088,
                "label": "Hockey",
                "slug": "hockey",
                "cyom": false,
                "showAllOutcomes": true,
                "showMarketImages": false,
                "enableNegRisk": true,
                "automaticallyActive": true,
                "gmpChartMode": "default",
                "negRiskAugmented": true,
                "pendingDeployment": false,
                "deploying": false,
                "deployingTimestamp": "2025-10-10T00:08:05.814235Z"
            }
        ]
    },
    ...
]
```

]]>
</file>
<file path=".dev/docs/manual-poly-rtds.md">
<![CDATA[
# Real-Time Data Client

Client wrapper for `real-time-data-streaming` **WebSocket**.

## Quickstart

```ts
import { RealTimeDataClient } from "../src/client";
import { Message } from "../src/model";

const onMessage = (m: Message) => console.log(m.topic, m.type, m.payload);

const onConnect = (client: RealTimeDataClient) => {
  client.subscribe({
    subscriptions: [
      {
        topic: "comments",
        type: "*", // all types for topic
        filters: `{"parentEntityID":100,"parentEntityType":"Event"}`, // empty = no filter
      },
    ],
  });
};

new RealTimeDataClient({ onMessage, onConnect }).connect();
```

## Subscriptions

> After connection, use the same `client: RealTimeDataClient`.

### Subscribe

```ts
// activity.trades
client.subscribe({ subscriptions: [{ topic: "activity", type: "trades" }] });

// all comment types
client.subscribe({ subscriptions: [{ topic: "comments", type: "*" }] });
```

### Unsubscribe

> Unsubscribe from `activity.trades` (if `*` was used earlier, this removes only `trades`).

```ts
client.unsubscribe?.({ // if supported; same shape as subscribe
  subscriptions: [{ topic: "activity", type: "trades" }],
});

// If the client uses subscribe-with-action pattern:
client.subscribe({
  subscriptions: [{ topic: "activity", type: "trades" }],
  action: "unsubscribe",
});
```

### Disconnect

```ts
client.disconnect();
```

## Message Matrix

| Topic                     | Type               | Auth     | Filters (empty = none)                                          | Schema                              | Subscription Handler                          |
| ------------------------- | ------------------ | -------- | --------------------------------------------------------------- | ----------------------------------- | --------------------------------------------- |
| `activity`                | `trades`           | -        | `{"event_slug":"string"}` **OR** `{"market_slug":"string"}`     | [`Trade`](#trade)                   |                                               |
| `activity`                | `orders_matched`   | -        | `{"event_slug":"string"}` **OR** `{"market_slug":"string"}`     | [`Trade`](#trade)                   |                                               |
| `comments`                | `comment_created`  | -        | `{"parentEntityID":number,"parentEntityType":"Event / Series"}` | [`Comment`](#comment)               |                                               |
| `comments`                | `comment_removed`  | -        | same as above                                                   | [`Comment`](#comment)               |                                               |
| `comments`                | `reaction_created` | -        | same as above                                                   | [`Reaction`](#reaction)             |                                               |
| `comments`                | `reaction_removed` | -        | same as above                                                   | [`Reaction`](#reaction)             |                                               |
| `rfq`                     | `request_created`  | -        | -                                                               | [`Request`](#request)               |                                               |
| `rfq`                     | `request_edited`   | -        | -                                                               | [`Request`](#request)               |                                               |
| `rfq`                     | `request_canceled` | -        | -                                                               | [`Request`](#request)               |                                               |
| `rfq`                     | `request_expired`  | -        | -                                                               | [`Request`](#request)               |                                               |
| `rfq`                     | `quote_created`    | -        | -                                                               | [`Quote`](#quote)                   |                                               |
| `rfq`                     | `quote_edited`     | -        | -                                                               | [`Quote`](#quote)                   |                                               |
| `rfq`                     | `quote_canceled`   | -        | -                                                               | [`Quote`](#quote)                   |                                               |
| `rfq`                     | `quote_expired`    | -        | -                                                               | [`Quote`](#quote)                   |                                               |
| `crypto_prices`           | `update`           | -        | `{"symbol":string}`                                             | [`CryptoPrice`](#cryptoprice)       | [`CryptoPriceHistorical`](#initial-data-dump) |
| `crypto_prices_chainlink` | `update`           | -        | `{"symbol":string}`                                             | [`CryptoPrice`](#cryptoprice)       | [`CryptoPriceHistorical`](#initial-data-dump) |
| `clob_user`               | `order`            | ClobAuth | -                                                               | [`Order`](#order)                   |                                               |
| `clob_user`               | `trade`            | ClobAuth | -                                                               | [`Trade (CLOB User)`](#trade-1)     |                                               |
| `clob_market`             | `price_change`     | -        | `["100","200",...]` **(mandatory)**                             | [`PriceChanges`](#pricechanges)     |                                               |
| `clob_market`             | `agg_orderbook`    | -        | `["100","200",...]`                                             | [`AggOrderbook`](#aggorderbook)     | [`AggOrderbook`](#aggorderbook)               |
| `clob_market`             | `last_trade_price` | -        | `["100","200",...]`                                             | [`LastTradePrice`](#lasttradeprice) |                                               |
| `clob_market`             | `tick_size_change` | -        | `["100","200",...]`                                             | [`TickSizeChange`](#ticksizechange) |                                               |
| `clob_market`             | `market_created`   | -        | -                                                               | [`ClobMarket`](#clobmarket)         |                                               |
| `clob_market`             | `market_resolved`  | -        | -                                                               | [`ClobMarket`](#clobmarket)         |                                               |

## Auth

### ClobAuth

```ts
export interface ClobApiKeyCreds {
  key: string;        // API key
  secret: string;     // API secret
  passphrase: string; // Passphrase
}
```

```ts
client.subscribe({
  subscriptions: [
    {
      topic: "clob_user",
      type: "*",
      clob_auth: {
        key: "xxxxxx-xxxx-xxxxx-xxxx-xxxxxx",
        secret: "xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx",
        passphrase: "xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx",
      },
    },
  ],
});
```

## Schemas

### Activity

#### Trade

| Name              | Type    | Description                   |
| ----------------- | ------- | ----------------------------- |
| `asset`           | string  | ERC1155 token ID traded       |
| `bio`             | string  | Trader’s bio                  |
| `conditionId`     | string  | Market/CTF condition ID       |
| `eventSlug`       | string  | Event slug                    |
| `icon`            | string  | Market icon URL               |
| `name`            | string  | Trader’s name                 |
| `outcome`         | string  | Human-readable market outcome |
| `outcomeIndex`    | integer | Outcome index                 |
| `price`           | float   | Trade price                   |
| `profileImage`    | string  | Trader profile image URL      |
| `proxyWallet`     | string  | Trader proxy wallet           |
| `pseudonym`       | string  | Trader pseudonym              |
| `side`            | string  | `BUY` / `SELL`                |
| `size`            | integer | Trade size                    |
| `slug`            | string  | Market slug                   |
| `timestamp`       | integer | Trade timestamp               |
| `title`           | string  | Event title                   |
| `transactionHash` | string  | Tx hash                       |

### Comments

#### Comment

| Name               | Type   | Description         |
| ------------------ | ------ | ------------------- |
| `id`               | string | Comment ID          |
| `body`             | string | Content             |
| `parentEntityType` | string | `Event` or `Series` |
| `parentEntityID`   | number | Parent ID           |
| `parentCommentID`  | string | Parent comment ID   |
| `userAddress`      | string | User address        |
| `replyAddress`     | string | Reply user address  |
| `createdAt`        | string | Created timestamp   |
| `updatedAt`        | string | Updated timestamp   |

#### Reaction

| Name           | Type   | Description       |
| -------------- | ------ | ----------------- |
| `id`           | string | Reaction ID       |
| `commentID`    | number | Comment ID        |
| `reactionType` | string | Reaction type     |
| `icon`         | string | Reaction icon     |
| `userAddress`  | string | User address      |
| `createdAt`    | string | Created timestamp |

### RFQ

#### Request

| Name           | Type   | Description                 |
| -------------- | ------ | --------------------------- |
| `requestId`    | string | Request ID                  |
| `proxyAddress` | string | User proxy                  |
| `market`       | string | Market/CTF condition ID     |
| `token`        | string | ERC1155 token ID            |
| `complement`   | string | Complement ERC1155 token ID |
| `state`        | string | Current state               |
| `side`         | string | Buy/Sell                    |
| `sizeIn`       | number | Input size                  |
| `sizeOut`      | number | Output size                 |
| `price`        | number | Implied price               |
| `expiry`       | number | UNIX expiry                 |

#### Quote

| Name           | Type   | Description                 |
| -------------- | ------ | --------------------------- |
| `quoteId`      | string | Quote ID                    |
| `requestId`    | string | Linked request ID           |
| `proxyAddress` | string | User proxy                  |
| `token`        | string | ERC1155 token ID            |
| `state`        | string | Current state               |
| `side`         | string | Buy/Sell                    |
| `sizeIn`       | number | Input size                  |
| `sizeOut`      | number | Output size                 |
| `condition`    | string | Market/CTF condition ID     |
| `complement`   | string | Complement ERC1155 token ID |
| `expiry`       | number | UNIX expiry                 |

### CryptoPrice

| Name        | Type   | Description    |
| ----------- | ------ | -------------- |
| `symbol`    | string | Asset symbol   |
| `timestamp` | number | ms since epoch |
| `value`     | number | Price value    |

**Filters:** `{"symbol":"btcusdt"}`, `{"symbol":"ethusdt"}`, `{"symbol":"xrpusdt"}`, `{"symbol":"solusdt"}`

#### Initial data dump

On connection with a filter, server sends a snapshot:

* `symbol: string`
* `data: Array<{ timestamp: number; value: number }>`
  (See also: used by `crypto_prices` and `crypto_prices_chainlink`.)

### CLOB User

#### Order

| Name            | Type               | Description                           |
| --------------- | ------------------ | ------------------------------------- |
| `asset_id`      | string             | ERC1155 token ID                      |
| `created_at`    | string (timestamp) | UNIX creation                         |
| `expiration`    | string (timestamp) | UNIX expiration                       |
| `id`            | string             | Order hash                            |
| `maker_address` | string             | Funder address                        |
| `market`        | string             | Condition/market ID                   |
| `order_type`    | string             | `GTC` `GTD` `FOK` `FAK`               |
| `original_size` | string             | Size at placement                     |
| `outcome`       | string             | `YES` / `NO`                          |
| `owner`         | string             | Owner UUID                            |
| `price`         | string             | Decimal price                         |
| `side`          | string             | `BUY` / `SELL`                        |
| `size_matched`  | string             | Matched amount                        |
| `status`        | string             | e.g., `MATCHED`                       |
| `type`          | string             | `PLACEMENT` `CANCELLATION` `FILL` ... |

#### Trade (CLOB User)

| Name               | Type               | Description             |
| ------------------ | ------------------ | ----------------------- |
| `asset_id`         | string             | ERC1155 token ID        |
| `fee_rate_bps`     | string             | Fee rate (bps)          |
| `id`               | string             | Match ID                |
| `last_update`      | string (timestamp) | UNIX last update        |
| `maker_address`    | string             | Maker address           |
| `maker_orders`     | array              | See below               |
| `market`           | string             | Condition/market ID     |
| `match_time`       | string (timestamp) | UNIX execution          |
| `outcome`          | string             | `YES` / `NO`            |
| `owner`            | string             | Taker UUID              |
| `price`            | string             | Decimal price           |
| `side`             | string             | Taker side `BUY`/`SELL` |
| `size`             | string             | Total matched size      |
| `status`           | string             | e.g., `MINED`           |
| `taker_order_id`   | string             | Taker order ID          |
| `transaction_hash` | string             | Settlement tx           |

**`maker_orders` (array items)**

| Name             | Type   | Description    |
| ---------------- | ------ | -------------- |
| `asset_id`       | string | Maker token ID |
| `fee_rate_bps`   | string | Maker fee bps  |
| `maker_address`  | string | Maker address  |
| `matched_amount` | string | Amount matched |
| `order_id`       | string | Maker order ID |
| `outcome`        | string | `YES` / `NO`   |
| `owner`          | string | Maker UUID     |
| `price`          | string | Order price    |
| `side`           | string | `BUY` / `SELL` |

### CLOB Market

#### PriceChanges

| Name | Type               | Description           |
| ---- | ------------------ | --------------------- |
| `m`  | string             | Condition ID          |
| `pc` | array              | Price changes by book |
| `t`  | string (timestamp) | ms since epoch        |

**PriceChange (elements of `pc`)**

| Name | Type   | Description         |
| ---- | ------ | ------------------- |
| `a`  | string | `asset_id`          |
| `h`  | string | book snapshot hash  |
| `p`  | string | price (e.g., `0.5`) |
| `s`  | string | side `BUY`/`SELL`   |
| `si` | string | size at price       |
| `ba` | string | best ask            |
| `bb` | string | best bid            |

> **Filters required:** `["100","200",...]` (asset IDs).

#### AggOrderbook

| Name             | Type               | Description                    |
| ---------------- | ------------------ | ------------------------------ |
| `asks`           | array              | Aggregated asks `{price,size}` |
| `asset_id`       | string             | Asset ID                       |
| `bids`           | array              | Aggregated bids `{price,size}` |
| `hash`           | string             | Snapshot hash                  |
| `market`         | string             | Condition ID                   |
| `min_order_size` | string             | Min order size                 |
| `neg_risk`       | boolean            | NegRisk flag                   |
| `tick_size`      | string             | Min price increment            |
| `timestamp`      | string (timestamp) | ms since epoch                 |

**`asks`/`bids` item**
| `price`: string | `size`: string |

**Initial data dump:** on connection when filters used.

#### LastTradePrice

| Name           | Type   | Description    |
| -------------- | ------ | -------------- |
| `asset_id`     | string | Asset ID       |
| `fee_rate_bps` | string | Fee bps        |
| `market`       | string | Condition ID   |
| `price`        | string | Trade price    |
| `side`         | string | `BUY` / `SELL` |
| `size`         | string | Trade size     |

#### TickSizeChange

| Name            | Type   | Description              |
| --------------- | ------ | ------------------------ |
| `market`        | string | Condition ID             |
| `asset_id`      | string | Array of two ERC1155 IDs |
| `old_tick_size` | string | Previous tick            |
| `new_tick_size` | string | Updated tick             |

#### ClobMarket

| Name             | Type      | Description           |
| ---------------- | --------- | --------------------- |
| `market`         | string    | Condition ID          |
| `asset_ids`      | [2]string | Two ERC1155 asset IDs |
| `min_order_size` | string    | Min order size        |
| `tick_size`      | string    | Min price increment   |
| `neg_risk`       | boolean   | Negative risk         |

]]>
</file>
<file path=".dev/docs/manual-rate-limits.md">
<![CDATA[
POLYMARKET RATE LIMITS

API Rate Limits
​
How Rate Limiting Works
All rate limits are enforced using Cloudflare’s throttling system. When you exceed the maximum configured rate for any endpoint, requests are throttled rather than immediately rejected. This means:
Throttling: Requests over the limit are delayed/queued rather than dropped
Burst Allowances: Some endpoints allow short bursts above the sustained rate
Time Windows: Limits reset based on sliding time windows (e.g., per 10 seconds, per minute)
​
General Rate Limits
Endpoint	Limit	Notes
General Rate Limiting	5000 requests / 10s	Throttle requests over the maximum configured rate
”OK” Endpoint	50 requests / 10s	Throttle requests over the maximum configured rate
​
Data API Rate Limits
Endpoint	Limit	Notes
Data API (General)	100 requests / 10s	Throttle requests over the maximum configured rate
Data API (Alternative)	600 requests / 1 minute	1 hour block on violation
Data API /trades	30 requests / 10s	Throttle requests over the maximum configured rate
Data API “OK” Endpoint	10 requests / 10s	Throttle requests over the maximum configured rate
​
GAMMA API Rate Limits
Endpoint	Limit	Notes
GAMMA (General)	750 requests / 10s	Throttle requests over the maximum configured rate
GAMMA Get Comments	100 requests / 10s	Throttle requests over the maximum configured rate
GAMMA /events	100 requests / 10s	Throttle requests over the maximum configured rate
GAMMA /markets	100 requests / 10s	Throttle requests over the maximum configured rate
GAMMA /markets /events listing	100 requests / 10s	Throttle requests over the maximum configured rate
GAMMA Tags	100 requests / 10s	Throttle requests over the maximum configured rate
GAMMA Search	300 requests / 10s	Throttle requests over the maximum configured rate
​
CLOB API Rate Limits
​
General CLOB Endpoints
Endpoint	Limit	Notes
CLOB (General)	5000 requests / 10s	Throttle requests over the maximum configured rate
CLOB GET Balance Allowance	125 requests / 10s	Throttle requests over the maximum configured rate
CLOB UPDATE Balance Allowance	20 requests / 10s	Throttle requests over the maximum configured rate
​
CLOB Market Data
Endpoint	Limit	Notes
CLOB /book	200 requests / 10s	Throttle requests over the maximum configured rate
CLOB /books (website)	300 requests / 10s	Throttle requests over the maximum configured rate
CLOB /books	80 requests / 10s	Throttle requests over the maximum configured rate
CLOB /price	200 requests / 10s	Throttle requests over the maximum configured rate
CLOB /prices	80 requests / 10s	Throttle requests over the maximum configured rate
CLOB /midprice	200 requests / 10s	Throttle requests over the maximum configured rate
CLOB /midprices	80 requests / 10s	Throttle requests over the maximum configured rate
​
CLOB Ledger Endpoints
Endpoint	Limit	Notes
CLOB Ledger (/trades /orders /notifications /order)	300 requests / 10s	Throttle requests over the maximum configured rate
CLOB Ledger /data/orders	150 requests / 10s	Throttle requests over the maximum configured rate
CLOB Ledger /data/trades	150 requests / 10s	Throttle requests over the maximum configured rate
CLOB /notifications	125 requests / 10s	Throttle requests over the maximum configured rate
​
CLOB Markets & Pricing
Endpoint	Limit	Notes
CLOB Price History	100 requests / 10s	Throttle requests over the maximum configured rate
CLOB Markets	250 requests / 10s	Throttle requests over the maximum configured rate
CLOB Market Tick Size	50 requests / 10s	Throttle requests over the maximum configured rate
CLOB markets/0x	50 requests / 10s	Throttle requests over the maximum configured rate
CLOB /markets listing	100 requests / 10s	Throttle requests over the maximum configured rate
​
CLOB Authentication
Endpoint	Limit	Notes
CLOB API Keys	50 requests / 10s	Throttle requests over the maximum configured rate
​
CLOB Trading Endpoints
Endpoint	Limit	Notes
CLOB POST /order	2400 requests / 10s (240/s)	BURST - Throttle requests over the maximum configured rate
CLOB POST /order	24000 requests / 10 minutes (40/s)	Throttle requests over the maximum configured rate
CLOB POST /order (by token id)	800 requests / 10s (80/s)	BURST - Throttle requests over the maximum configured rate
CLOB POST /order (by token id)	12000 requests / 10 minutes (20/s)	Throttle requests over the maximum configured rate
CLOB DELETE /order	2400 requests / 10s (240/s)	BURST - Throttle requests over the maximum configured rate
CLOB DELETE /order	24000 requests / 10 minutes (40/s)	Throttle requests over the maximum configured rate
CLOB POST /orders	800 requests / 10s (80/s)	BURST - Throttle requests over the maximum configured rate
CLOB POST /orders	12000 requests / 10 minutes (20/s)	Throttle requests over the maximum configured rate
CLOB DELETE /orders	800 requests / 10s (80/s)	BURST - Throttle requests over the maximum configured rate
CLOB DELETE /orders	12000 requests / 10 minutes (20/s)	Throttle requests over the maximum configured rate
CLOB DELETE /cancel-all	200 requests / 10s (20/s)	BURST - Throttle requests over the maximum configured rate
CLOB DELETE /cancel-all	3000 requests / 10 minutes (5/s)	Throttle requests over the maximum configured rate
CLOB DELETE /cancel-market-orders	800 requests / 10s (80/s)	BURST - Throttle requests over the maximum configured rate
CLOB DELETE /cancel-market-orders	12000 requests / 10 minutes (20/s)	Throttle requests over the maximum configured rate
​
Other API Rate Limits
Endpoint	Limit	Notes
RELAYER /submit	15 requests / 1 minute	Throttle requests over the maximum configured rate
User PNL API	100 requests / 10s	Throttle requests over the maximum configured rate
Glossary

]]>
</file>
<file path=".dev/md/plans/2025/10/07/13-09-13_discord-bot-slash-commands.md">
<![CDATA[
## Plan: Discord Bot with Slash Commands (+Autocomplete) for Status, Logs, Portfolio, Positions, Position, Close, Close-All

## Proposed Plan

### ❌ Critical Information Needed

- Do you prefer commands registered as guild-only during development (`DISCORD_GUILD_ID`) or global? Guild scope updates instantly; global can take up to 1 hour to propagate. If not provided, we will use guild scope by default for faster DX.
- Do you already have a Discord Application and Bot set up with the correct OAuth2 scopes? Required: `bot` and `applications.commands`. If not, we will include setup steps.

### ⚠️ Initial Best Assumptions to Address Ambiguities

1. MODERATE: Command scope -> We will register commands to a single guild (via `DISCORD_GUILD_ID`) for immediate availability; we can add a `--global` flag later. Rationale: Faster iteration and safer testing.
2. MODERATE: Bot runtime -> We will run the bot in the same process as the app, started from `main-loop`, non-blocking. Rationale: Simpler deployment and resource sharing.
4. MODERATE: Autocomplete dataset size -> Position counts are small enough to compute suggestions on-demand via DB queries within Discord’s 3s initial response limit.
The Discord Bot is in COMPLETELY PRIVATE server where only owner has access. No need to implement allowlisting.

### ☁️ Current State

1. Node.js ≥20, TypeScript strict, pnpm. See `package.json`.
2. App runs as a long-lived process: entrypoint `src/index.ts` calls `run()` in `src/core/app/main-loop.ts`.
3. DB: PostgreSQL via Drizzle; key tables `position`, `copy_order`, `leader_trade`, etc. Helpers in `src/utils/external-helpers.ts` expose portfolio summary and formatting.
4. Event bus emits lifecycle and trading events (`src/core/domain/event.ts`). Discord notifications currently via webhook only (`src/notify/discord-webhook.ts`).
5. RTDS stream in `src/core/data-ingestion/polymarket-rtds.ts` exposes `lastRtdsMessageTimeMs` for connectivity telemetry.
6. No Discord Bot runtime yet (`src/rpc/discord-bot.ts` is empty).

### 🌟 Desired Goal State

1. A Discord Bot connected via Gateway with slash commands visible in the configured guild.
2. Slash commands:
   - `/status`: RTDS/WS connectivity, open positions count, current unrealized PnL, lifetime realized PnL.
   - `/logs [n]`: Return last N lines of humanized logs.
   - `/portfolio`: Portfolio summary (reuse existing formatting).
   - `/positions`: Table of current open positions with columns: ID, UPNL.
   - `/position [id]`: Detailed position view with extra fields (tokenId, Entry Price (Avg), Current Price, Unrealized PnL).
   - `/close [id]`: Force close a specific position by ID.
   - `/close-all`: Force close all running positions.
3. Autocomplete for commands needing IDs (e.g., `/position` and `/close`), suggesting open position IDs.
4. All responses ephemeral by default (for private UX), with emojis and clear formatting.
5. DRY, typed, and non-intrusive to the main trading flow (sub-50ms overhead preserved for critical paths).

Traceability: Each bullet maps to the user requirements list (status/logs/portfolio/positions/position/close/close-all, with autocomplete and emojis).

### 🛣️ Brainstorm Implementation Approaches

- Approach 1: Gateway bot using `discord.js` v14
  - Pros: No public HTTP ingress needed; interactions and autocompletes handled via Gateway. Rich typing and utilities.
  - Cons: Adds a runtime dependency and a background connection.
- Approach 2: HTTP-only Interactions (Outgoing Webhook)
  - Pros: No Gateway connection.
  - Cons: Requires public HTTPS endpoint and signature verification; more infra.
- Approach 3: Hybrid (Gateway for commands, Webhook for followups)
  - Pros: Flexibility.
  - Cons: Unnecessary complexity for this private, single-user bot.

Chosen Approach: 1 (Gateway + discord.js)
- Reasons: No server needed; straightforward slash command + autocomplete handling; quick iteration in a private project.

Rollback Strategy
- The bot starts only if `DISCORD_BOT_TOKEN` is present. No token → no bot runtime. Command registration is an explicit script; revert by deleting commands and removing token.

### 🗺️ Very Detailed Plan

1) Dependencies and Env
- Add deps: `discord.js`, `@discordjs/rest`, `discord-api-types`.
- Add env vars to `.env.*`:
  - `DISCORD_BOT_TOKEN`: Bot token
  - `DISCORD_APP_ID`: Application (client) ID
  - `DISCORD_GUILD_ID`: Guild ID (dev scope)

2) Command Definitions (single source of truth)
- Create `src/rpc/discord/commands.ts` exporting a typed array of command definitions and helpers for registration + runtime handling.
- Commands list:
  - `status` (no options)
  - `logs` options: integer `n` (1–500, default 100)
  - `portfolio` (no options)
  - `positions` (no options)
  - `position` options: integer `id` (required, with autocomplete)
  - `close` options: integer `id` (required, with autocomplete, guarded)
  - `close-all` (no options, guarded)

3) Registration Script
- Add `scripts/register-discord-commands.ts` using `@discordjs/rest` to upsert commands to the configured guild.
- CLI script in `package.json`: `pnpm discord:register:guild` (and optional `discord:register:global`).
- Reference: Application Commands API [Discord Application Commands](https://discord.com/developers/docs/interactions/application-commands).

4) Bot Runtime
- Implement `startDiscordBot(params)` in `src/rpc/discord-bot.ts`:
  - Construct a `Client` with `GatewayIntentBits.Guilds` only.
  - On `ready`, log success.
  - Handle `interactionCreate`:
    - If `isChatInputCommand()` → route by command name.
    - If `isAutocomplete()` → return suggestions for `position`/`close`.
  - Ephemeral initial responses (defer reply within 3s if needed). Reference: 3s initial response rule and ephemeral flags [Receiving and Responding](https://discord.com/developers/docs/interactions/receiving-and-responding).

5) Data Access & DRY helpers
- Reuse existing helpers from `src/utils/external-helpers.ts`:
  - `getPortfolioSummary(mode)` to compute Unrealized/Realized PnL and last-closed items.
  - `buildClosedPositionsSummaryMessage()` for `/portfolio` rendering.
- Logs: use `getLogTailSnapshot()` from `src/utils/logger.ts`; trim to last `n` lines (server-side split) and wrap in a code block.
- Status: compute RTDS status by checking `lastRtdsMessageTimeMs` staleness (e.g., idle > 60s = disconnected). Use DB counts for open positions and reuse `getPortfolioSummary` for PnL.
- Positions: query open positions, compute UPNL from `unrealizedPnlUsd`, and render a compact table (code block). Keep small width; show up to 100 rows; paginate later if needed.
- Position detail: join via `loadMetaForPosition(id)`; include tokenId, entry price avg, current price, unrealized PnL, leader and event link; add emojis.

6) Guarded Mutations
- Thread-safety: use the existing `IExecutionProvider` instance from `main-loop` by injecting it into `startDiscordBot`. Close operations call `executionProvider.closePosition({ positionId, reason: 'MANUAL', source: 'manual', ingestSource: 'manual' })`.
- Non-blocking: acknowledge with an ephemeral reply, then perform close; send follow-up ephemeral result (success/fail). Interaction token validity is 15 minutes—sufficient for follow-ups [Receiving and Responding](https://discord.com/developers/docs/interactions/receiving-and-responding).

7) Wire-up in Main Loop
- In `src/core/app/main-loop.ts`, after provider is ready and notifier/listeners registered, call `startDiscordBot({ executionProvider: provider, env, notifier })`. Ensure failures don’t crash the bot.

8) Metrics & Logging
- Log each command execution with timing and principal (Discord user). Keep logs concise.
- Emit counters via `incrementCounter('discord.command', { name: cmd })`.

9) Emojis & UX
- Use emojis for headings/status: ✅/🟥 for ok/fail, 📊 for stats, 🧮 for PnL, 📜 for logs, 🔧 for actions.
- Ephemeral replies by default to avoid channel noise. Offer a `public` boolean option later if needed.

10) Rate limits + Perf
- Autocomplete queries: limit to 20 suggestions and short labels (`"#123 · UPNL +1.23 USDC"`). Discord overall command content must stay under 8000 chars [Slash command limits](https://discord.com/developers/docs/interactions/application-commands#slash-commands).
- Defer initial replies when DB queries might exceed ~500ms; edit the reply when ready.

### 💻 Specs

Models / Schemas (no DB migrations needed)
- We reuse existing tables. Optionally, add a covering index later if `/positions` proves slow.

Classes
- `DiscordCommandRegistrar`
  - Purpose: Register commands to guild or global.
  - Methods:
    - `registerGuildCommands(appId: string, guildId: string, token: string, defs: RESTPostAPIApplicationCommandsJSONBody[]): Promise<void>`
    - `registerGlobalCommands(appId: string, token: string, defs: RESTPostAPIApplicationCommandsJSONBody[]): Promise<void>`

Functions (typed)
```ts
// src/rpc/discord/commands.ts
export type CommandName = 'status' | 'logs' | 'portfolio' | 'positions' | 'position' | 'close' | 'close-all';

export interface CommandContext {
    mode: import('@/core/domain/execution').ExecutionMode;
    executionProvider: import('@/core/domain/execution').IExecutionProvider;
}

export interface AutocompleteItem { name: string; value: number; }

export function buildSlashCommandDefs(): import('discord-api-types/v10').RESTPostAPIApplicationCommandsJSONBody[];
export function handleCommand(name: CommandName, options: Record<string, unknown>, ctx: CommandContext): Promise<{ content: string; ephemeral?: boolean }>;
export function handleAutocomplete(name: CommandName, focused: string, ctx: CommandContext): Promise<AutocompleteItem[]>;
```

Library Calls (Discord)
```ts
// Client runtime
import { Client, GatewayIntentBits, Partials, Interaction, AutocompleteInteraction, ChatInputCommandInteraction } from 'discord.js';

const client = new Client({ intents: [GatewayIntentBits.Guilds] });
client.on('ready', () => logger.success({ tag: 'discord-bot' }, 'Discord bot ready'));
client.on('interactionCreate', async (interaction: Interaction) => { /* route */ });
await client.login(process.env.DISCORD_BOT_TOKEN!);
```

```ts
// Registration via REST
import { REST, Routes } from 'discord.js';
const rest = new REST({ version: '10' }).setToken(token);
await rest.put(Routes.applicationGuildCommands(appId, guildId), { body: defs });
// For global:
await rest.put(Routes.applicationCommands(appId), { body: defs });
```

API Contracts (Discord)
- Slash commands and interactions per official docs: [Application Commands](https://discord.com/developers/docs/interactions/application-commands), [Receiving & Responding](https://discord.com/developers/docs/interactions/receiving-and-responding), [Autocomplete](https://discord.com/developers/docs/interactions/application-commands#autocomplete).
- Timeouts: initial response within 3s; tokens valid 15m for follow-ups.

Config & Feature Flags
- `DISCORD_BOT_TOKEN` (string, required to start bot). Example: `"Bot x.y.z"` token.
- `DISCORD_APP_ID` (string, required for registration).
- `DISCORD_GUILD_ID` (string, recommended for fast dev updates).

Observability
- Counters: `discord.command` { name }, `discord.autocomplete` { name }, `discord.error` { name }.
- Logs include latency and rows returned for DB-heavy calls.

Security
- Validate `n` for `/logs` (1–500). Validate `id` is numeric and belongs to current `mode` when acting.

Perf
- Autocomplete limited to 20 results; DB queries indexed fields.
- Use deferred replies for long ops.

### 📂 Files Involved

🟦 TO READ AND UNDERSTAND FIRST
- `/home/probi/swe/repo/polymarket-copy-bot/src/core/app/main-loop.ts` — wiring point to start the bot.
- `/home/probi/swe/repo/polymarket-copy-bot/src/utils/logger.ts` — getLogTailSnapshot.
- `/home/probi/swe/repo/polymarket-copy-bot/src/utils/external-helpers.ts` — portfolio summary helpers.
- `/home/probi/swe/repo/polymarket-copy-bot/src/core/data-ingestion/polymarket-rtds.ts` — `lastRtdsMessageTimeMs` for RTDS status.
- `/home/probi/swe/repo/polymarket-copy-bot/src/core/store/schema.ts` — position and related tables.

🟨 MODIFY
- `/home/probi/swe/repo/polymarket-copy-bot/package.json` — add deps and scripts (register commands).
- `/home/probi/swe/repo/polymarket-copy-bot/src/core/app/main-loop.ts` — call `startDiscordBot(...)` after provider ready.
- `/home/probi/swe/repo/polymarket-copy-bot/.env.*` — add new envs.

🟩 CREATE
- `/home/probi/swe/repo/polymarket-copy-bot/src/rpc/discord/commands.ts` — command defs/handlers.
- `/home/probi/swe/repo/polymarket-copy-bot/src/rpc/discord-bot.ts` — gateway client and router.
- `/home/probi/swe/repo/polymarket-copy-bot/scripts/register-discord-commands.ts` — one-off command registrar.

🟥 DELETE
- None.

### 🧭 Optional Visuals

```mermaid
sequenceDiagram
  participant User
  participant Discord
  participant Bot
  participant DB
  User->>Discord: /position id:123
  Discord->>Bot: InteractionCreate (3s window)
  Bot->>Discord: deferReply(ephemeral)
  Bot->>DB: select position + meta + current price
  DB-->>Bot: rows
  Bot->>Discord: editReply(details)
```

### 🌐 Helpful Tool Results (as tool’s session_id)
- Discord docs fetch: `smart_fetch_url_multiple/we_need_authoritative_details_for_discord_slash_commands_responses_and_autocomplete_to_write_an_accurate_plan_with_citations/z8ykatabeo`

### 📚 References
- Discord Application Commands (Slash Commands): https://discord.com/developers/docs/interactions/application-commands
- Receiving and Responding to Interactions (timeouts, ephemeral, followups): https://discord.com/developers/docs/interactions/receiving-and-responding
- Autocomplete: https://discord.com/developers/docs/interactions/application-commands#autocomplete

Why these: Official Discord developer docs ensure correct, current contracts and limits.

### ▶️ Plan Summary

1. Add `discord.js` + REST deps and env vars; register commands to guild.
2. Implement typed command defs, autocomplete, and handlers (DRY helpers reused).
3. Wire `startDiscordBot` into `main-loop` with injected `executionProvider` and `mode` context.
4. Implement guarded `/close` and `/close-all`; make replies ephemeral with emojis and tables.
5. Log/metrics for observability; keep all operations non-blocking and within 3s initial response.

### 🔴 IMPORTANT REMINDERS
- Initial reply within 3 seconds; use deferral if needed.
- Keep autocomplete to ≤20 items and concise labels.
- Protect close commands via user allowlist; default deny if not configured.
- Don’t block execution critical paths; bot runs independently and uses short DB queries.

]]>
</file>
<file path=".dev/md/plans/2025/10/07/do not change.md">
<![CDATA[
<|PLAN_FORMAT_START|>
# Plan: Discord Bot with Slash Commands, Autocomplete, and Portfolio Controls

## 👤 User's Original Message
Original User Message:
```txt
/PLAN_X 

- [ ]  Add Discord Bot (Important: Include emojis for UI and UX | Ensure you use the Discord Slash Commands API that has autocompletes for UX - not manual slash commands | Ensure DRY in code)
    - [ ]  /status - Returns bot states such as essential statuses like RTDS status (is connected/disconnected), WS statuses, Num Current Open Positions, Current Unrealized PnL, Lifetime Realized PnL
    - [ ]  /logs [n] - Returns last n lines of human logs
    - [ ]  /portfolio - Same as portfolio summary
    - [ ]  /positions - Returns all current running positions, table formatted
        - [ ]  Cols: ID, UPNL
    - [ ]  /position [id] - Returns position details. Format is same as Position Opened from Discord Webhook, but include token id/asset id below Market Link, and include Entry Price (Avg) below Entry Price, and include Current Price below Entry Price (Avg), and include Unrealized PNL below Current Price
    - [ ]  /close [id] - Force close pos by id
    - [ ]  /close-all - Force close all running pos
```

## Proposed Plan

### ❌ Critical Information Needed
None blocking. We can safely proceed with guild-scoped commands first to avoid global propagation delays.

### ⚠️ Initial Best Assumptions to Address Ambiguities
1. MODERATE: Discord bot token and application (client) ID will be provided via env. -> We'll add validated env vars and guard startup.
2. MODERATE: Commands will be registered per-guild in `local/test` envs and optionally globally for production. -> Provide scripts for both.
3. MODERATE: Max log lines `n` default to 50 if omitted; cap to 500 for safety. -> Prevent spam and meet UX.

### ☁️ Current State
1. TypeScript Node service with strict typing; pnpm; dotenvx; Drizzle PostgreSQL; main entry `src/index.ts` -> `run()` in `src/core/app/main-loop.ts`.
2. Discord Webhook notifications already exist in `src/notify/discord-webhook.ts` and listeners in `src/notify/listeners.ts`.
3. Utilities available:
   - `getLogTailSnapshot()` in `src/utils/logger.ts` for logs
   - Portfolio helpers in `src/utils/external-helpers.ts`: `getPortfolioSummary`, `buildClosedPositionsSummaryMessage`, `loadMetaForPosition`
4. Placeholder file `src/rpc/discord-bot.ts` (empty) ready for bot implementation.

### 🌟 Desired Goal State
1. Slash-command Discord bot running inside the same process as the main app (optional toggle), exposing:
   - `/status`, `/logs`, `/portfolio`, `/positions`, `/position`, `/close`, `/close-all`
2. Autocomplete UX for `/position` (id argument) and for `/logs n` numeric helper.
3. Responses use embeds, emojis, ephemeral responses where appropriate, and follow DRY helpers.
4. Commands registered per-guild in dev; script available for global production registration.

### 🛣️ Brainstorm Implementation Approaches
* Approach 1: Use discord.js v14 Client + REST registerer in-process.
  - Pros: Mature, typed, great docs; easy Autocomplete; resilient.
  - Cons: Adds dependency; needs gateway connection.
* Approach 2: Raw Discord REST/websocket implementation.
  - Pros: Minimal deps.
  - Cons: Reinventing client; higher maintenance.
* Approach 3: Separate microservice.
  - Pros: Isolation.
  - Cons: Extra infra, complexity.

Chosen Approach: 1 — discord.js v14 in-process for fastest delivery, rich features, and typings.

Rollback: Feature flag to disable the Discord bot without code removal; no DB migrations.

### 🗺️ Very Detailed Plan
1. Dependencies and env
   - Add `discord.js` and `@discordjs/rest`, `discord-api-types` to deps.
   - Env vars (validated in `src/core/config/env.ts`):
     - `DISCORD_BOT_TOKEN` (string, required when ENABLE_DISCORD_BOT=true)
     - `DISCORD_APP_ID` (string)
     - `DISCORD_GUILD_IDS` (comma-separated list for dev registration)
     - `ENABLE_DISCORD_BOT` (boolean; default false)
   - Rationale: Required to login a gateway client and register commands.

2. Command registration script (non-interactive CLI)
   - Create `scripts/discord-register-commands.ts`:
     - Reads commands built in `src/rpc/discord-bot.ts` (export JSON defs)
     - Uses REST `PUT` routes for guild(s) during local; global for production
     - Per docs: Register via HTTP; upsert behavior [Application Commands](https://discord.com/developers/docs/interactions/application-commands#registering-a-command). Limit: 25 options per command.

3. Bot runtime integration
   - Implement `src/rpc/discord-bot.ts`:
     - Export `startDiscordBot(env, deps): { stop(): Promise<void> }`
     - Inside: create `Client` with intents `Guilds` only; hook `interactionCreate`.
       - Autocomplete: detect `interaction.isAutocomplete()` and return suggestions.
       - Commands: detect `interaction.isChatInputCommand()` and route.
       - Use `interaction.reply({ embeds, flags: MessageFlags.Ephemeral })` for ephemeral where useful. `ephemeral` is deprecated; use `flags` [InteractionReplyOptions](https://discord.js.org/docs/packages/discord.js/stable/InteractionReplyOptions:Interface).

4. DRY helper layer for embeds and formatting
   - Create `src/rpc/discord/ui.ts`:
     - `embed(title, fields, color)` returning APIEmbed
     - Emoji constants; table builder for monospaced columns
     - `formatPositionDetails()` reusing `loadMetaForPosition` and helpers from `utils/external-helpers`

5. Implement commands
   - `/status`
     - Show: RTDS status (connected/disconnected) via `lastRtdsMessageTimeMs` age from `src/core/data-ingestion/polymarket-rtds.ts`, open positions count (DB), unrealized/realized via `getPortfolioSummary`.
   - `/logs n?`
     - Optional integer with autocomplete (suggest 25, 50, 100, 200, 500). Use `getLogTailSnapshot(maxChars)` and slice to n lines; return as code block. Cap n to 500.
   - `/portfolio`
     - Use `getPortfolioSummary` + `buildClosedPositionsSummaryMessage`, post embed.
   - `/positions`
     - Query open positions for current mode; render table with columns: ID, UPNL (current unrealized per position), include emojis.
   - `/position id`
     - Autocomplete id from recent open/closed positions; show embed: Market Link, Token/Asset ID, Entry Price, Entry Price (Avg), Current Price, Unrealized PnL.
   - `/close id`
     - Calls provider.closePosition with reason `MANUAL`, source `manual`.
   - `/close-all`
     - Iterate open positions; call closePosition with reason `MANUAL`.
   - All DB access via existing schema; mode aware (dry_run/live).

6. Autocomplete behavior
   - Use Discord Autocomplete per spec (focused option true; choices cannot co-exist) [Autocomplete](https://discord.com/developers/docs/interactions/application-commands#autocomplete).
   - `/position id` -> suggest top 25 open position IDs by recency; `/logs n` -> suggest list [25,50,100,200,500].

7. Safety, limits, and UX
   - Ephemeral responses for `/logs` and `/close*`; non-ephemeral for portfolio summaries.
   - Guard long outputs with truncation; log dev-only warnings when truncating.
   - Emojis: ✅/🟥/✳️/📈/📉/🧮/🧰 for sections.

8. Wire into main-loop
   - In `src/core/app/main-loop.ts`, after bot started event, conditionally start Discord bot if `ENABLE_DISCORD_BOT` true. Reuse notifier fields in logs, but keep separate.

9. Scripts
   - Add pnpm scripts:
     - `discord:register:guild` (per env GUILD_IDS)
     - `discord:register:global`
     - `discord:dev` (run bot with app)

10. Rollback
   - Set `ENABLE_DISCORD_BOT=false` to disable. Commands can remain registered; no runtime impact.

Traceability bullets:
- Slash commands + autocomplete → steps 2–6
- Status/logs/portfolio/positions/position/close/close-all → step 5
- Emojis, embeds, UX → steps 4–5,7
- DRY → step 4

### 💻 Specs

Models / Schemas: no DB schema changes.

Classes
```ts
// src/rpc/discord-bot.ts
export interface DiscordBotDeps {
    getMode(): 'dry_run' | 'live';
    closePosition(args: { positionId: number }): Promise<void>;
}
export function startDiscordBot(env: Env, deps: DiscordBotDeps): Promise<{ stop(): Promise<void> }>; // starts client, registers handlers
```

Functions
```ts
// src/rpc/discord/ui.ts
export function buildEmbed(params: { title: string; description?: string; fields?: { name: string; value: string; inline?: boolean }[]; color?: number }): APIEmbed;
export function table(columns: string[], rows: string[][]): string; // returns monospaced table inside ```
export function positionDetailEmbed(positionId: number): Promise<APIEmbed>; // uses loadMetaForPosition, DB reads
```

Libraries Involved
- discord.js v14 — Client, events, embed building, interaction replies [(Client)](https://discord.js.org/docs/packages/discord.js/stable/Client:Class)
- Discord Dev Portal — command registration/Autocomplete [(Application Commands)](https://discord.com/developers/docs/interactions/application-commands), [(Autocomplete)](https://discord.com/developers/docs/interactions/application-commands#autocomplete)

API Call Snippets
```ts
// Register per-guild
await rest.put(
  Routes.applicationGuildCommands(appId, guildId),
  { body: commands }
);

// Global
await rest.put(
  Routes.applicationCommands(appId),
  { body: commands }
);
```

Reply Options
```ts
// Ephemeral reply in v14: prefer flags
await interaction.reply({
  content: 'Done',
  flags: MessageFlags.Ephemeral,
});
```

Config & Feature Flags
```ts
// src/core/config/env.ts additions
DISCORD_BOT_TOKEN: z.string().optional(),
DISCORD_APP_ID: z.string().optional(),
DISCORD_GUILD_IDS: z.string().optional(), // comma list
ENABLE_DISCORD_BOT: z.string().optional().transform(v => v ? v.toLowerCase() === 'true' : false),
```

Observability
- Counters: `discord.commands.invoked`, `discord.commands.error`
- Logs around registration and interaction handling.

### 📂 Files Involved

🟦 TO READ FIRST
- `/home/probi/swe/repo/polymarket-copy-bot/src/utils/logger.ts` — logs snapshot helper
- `/home/probi/swe/repo/polymarket-copy-bot/src/utils/external-helpers.ts` — portfolio and meta helpers
- `/home/probi/swe/repo/polymarket-copy-bot/src/core/app/main-loop.ts` — startup wiring

🟨 MODIFY
- `/home/probi/swe/repo/polymarket-copy-bot/src/core/config/env.ts` — add envs
- `/home/probi/swe/repo/polymarket-copy-bot/src/core/app/main-loop.ts` — start bot when enabled
- `/home/probi/swe/repo/polymarket-copy-bot/package.json` — add scripts and deps

🟩 CREATE
- `/home/probi/swe/repo/polymarket-copy-bot/src/rpc/discord-bot.ts` — bot runtime
- `/home/probi/swe/repo/polymarket-copy-bot/src/rpc/discord/ui.ts` — embeds/tables DRY
- `/home/probi/swe/repo/polymarket-copy-bot/scripts/discord-register-commands.ts` — registration CLI

🟥 DELETE
- None

### 🧭 Optional Visuals

```mermaid
sequenceDiagram
    participant User
    participant Discord
    participant Bot
    participant DB
    User->>Discord: /position 123
    Discord->>Bot: interactionCreate (ChatInput)
    Bot->>DB: loadMetaForPosition(123)
    DB-->>Bot: meta, prices, pnl
    Bot-->>Discord: reply embed (non-ephemeral)
```

### 🌐 Helpful Tool Results (as tool’s session_id)
- Docs: smart_fetch_url_multiple/fetch_official_docs_pages_to_cite_and_ensure_correct_apis_for_discord_slash_commands_deployment_and_autocomplete/mp69lsskz8
- Docs: smart_fetch_url_multiple/collect_official_docs_citations_for_implementing_discord_slash_commands_autocomplete_and_reply_flags_in_discord_js_v14_and_discord_dev_portal/j5yw1fqqgx
- Repo scan: codebase_search/find_existing_placeholders_or_integration_points_for_discord_bot/gvmpzsdxt4
- Repo scan: codebase_search/locate_functions_for_logs_and_portfolio_summary/94tytxcxjo

### 📚 References
- Discord Application Commands (Slash, Autocomplete, Limits): https://discord.com/developers/docs/interactions/application-commands
- discord.js InteractionReplyOptions (ephemeral flags): https://discord.js.org/docs/packages/discord.js/stable/InteractionReplyOptions:Interface
- discord.js Client interactionCreate event: https://discord.js.org/docs/packages/discord.js/stable/Client:Class

### ▶️ Plan Summary
1. Add envs + dependencies; create registration script.
2. Implement `startDiscordBot` with handlers for ChatInput and Autocomplete.
3. Build DRY UI helpers and all requested commands.
4. Wire the bot under a feature flag; add pnpm scripts for registration.
5. Deploy guild-scoped in dev; optional global in prod.

### 🔴 IMPORTANT REMINDERS
- Don’t mix `choices` with `autocomplete` on the same option (Discord spec).
- Use `flags: MessageFlags.Ephemeral` in replies, not deprecated `ephemeral`.
- Cap outputs and use ephemeral for sensitive responses.
<|PLAN_FORMAT_END|>

]]>
</file>
<file path="scripts/register-discord-commands.ts">
<![CDATA[
import { loadDiscordEnv } from '@/core/config/env-discord';
import { buildSlashCommandDefs } from '@/rpc/discord/discord-commands';
import { createLogger } from '@/utils/telemetry/logger';

const logger = createLogger({ tag: 'discord.register' });

async function sleep(ms: number): Promise<void> {
    await new Promise((resolve) => setTimeout(resolve, ms));
}

async function putRawJson(url: string, token: string, payloadJson: string, label: string): Promise<void> {
    let attempts = 0;
    while (true) {
        const res = await fetch(url, {
            method: 'PUT',
            headers: {
                'Content-Type': 'application/json',
                Authorization: `Bot ${token}`,
            },
            body: payloadJson,
        });
        if (res.status === 429) {
            const h1 = res.headers.get('retry-after');
            const h2 = res.headers.get('x-ratelimit-reset-after');
            const retryMs = Math.max(0, Math.ceil(parseFloat(h1 ?? h2 ?? '1') * 1000));
            attempts += 1;
            logger.warn({ label, attempts, retryMs }, 'rate_limited_retry');
            if (attempts > 5) {
                throw new Error(`Discord rate limit: exceeded retries for ${label}`);
            }
            await sleep(retryMs);
            continue;
        }
        if (!res.ok) {
            const body = await res.text();
            throw new Error(`Discord API error (${label}): ${res.status} ${body}`);
        }
        return;
    }
}

async function main(): Promise<void> {
    const env = loadDiscordEnv();
    const scopeArg = process.argv.find((a) => a.startsWith('--scope=')) ?? '--scope=guild';
    const scope = scopeArg.split('=')[1] ?? 'guild';

    const token = env.DISCORD_BOT_TOKEN;
    const appId = env.DISCORD_APP_ID;
    const guildId = env.DISCORD_GUILD_ID;
    const channelId = env.DISCORD_CHANNEL_ID;

    if (!token) throw new Error('DISCORD_BOT_TOKEN is required');
    if (!appId) throw new Error('DISCORD_APP_ID is required');

    // Preflight: verify token belongs to the specified application
    const meRes = await fetch('https://discord.com/api/v10/users/@me', {
        method: 'GET',
        headers: { Authorization: `Bot ${token}` },
    });
    if (!meRes.ok) {
        const body = await meRes.text();
        throw new Error(`Discord token validation failed: ${meRes.status} ${body}`);
    }
    const me = (await meRes.json()) as { id?: string } | unknown;
    const userId = (me as any)?.id ? String((me as any).id) : undefined;
    if (!userId) {
        throw new Error('Discord token validation succeeded but no user id returned');
    }
    if (String(userId) !== String(appId)) {
        throw new Error(
            `Bot token user id does not match DISCORD_APP_ID. token.userId=${userId} env.DISCORD_APP_ID=${String(appId)}`
        );
    }

    const defs = buildSlashCommandDefs();

    let url: string;
    if (scope === 'global') {
        url = `https://discord.com/api/v10/applications/${appId}/commands`;
    } else {
        if (!guildId) throw new Error('DISCORD_GUILD_ID is required for guild scope');
        url = `https://discord.com/api/v10/applications/${appId}/guilds/${guildId}/commands`;
    }

    // Force wipe using bulk overwrite (minimizes requests and avoids 429s)
    try {
        const globalUrl = `https://discord.com/api/v10/applications/${appId}/commands`;
        const guildUrl = guildId
            ? `https://discord.com/api/v10/applications/${appId}/guilds/${guildId}/commands`
            : undefined;
        logger.info('Wiping all global commands via bulk overwrite');
        await putRawJson(globalUrl, token, '[]', 'wipe_global');
        if (guildUrl) {
            logger.info({ guildId }, 'Wiping all guild commands via bulk overwrite');
            await putRawJson(guildUrl, token, '[]', 'wipe_guild');
        }
        logger.success('Command wipe completed');
    } catch (wipeErr) {
        logger.warn({ err: wipeErr }, 'wipe_commands_warning');
    }

    logger.info({ scope, url, count: defs.length }, 'Upserting Discord application commands');
    await putRawJson(url, token, JSON.stringify(defs), 'upsert_commands');
    logger.success('Commands registered');
}

main().catch((err) => {
    logger.error({ err }, 'register_commands_failed');
    process.exit(1);
});

]]>
</file>
<file path="src/notify/discord-webhook.ts">
<![CDATA[
import { z } from 'zod';
import { createLogger } from '@/utils/telemetry/logger';

const logger = createLogger({ tag: 'discord-webhook' });

const FieldSchema = z.object({
    name: z.string(),
    value: z.string(),
    inline: z.boolean().optional(),
});
const MessageSchema = z.object({
    title: z.string(),
    description: z.string().optional(),
    fields: z.array(FieldSchema).optional(),
    color: z.number().int().optional(),
});

export class DiscordWebhookNotifier {
    private readonly webhookUrl: string | undefined;
    private static readonly TIMEOUT_MS = 1500;
    constructor(webhookUrl: string | undefined) {
        this.webhookUrl = webhookUrl;
    }

    async sendMessage(payload: {
        title: string;
        description?: string;
        fields?: { name: string; value: string; inline?: boolean }[];
        color?: number;
    }): Promise<void> {
        // Fire-and-forget: schedule and resolve immediately to avoid blocking callers
        setTimeout(() => {
            void (async () => {
                try {
                    const parsed = MessageSchema.safeParse(payload);
                    if (!parsed.success) {
                        logger.warn(
                            { err: parsed.error.message, title: payload.title },
                            'Discord payload validation failed'
                        );
                        return;
                    }
                    if (!this.webhookUrl) {
                        logger.debug(
                            { title: payload.title },
                            'Discord webhook not configured; skipping send'
                        );
                        return; // silently noop if not configured
                    }
                    const body = {
                        embeds: [
                            {
                                title: payload.title,
                                description: payload.description,
                                fields: payload.fields,
                                color: payload.color,
                            },
                        ],
                    };
                    const controller = new AbortController();
                    const timer = setTimeout(
                        () => controller.abort(),
                        DiscordWebhookNotifier.TIMEOUT_MS
                    );
                    try {
                        logger.debug({ title: payload.title }, 'Sending Discord webhook');
                        const res = await fetch(this.webhookUrl, {
                            method: 'POST',
                            headers: { 'Content-Type': 'application/json' },
                            body: JSON.stringify(body),
                            signal: controller.signal,
                        });
                        if (!res.ok) {
                            logger.warn(
                                { status: res.status, title: payload.title },
                                'Discord webhook returned non-OK'
                            );
                        } else {
                            logger.success({ title: payload.title }, 'Discord webhook sent');
                        }
                    } catch (err) {
                        logger.warn({ err, title: payload.title }, 'Discord webhook send failed');
                    } finally {
                        clearTimeout(timer);
                    }
                } catch (err) {
                    logger.warn({ err, title: payload.title }, 'Discord sendMessage error');
                }
            })();
        }, 0);
        return;
    }
}

]]>
</file>
<file path="src/utils/safe-enc-dec.ts">
<![CDATA[
import { randomBytes, scryptSync, createCipheriv, createDecipheriv } from "node:crypto";

const ALGORITHM = "aes-256-gcm" as const;
const SALT_LENGTH = 16;
const IV_LENGTH = 12;
const KEY_LENGTH = 32;
const TAG_LENGTH = 16;
const VERSION_PREFIX = "v1.";
const APP_ENC_PP = "polymarket-copy-bot-4fea1f8f10940f33bcfea88a65d383d61fddd79d"  // DO NOT CHANGE THIS!

type EncParams = { text: string; pp: string };
type DecParams = { enc: string; pp: string };

export function enc({ text, pp }: EncParams): string {
    if (typeof text !== "string") {
        throw new TypeError("text must be a string");
    }
    if (typeof pp !== "string" || pp.length === 0) {
        throw new TypeError("pp must be a non-empty string");
    }

    const salt = randomBytes(SALT_LENGTH);
    const key = scryptSync(Buffer.from(pp, "utf8"), salt, KEY_LENGTH);
    const iv = randomBytes(IV_LENGTH);

    const cipher = createCipheriv(ALGORITHM, key, iv);
    const ciphertext = Buffer.concat([cipher.update(Buffer.from(text, "utf8")), cipher.final()]);
    const authTag = cipher.getAuthTag();

    // payload layout: [salt | iv | tag | ciphertext]
    const payload = Buffer.concat([salt, iv, authTag, ciphertext]);
    return VERSION_PREFIX + payload.toString("base64");
}

export function dec({ enc: enced, pp }: DecParams): string {
    if (typeof enced !== "string" || !enced.startsWith(VERSION_PREFIX)) {
        throw new TypeError("invalid enced payload format");
    }
    if (typeof pp !== "string" || pp.length === 0) {
        throw new TypeError("pp must be a non-empty string");
    }

    const payloadB64 = enced.slice(VERSION_PREFIX.length);
    const payload = Buffer.from(payloadB64, "base64");

    if (payload.length < SALT_LENGTH + IV_LENGTH + TAG_LENGTH) {
        throw new Error("enced payload too short");
    }

    const salt = payload.subarray(0, SALT_LENGTH);
    const iv = payload.subarray(SALT_LENGTH, SALT_LENGTH + IV_LENGTH);
    const tagStart = SALT_LENGTH + IV_LENGTH;
    const authTag = payload.subarray(tagStart, tagStart + TAG_LENGTH);
    const ciphertext = payload.subarray(tagStart + TAG_LENGTH);

    const key = scryptSync(Buffer.from(pp, "utf8"), salt, KEY_LENGTH);
    const decipher = createDecipheriv(ALGORITHM, key, iv);
    decipher.setAuthTag(authTag);

    const plaintext = Buffer.concat([decipher.update(ciphertext), decipher.final()]);
    return plaintext.toString("utf8");
}

export function appEnc(text: string) {
    return enc({ text, pp: APP_ENC_PP });
}

export function appDec(enc: string) {
    return dec({ enc: enc, pp: APP_ENC_PP });
}
]]>
</file>
<file path="tests/integration/dry-run-inventory.test.ts">
<![CDATA[
import { describe, it, beforeEach, afterEach, beforeAll, expect } from 'vitest';

// IMPORTANT: Ensure DATABASE_URL points to a test database BEFORE importing db
// The project resolves aliases like @/ via tsconfig paths
import { db } from '@/core/store/db';
import { positionTable, copyOrderTable } from '@/core/store/schema';
import { DiscordWebhookNotifier } from '@/notify/discord-webhook';
import { Executor } from '@/core/exec/executor';
import { DryRunExecutionProvider } from '@/core/exec/providers/dry-run-execution-provider';
import type { LeaderConfig } from '@/core/config/config';
import type { TradeFeedMessage } from '@/core/domain/trade';
import { and, eq } from 'drizzle-orm';
import type { Address } from '@/core/domain/common';
import { resetDb } from '../test-helpers';

function createExecutorForTest(leaders: LeaderConfig[]): Executor {
    const provider = new DryRunExecutionProvider();
    const notifier = new DiscordWebhookNotifier(undefined);
    return new Executor({
        executionProvider: provider,
        discord: notifier,
        maxSlippageBps: 50,
        globalMaxPositions: 9999,
        leaders,
        orderType: 'FOK',
        globalMaxUsdcInvested: 1_000_000,
        orderThrottleMs: 0,
        buyPriceBlockLimit: 0.96,
    });
}

function trade(params: Partial<TradeFeedMessage>): TradeFeedMessage {
    return {
        asset: params.asset ?? 'token:TEST',
        bio: '',
        conditionId: params.conditionId ?? '0xcond',
        eventSlug: '',
        icon: '',
        name: '',
        outcome: params.outcome ?? 'Yes',
        outcomeIndex: 0,
        price: params.price ?? 0.5,
        profileImage: '',
        proxyWallet: params.proxyWallet ?? ('0x1111111111111111111111111111111111111111' as Address),
        pseudonym: '',
        side: params.side ?? 'BUY',
        size: params.size ?? 2,
        slug: '',
        timestamp: params.timestamp ?? Math.floor(Date.now() / 1000),
        title: '',
        transactionHash: params.transactionHash ?? `0x${Math.random().toString(16).slice(2).padEnd(64, '0')}`,
        ingestSource: params.ingestSource ?? 'sim',
        receivedAtMs: Date.now(),
    };
}

const TEST_LEADER = '0x1111111111111111111111111111111111111111' as Address;

const testLeaderCfg: LeaderConfig = {
    address: TEST_LEADER,
    displayName: 'Test Leader',
    maxPositions: 100,
    // Mirror trade.size 1:1 to amountUsdc for deterministic sizing in tests
    positionSizeUsdc: { kind: 'mirror_1to1' },
    positionExpiryMs: 60_000,
    categoriesAllowed: undefined,
    outcomesAllowed: undefined,
    copySidesAllowed: undefined,
};

beforeAll(() => {
    process.env.ERROR_LOG_ENABLED = 'false';
});

beforeEach(async () => {
    await resetDb();
});

afterEach(async () => {
    // Allow async eventBus/discord timers to settle before cleaning DB
    await new Promise((r) => setTimeout(r, 1));
    await resetDb();
});

describe('Dry run execution inventory netting & aggregation', () => {
    
    // Given: two BUY trades same token
    // When: they are processed
    // Then: only one open long exists with weighted-average entry
    it('aggregates multiple BUYs into a single open position with weighted average', async () => {
        // Given: empty DB, a leader, and two BUY trades on the same token
        const executor = createExecutorForTest([testLeaderCfg]);
        const tokenId = 'token:AGG';
        const t1 = trade({ proxyWallet: TEST_LEADER, asset: tokenId, side: 'BUY', size: 2, price: 0.20 });
        const t2 = trade({ proxyWallet: TEST_LEADER, asset: tokenId, side: 'BUY', size: 3, price: 0.40, timestamp: t1.timestamp + 1, transactionHash: '0x' + 'b'.repeat(64) });

        // When: handle both trades sequentially
        await executor.handleLeaderTrade(t1);
        await executor.handleLeaderTrade(t2);

        // Then: one open position exists; amountUsdc = 5; shares computed with BUY slippage (+0.5%)
        const rows = await db
            .select()
            .from(positionTable)
            .where(and(eq(positionTable.tokenId, tokenId), eq(positionTable.status, 'open')));
        expect(rows.length).toBe(1);
        const pos = rows[0]!;
        const sl = 0.005;
        const s1 = 2 / (0.20 * (1 + sl));
        const s2 = 3 / (0.40 * (1 + sl));
        const expectedShares = s1 + s2;
        const expectedAvg = 5 / expectedShares;
        expect(Number(pos.amountUsdc)).toBeCloseTo(5, 6);
        expect(Number(pos.sizeShares)).toBeCloseTo(expectedShares, 6);
        // Weighted-average price should be tracked in entryPriceAvg (entryPrice is the very first fill)
        expect(Number((pos as any).entryPriceAvg)).toBeCloseTo(expectedAvg, 6);
        // And entryPrice should remain the initial fill price (with BUY slippage applied)
        const firstEntry = 0.20 * (1 + sl); // 0.201
        expect(Number(pos.entryPrice)).toBeCloseTo(firstEntry, 6);
    });

    // Given: an open BUY exists
    // When: SELL for smaller notional arrives
    // Then: long is reduced (not closed), no new short is opened
    it('SELL reduces an existing BUY (partial reduce keeps open)', async () => {
        // Given: an open long created by a BUY
        const executor = createExecutorForTest([testLeaderCfg]);
        const tokenId = 'token:REDUCE';
        const buy = trade({ proxyWallet: TEST_LEADER, asset: tokenId, side: 'BUY', size: 10, price: 0.50, transactionHash: '0x' + 'c'.repeat(64) });
        await executor.handleLeaderTrade(buy);

        // When: a SELL arrives with amount less than inventory
        const sell = trade({ proxyWallet: TEST_LEADER, asset: tokenId, side: 'SELL', size: 5, price: 0.60, transactionHash: '0x' + 'd'.repeat(64), timestamp: buy.timestamp + 2 });
        await executor.handleLeaderTrade(sell);

        // Then: position remains open with reduced shares and updated amount (use slippage +/-0.5%)
        const rows = await db
            .select()
            .from(positionTable)
            .where(and(eq(positionTable.tokenId, tokenId), eq(positionTable.status, 'open')));
        expect(rows.length).toBe(1);
        const pos = rows[0]!;
        const sl = 0.005;
        const initialShares = 10 / (0.50 * (1 + sl));
        const reducedShares = 5 / (0.60 * (1 - sl));
        const expectedShares = initialShares - Math.min(initialShares, reducedShares);
        const avgEntry = 10 / initialShares;
        const expectedAmount = expectedShares * avgEntry;
        expect(Number(pos.sizeShares)).toBeCloseTo(expectedShares, 6);
        expect(Number(pos.amountUsdc)).toBeCloseTo(expectedAmount, 6);
        expect(String(pos.status)).toBe('open');

    });

    // Given: no inventory
    // When: SELL arrives
    // Then: request is skipped; no position or order is persisted
    it('SELL with no inventory creates no position', async () => {
        // Given: no positions for token
        const executor = createExecutorForTest([testLeaderCfg]);
        const tokenId = 'token:NOINV';

        // When: SELL arrives first
        const sell = trade({ proxyWallet: TEST_LEADER, asset: tokenId, side: 'SELL', size: 5, price: 0.30, transactionHash: '0x' + 'e'.repeat(64) });
        await executor.handleLeaderTrade(sell);

        // Then: there are no positions and no copy orders
        const posRows = await db
            .select()
            .from(positionTable)
            .where(eq(positionTable.tokenId, tokenId));
        expect(posRows.length).toBe(0);

        const coRows = await db
            .select()
            .from(copyOrderTable)
            .where(eq(copyOrderTable.desiredSide, 'SELL'));
        expect(coRows.length).toBe(0);

    });
});

]]>
</file>
</files>
<files>
<file path=".dev/docs/manual-poly-clob.ts">
<![CDATA[
`
POLYMARKET CLOB - CONCISE DOCS
==============================

TYPES
=====

import{SignatureType,SignedOrder}from"@polymarket/order-utils";import{AxiosRequestHeaders}from"axios";export interface ApiKeyCreds{key:string;secret:string;passphrase:string}export interface ApiKeyRaw{apiKey:string;secret:string;passphrase:string}export interface L2HeaderArgs{method:string;requestPath:string;body? :string}export interface L1PolyHeader extends AxiosRequestHeaders{POLY_ADDRESS:string;POLY_SIGNATURE:string;POLY_TIMESTAMP:string;POLY_NONCE:string}export interface L2PolyHeader extends AxiosRequestHeaders{POLY_ADDRESS:string;POLY_SIGNATURE:string;POLY_TIMESTAMP:string;POLY_API_KEY:string;POLY_PASSPHRASE:string}export declare enum Side{BUY="BUY",SELL="SELL"}export declare enum OrderType{GTC="GTC",FOK="FOK",GTD="GTD",FAK="FAK"}export interface PostOrdersArgs{order:SignedOrder;orderType:OrderType}export interface NewOrder<T extends OrderType>{readonlyorder:{readonlysalt:number;readonly maker:string;readonly signer:string;readonly taker:string;readonly tokenId:string;readonly makerAmount:string;readonly takerAmount:string;readonly expiration:string;readonly nonce:string;readonly feeRateBps:string;readonly side:Side;readonly signatureType:SignatureType;readonly signature:string};readonly owner:string;readonly orderType:T;readonly deferExec:boolean};export interface UserOrder{tokenID:string;price:number;size:number;side:Side;feeRateBps? :number;nonce? :number;expiration? :number;taker? :string}export interface UserMarketOrder{tokenID:string;price? :number;amount:number;side:Side;feeRateBps? :number;nonce? :number;taker? :string;orderType? :OrderType.FOK|OrderType.FAK}export interface OrderPayload{orderID:string}export interface ApiKeysResponse{apiKeys:ApiKeyCreds[]}export interface BanStatus{closed_only:boolean}export interface OrderResponse{success:boolean;errorMsg:string;orderID:string;transactionsHashes:string[];status:string;takingAmount:string;makingAmount:string}export interface OpenOrder{id:string;status:string;owner:string;maker_address:string;market:string;asset_id:string;side:string;original_size:string;size_matched:string;price:string;associate_trades:string[];outcome:string;created_at:number;expiration:string;order_type:string}export typeOpenOrdersResponse=OpenOrder[];export interface TradeParams{id? :string;maker_address? :string;market? :string;asset_id? :string;before? :string;after? :string}export interface OpenOrderParams{id? :string;market? :string;asset_id? :string}export interface MakerOrder{order_id:string;owner:string;maker_address:string;matched_amount:string;price:string;fee_rate_bps:string;asset_id:string;outcome:string;side:Side}export interface Trade{id:string;taker_order_id:string;market:string;asset_id:string;side:Side;size:string;fee_rate_bps:string;price:string;status:string;match_time:string;last_update:string;outcome:string;bucket_index:number;owner:string;maker_address:string;maker_orders:MakerOrder[];transaction_hash:string;trader_side:"TAKER"|"MAKER"}export declare enum Chain{POLYGON=137,AMOY=80002}export interface MarketPrice{t:number;p:number}export interface PriceHistoryFilterParams{market? :string;startTs? :number;endTs? :number;fidelity? :number;interval? :PriceHistoryInterval}export declare enum PriceHistoryInterval{MAX="max",ONE_WEEK="1w",ONE_DAY="1d",SIX_HOURS="6h",ONE_HOUR="1h"}export interface DropNotificationParams{ids:string[]}export interface Notification{type:number;owner:string;payload:any}export interface OrderMarketCancelParams{market? :string;asset_id? :string}export interface OrderBookSummary{market:string;asset_id:string;timestamp:string;bids:OrderSummary[];asks:OrderSummary[];min_order_size:string;tick_size:string;neg_risk:boolean;hash:string}export interface OrderSummary{price:string;size:string}export declare enum AssetType{COLLATERAL="COLLATERAL",CONDITIONAL="CONDITIONAL"}export interface BalanceAllowanceParams{asset_type:AssetType;token_id? :string}export interface BalanceAllowanceResponse{balance:string;allowance:string}export interface OrderScoringParams{order_id:string}export interface OrderScoring{scoring:boolean}export interface OrdersScoringParams{orderIds:string[]}export typeOrdersScoring={[orderId in string]:boolean};export typeCreateOrderOptions={tickSize:TickSize;negRisk? :boolean};export typeTickSize="0.1"|"0.01"|"0.001"|"0.0001";export interface RoundConfig{readonly price:number;readonly size:number;readonly amount:number}export interface TickSizes{[tokenId:string]:TickSize}export interface NegRisk{[tokenId:string]:boolean}export interface FeeRates{[tokenId:string]:number}export interface PaginationPayload{readonly limit:number;readonly count:number;readonly next_cursor:string;readonly data:any[]}export interface MarketTradeEvent{event_type:string;market:{condition_id:string;asset_id:string;question:string;icon:string;slug:string};user:{address:string;username:string;profile_picture:string;optimized_profile_picture:string;pseudonym:string};side:Side;size:string;fee_rate_bps:string;price:string;outcome:string;outcome_index:number;transaction_hash:string;timestamp:string}export interface BookParams{token_id:string;side:Side}export interface UserEarning{date:string;condition_id:string;asset_address:string;maker_address:string;earnings:number;asset_rate:number}export interface TotalUserEarning{date:string;asset_address:string;maker_address:string;earnings:number;asset_rate:number}export interface RewardsPercentages{[market:string]:number}export interface Token{token_id:string;outcome:string;price:number}export interface RewardsConfig{asset_address:string;start_date:string;end_date:string;rate_per_day:number;total_rewards:number}export interface MarketReward{condition_id:string;question:string;market_slug:string;event_slug:string;image:string;rewards_max_spread:number;rewards_min_size:number;tokens:Token[];rewards_config:RewardsConfig[]}export interface Earning{asset_address:string;earnings:number;asset_rate:number}export interface UserRewardsEarning{condition_id:string;question:string;market_slug:string;event_slug:string;image:string;rewards_max_spread:number;rewards_min_size:number;market_competitiveness:number;tokens:Token[];rewards_config:RewardsConfig[];maker_address:string;earning_percentage:number;earnings:Earning[]}

IMPORTANT: THIS IS NOT OUR CUSTOM DEFINED TYPE! To use Polymarket Clob Types, import from "@polymarket/clob-client":
import { OrderBookSummary } from "@polymarket/clob-client";

EXAMPLE 1
==========

await clobClient.getOrderBooks([{ token_id: "22131816317087462222441767751936061504662310118809793860064034214346537862051", side: Side.BUY }]);

[{"market":"0x6cb4d646f8a46b92d5201622c50ff6bf3a41556cf1059c20ba37c0cfbade1c13","asset_id":"22131816317087462222441767751936061504662310118809793860064034214346537862051","timestamp":"1759831913645","hash":"83c78a093583ce964bd8aebc2c01c76999e3bea4","bids":[{"price":"0.01","size":"1000"},{"price":"0.02","size":"460.05"},{"price":"0.03","size":"233.33"},{"price":"0.04","size":"10"},{"price":"0.06","size":"400"},{"price":"0.07","size":"384.14"},{"price":"0.08","size":"272.22"}],"asks":[{"price":"0.99","size":"1000"},{"price":"0.98","size":"6000"},{"price":"0.8","size":"300"},{"price":"0.79","size":"1332"},{"price":"0.78","size":"1272"},{"price":"0.7","size":"2000"},{"price":"0.69","size":"289"},{"price":"0.68","size":"6"},{"price":"0.36","size":"10.93"},{"price":"0.33","size":"20"},{"price":"0.32","size":"10"},{"price":"0.31","size":"25"},{"price":"0.26","size":"285.8"},{"price":"0.16","size":"9.07"},{"price":"0.14","size":"20"},{"price":"0.13","size":"210"},{"price":"0.11","size":"475.14"},{"price":"0.1","size":"409"}],"min_order_size":"5","tick_size":"0.01","neg_risk":true}]
`;

]]>
</file>
<file path=".dev/docs/manual-poly-data-api.md">
<![CDATA[

Developer Quickstart
API Rate Limits
​
How Rate Limiting Works
All rate limits are enforced using Cloudflare’s throttling system. When you exceed the maximum configured rate for any endpoint, requests are throttled rather than immediately rejected. This means:
Throttling: Requests over the limit are delayed/queued rather than dropped
Burst Allowances: Some endpoints allow short bursts above the sustained rate
Time Windows: Limits reset based on sliding time windows (e.g., per 10 seconds, per minute)
​
General Rate Limits
Endpoint	Limit	Notes
General Rate Limiting	5000 requests / 10s	Throttle requests over the maximum configured rate
”OK” Endpoint	50 requests / 10s	Throttle requests over the maximum configured rate
​
Data API Rate Limits
Endpoint	Limit	Notes
Data API (General)	100 requests / 10s	Throttle requests over the maximum configured rate
Data API (Alternative)	600 requests / 1 minute	1 hour block on violation
Data API /trades	30 requests / 10s	Throttle requests over the maximum configured rate
Data API “OK” Endpoint	10 requests / 10s	Throttle requests over the maximum configured rate
​
GAMMA API Rate Limits
Endpoint	Limit	Notes
GAMMA (General)	750 requests / 10s	Throttle requests over the maximum configured rate
GAMMA Get Comments	100 requests / 10s	Throttle requests over the maximum configured rate
GAMMA /events	100 requests / 10s	Throttle requests over the maximum configured rate
GAMMA /markets	100 requests / 10s	Throttle requests over the maximum configured rate
GAMMA /markets /events listing	100 requests / 10s	Throttle requests over the maximum configured rate
GAMMA Tags	100 requests / 10s	Throttle requests over the maximum configured rate
GAMMA Search	300 requests / 10s	Throttle requests over the maximum configured rate
​
CLOB API Rate Limits
​
General CLOB Endpoints
Endpoint	Limit	Notes
CLOB (General)	5000 requests / 10s	Throttle requests over the maximum configured rate
CLOB GET Balance Allowance	125 requests / 10s	Throttle requests over the maximum configured rate
CLOB UPDATE Balance Allowance	20 requests / 10s	Throttle requests over the maximum configured rate
​
CLOB Market Data
Endpoint	Limit	Notes
CLOB /book	200 requests / 10s	Throttle requests over the maximum configured rate
CLOB /books (website)	300 requests / 10s	Throttle requests over the maximum configured rate
CLOB /books	80 requests / 10s	Throttle requests over the maximum configured rate
CLOB /price	200 requests / 10s	Throttle requests over the maximum configured rate
CLOB /prices	80 requests / 10s	Throttle requests over the maximum configured rate
CLOB /midprice	200 requests / 10s	Throttle requests over the maximum configured rate
CLOB /midprices	80 requests / 10s	Throttle requests over the maximum configured rate
​
CLOB Ledger Endpoints
Endpoint	Limit	Notes
CLOB Ledger (/trades /orders /notifications /order)	300 requests / 10s	Throttle requests over the maximum configured rate
CLOB Ledger /data/orders	150 requests / 10s	Throttle requests over the maximum configured rate
CLOB Ledger /data/trades	150 requests / 10s	Throttle requests over the maximum configured rate
CLOB /notifications	125 requests / 10s	Throttle requests over the maximum configured rate
​
CLOB Markets & Pricing
Endpoint	Limit	Notes
CLOB Price History	100 requests / 10s	Throttle requests over the maximum configured rate
CLOB Markets	250 requests / 10s	Throttle requests over the maximum configured rate
CLOB Market Tick Size	50 requests / 10s	Throttle requests over the maximum configured rate
CLOB markets/0x	50 requests / 10s	Throttle requests over the maximum configured rate
CLOB /markets listing	100 requests / 10s	Throttle requests over the maximum configured rate
​
CLOB Authentication
Endpoint	Limit	Notes
CLOB API Keys	50 requests / 10s	Throttle requests over the maximum configured rate
​
CLOB Trading Endpoints
Endpoint	Limit	Notes
CLOB POST /order	2400 requests / 10s (240/s)	BURST - Throttle requests over the maximum configured rate
CLOB POST /order	24000 requests / 10 minutes (40/s)	Throttle requests over the maximum configured rate
CLOB POST /order (by token id)	800 requests / 10s (80/s)	BURST - Throttle requests over the maximum configured rate
CLOB POST /order (by token id)	12000 requests / 10 minutes (20/s)	Throttle requests over the maximum configured rate
CLOB DELETE /order	2400 requests / 10s (240/s)	BURST - Throttle requests over the maximum configured rate
CLOB DELETE /order	24000 requests / 10 minutes (40/s)	Throttle requests over the maximum configured rate
CLOB POST /orders	800 requests / 10s (80/s)	BURST - Throttle requests over the maximum configured rate
CLOB POST /orders	12000 requests / 10 minutes (20/s)	Throttle requests over the maximum configured rate
CLOB DELETE /orders	800 requests / 10s (80/s)	BURST - Throttle requests over the maximum configured rate
CLOB DELETE /orders	12000 requests / 10 minutes (20/s)	Throttle requests over the maximum configured rate
CLOB DELETE /cancel-all	200 requests / 10s (20/s)	BURST - Throttle requests over the maximum configured rate
CLOB DELETE /cancel-all	3000 requests / 10 minutes (5/s)	Throttle requests over the maximum configured rate
CLOB DELETE /cancel-market-orders	800 requests / 10s (80/s)	BURST - Throttle requests over the maximum configured rate
CLOB DELETE /cancel-market-orders	12000 requests / 10 minutes (20/s)	Throttle requests over the maximum configured rate
​
Other API Rate Limits
Endpoint	Limit	Notes
RELAYER /submit	15 requests / 1 minute	Throttle requests over the maximum configured rate
User PNL API	100 requests / 10s	Throttle requests over the maximum configured rate
Glossary


# Polymarket Documentation: Get Current Positions for a User

Returns positions filtered by user and optional filters.

### Endpoint

`GET /positions`

### Request Example (cURL)

```bash
curl --request GET \
  --url https://data-api.polymarket.com/positions
```

### Status Codes

| Status | Description |
| :----- | :---------- |
| 200    | Success     |
| 400    | Bad Request |
| 401    | Unauthorized |
| 500    | Internal Server Error |

### Query Parameters

| Parameter | Type | Required | Default | Description | Example |
| :--- | :--- | :--- | :--- | :--- | :--- |
| `user` | `string` | **required** | | User address (required) | `"0x56687bf447db6ffa42ffe2204a05edaa20f55839"` |
| `market` | `string[]` | | | Comma-separated list of condition IDs. Mutually exclusive with `eventId`. (0x-prefixed 64-hex string) | |
| `eventId` | `integer[]` | | | Comma-separated list of event IDs. Mutually exclusive with `market`. | |
| `sizeThreshold` | `number` | | `1` | Required range: `x >= 0` | |
| `redeemable` | `boolean` | | `false` | | |
| `mergeable` | `boolean` | | `false` | | |
| `limit` | `integer` | | `100` | Required range: `0 <= x <= 500` | |
| `offset` | `integer` | | `0` | Required range: `0 <= x <= 10000` | |
| `sortBy` | `enum<string>` | | `TOKENS` | Available options: `CURRENT`, `INITIAL`, `TOKENS`, `CASHPNL`, `PERCENTPNL`, `TITLE`, `RESOLVING`, `PRICE`, `AVGPRICE` | |
| `sortDirection` | `enum<string>` | | `DESC` | Available options: `ASC`, `DESC` | |
| `title` | `string` | | | Maximum length: 100 | |

### Response (200 Success - `application/json`)

List of positions

```json
[
  {
    "proxyWallet": "0x5adf695a088172a920b6d0b2e5b7d88aa8ffa5e7",
    "asset": "22532673444371000087276855698976185959891603058477427058498190868809631671643",
    "conditionId": "0x2b6a5170c30fbeba1b2317cf98929a446af82e2dc2bc5e84a07959b35bc2edbb",
    "size": 689.991638,
    "avgPrice": 0.212752,
    "initialValue": 146.797100967776,
    "currentValue": 141.44828579,
    "cashPnl": -5.348815177776009,
    "percentPnl": -3.6436790253440687,
    "totalBought": 699.991638,
    "realizedPnl": 0,
    "percentRealizedPnl": -5.020214340108156,
    "curPrice": 0.205,
    "redeemable": false,
    "mergeable": false,
    "title": "Will Celta Vigo win on 2025-10-05?",
    "slug": "lal-cel-mad-2025-10-05-cel",
    "icon": "https://polymarket-upload.s3.us-east-2.amazonaws.com/lal_celta_vigo.png",
    "eventId": "47924",
    "eventSlug": "lal-cel-mad-2025-10-05",
    "outcome": "Yes",
    "outcomeIndex": 0,
    "oppositeOutcome": "No",
    "oppositeAsset": "95416813017536330994120103652237010090486650775573169623122187070843615636364",
    "endDate": "2025-10-05",
    "negativeRisk": true
  },
  ...
]
```

#### Response Fields

| Field | Type | Description | Example |
| :--- | :--- | :--- | :--- |
| `proxyWallet` | `string` | User Profile Address (0x-prefixed, 40 hex chars) | `"0x56687bf447db6ffa42ffe2204a05edaa20f55839"` |
| `asset` | `string` | | |
| `conditionId` | `string` | 0x-prefixed 64-hex string | `"0xdd22472e552920b8438158ea7238bfadfa4f736aa4cee91a6b86c39ead110917"` |
| `size` | `number` | | |
| `avgPrice` | `number` | | |
| `initialValue` | `number` | | |
| `currentValue` | `number` | | |
| `cashPnl` | `number` | | |
| `percentPnl` | `number` | | |
| `totalBought` | `number` | | |
| `realizedPnl` | `number` | | |
| `percentRealizedPnl` | `number` | | |
| `curPrice` | `number` | | |
| `redeemable` | `boolean` | | |
| `mergeable` | `boolean` | | |
| `title` | `string` | | |
| `slug` | `string` | | |
| `icon` | `string` | | |
| `eventSlug` | `string` | | |
| `outcome` | `string` | | |
| `outcomeIndex` | `integer` | | |
| `oppositeOutcome` | `string` | | |
| `oppositeAsset` | `string` | | |
| `endDate` | `string` | | |
| `negativeRisk` | `boolean` | | |

---

*Other related endpoints mentioned:*

* Health check
* Get trades for a user or markets

# Polymarket Documentation: Get Trades for a User or Markets

## Core: Get trades for a user or markets

Returns trades filtered by user and/or market identifiers.

### Endpoint

`GET /trades`

### Request Example (cURL)

```bash
curl --request GET \
  --url https://data-api.polymarket.com/trades
```

### Status Codes

| Status | Description |
| :----- | :---------- |
| 200    | Success     |
| 400    | Bad Request |
| 401    | Unauthorized |
| 500    | Internal Server Error |

### Query Parameters

| Parameter | Type | Default | Required Range | Description | Example |
| :--- | :--- | :--- | :--- | :--- | :--- |
| `limit` | `integer` | `100` | `0 <= x <= 10000` | | |
| `offset` | `integer` | `0` | `0 <= x <= 10000` | | |
| `takerOnly` | `boolean` | `true` | | | |
| `filterType` | `enum<string>` | | | Must be provided together with `filterAmount`. Available options: `CASH`, `TOKENS`. | |
| `filterAmount` | `number` | | `x >= 0` | Must be provided together with `filterType`. | |
| `market` | `string[]` | | | Comma-separated list of condition IDs (0x-prefixed 64-hex string). Mutually exclusive with `eventId`. | |
| `eventId` | `integer[]` | | | Comma-separated list of event IDs. Mutually exclusive with `market`. | |
| `user` | `string` | | | User Profile Address (0x-prefixed, 40 hex chars). | `"0x56687bf447db6ffa42ffe2204a05edaa20f55839"` |
| `side` | `enum<string>` | | | Available options: `BUY`, `SELL`. | |

### Response (200 Success - `application/json`)

List of trades

```json
[
  {
    "proxyWallet": "0x5adf695a088172a920b6d0b2e5b7d88aa8ffa5e7",
    "side": "SELL",
    "asset": "10556390943081047040362703548123771402014160833887429090228355495495795329131",
    "conditionId": "0x1d221af524997a388c696773235bdf08740e620ee1e164659a1302272ffc6f14",
    "size": 129.1,
    "price": 0.22,
    "timestamp": 1759491562,
    "title": "Will Getafe win on 2025-10-03?",
    "slug": "lal-osa-get-2025-10-03-get",
    "icon": "https://polymarket-upload.s3.us-east-2.amazonaws.com/lal_getafe.png",
    "eventSlug": "lal-osa-get-2025-10-03",
    "outcome": "Yes",
    "outcomeIndex": 0,
    "name": "XxConorxX",
    "pseudonym": "Purple-Shelter",
    "bio": "God Bless Charlie Kirk",
    "profileImage": "https://polymarket-upload.s3.us-east-2.amazonaws.com/profile-image-2865805-78a97917-fb27-4b2c-9ad6-0158f2ef7d3a.png",
    "profileImageOptimized": "",
    "transactionHash": "0x331fe02b949d5ca31885c311c527d7d4ed0b98d71923e701551e162abf5d3719"
  },
  ...
]
```

#### Response Fields

| Field | Type | Description | Example |
| :--- | :--- | :--- | :--- |
| `proxyWallet` | `string` | User Profile Address (0x-prefixed, 40 hex chars) | `"0x56687bf447db6ffa42ffe2204a05edaa20f55839"` |
| `side` | `enum<string>` | Available options: `BUY`, `SELL` | |
| `asset` | `string` | | |
| `conditionId` | `string` | 0x-prefixed 64-hex string | `"0xdd22472e552920b8438158ea7238bfadfa4f736aa4cee91a6b86c39ead110917"` |
| `size` | `number` | | |
| `price` | `number` | | |
| `timestamp` | `integer` | | |
| `title` | `string` | | |
| `slug` | `string` | | |
| `icon` | `string` | | |
| `eventSlug` | `string` | | |
| `outcome` | `string` | | |
| `outcomeIndex` | `integer` | | |
| `name` | `string` | | |
| `pseudonym` | `string` | | |
| `bio` | `string` | | |
| `profileImage` | `string` | | |
| `profileImageOptimized` | `string` | | |
| `transactionHash` | `string` | | |


# Polymarket Documentation: Get Closed Positions for a User

## Core: Get closed positions for a user

Fetches closed positions for a user (address).

### Endpoint

`GET /closed-positions`

### Request Example (cURL)

```bash
curl --request GET \
  --url https://data-api.polymarket.com/closed-positions
```

### Status Codes

| Status | Description |
| :----- | :---------- |
| 200    | Success     |
| 400    | Bad Request |
| 401    | Unauthorized |
| 500    | Internal Server Error |

### Query Parameters

| Parameter | Type | Required | Default | Required Range | Description | Example |
| :--- | :--- | :--- | :--- | :--- | :--- | :--- |
| `user` | `string` | **required** | | | The address of the user in question. | `"0x56687bf447db6ffa42ffe2204a05edaa20f55839"` |
| `market` | `string[]` | | | | The conditionId of the market in question. Supports multiple CSV separated values. Cannot be used with the `eventId` param. (0x-prefixed 64-hex string) | |
| `title` | `string` | | | Maximum length: 100 | Filter by market title. | |
| `eventId` | `integer[]` | | | | The event id of the event in question. Supports multiple CSV separated values. Returns positions for all markets for those event ids. Cannot be used with the `market` param. | |
| `limit` | `integer` | | `50` | `0 <= x <= 500` | The max number of positions to return. | |
| `offset` | `integer` | | `0` | `0 <= x <= 10000` | The starting index for pagination. | |
| `sortBy` | `enum<string>` | | `REALIZEDPNL` | | The sort criteria. Available options: `REALIZEDPNL`, `TITLE`, `PRICE`, `AVGPRICE`. | |
| `sortDirection` | `enum<string>` | | `DESC` | | The sort direction. Available options: `ASC`, `DESC`. | |

### Response (200 Success - `application/json`)

```json
[
  {
    "proxyWallet": "0x5adf695a088172a920b6d0b2e5b7d88aa8ffa5e7",
    "asset": "105862139550598651869144991581649266505740323692381441468334576128241388255355",
    "conditionId": "0x078c6aac96ffa529781967e5608484735cef2a1668804653f70a8a9f77e80142",
    "avgPrice": 0.31604501945997504,
    "totalBought": 1390.634362,
    "realizedPnl": 255.814616,
    "curPrice": 0,
    "title": "Orioles vs. Yankees",
    "slug": "mlb-bal-nyy-2025-09-27",
    "icon": "https://polymarket-upload.s3.us-east-2.amazonaws.com/Repetitive-markets/MLB.jpg",
    "eventSlug": "mlb-bal-nyy-2025-09-27",
    "outcome": "Orioles",
    "outcomeIndex": 0,
    "oppositeOutcome": "Yankees",
    "oppositeAsset": "21098470966028966930663125053209505279564548160002102091763058078727565449356",
    "endDate": "2025-10-04T00:00:00Z"
  },
  ...
]
```

#### Response Fields

| Field | Type | Description | Example |
| :--- | :--- | :--- | :--- |
| `proxyWallet` | `string` | User Profile Address (0x-prefixed, 40 hex chars) | `"0x56687bf447db6ffa42ffe2204a05edaa20f55839"` |
| `asset` | `string` | | |
| `conditionId` | `string` | 0x-prefixed 64-hex string | `"0xdd22472e552920b8438158ea7238bfadfa4f736aa4cee91a6b86c39ead110917"` |
| `avgPrice` | `number` | | |
| `totalBought` | `number` | | |
| `realizedPnl` | `number` | | |
| `curPrice` | `number` | | |
| `title` | `string` | | |
| `slug` | `string` | | |
| `icon` | `string` | | |
| `eventSlug` | `string` | | |
| `outcome` | `string` | | |
| `outcomeIndex` | `integer` | | |
| `oppositeOutcome` | `string` | | |
| `oppositeAsset` | `string` | | |
| `endDate` | `string` | | |

# Polymarket TS CLOB Client

```ts
//npm install @polymarket/clob-client
//npm install ethers

//Client initialization example and dumping API Keys

import { ApiKeyCreds, ClobClient, OrderType, Side, } from "@polymarket/clob-client";
import { Wallet } from "@ethersproject/wallet";

const host = 'https://clob.polymarket.com';
const funder = '';//This is your Polymarket Profile Address, where you send UDSC to. 
const signer = new Wallet(""); //This is your Private Key. If using email login export from https://reveal.magic.link/polymarket otherwise export from your Web3 Application


//In general don't create a new API key, always derive or createOrDerive
const creds = new ClobClient(host, 137, signer).createOrDeriveApiKey();

//0: Browser Wallet(Metamask, Coinbase Wallet, etc)
//1: Magic/Email Login
const signatureType = 1; 
  (async () => {
    const clobClient = new ClobClient(host, 137, signer, await creds, signatureType, funder);
    const resp2 = await clobClient.createAndPostOrder(
        {
            tokenID: "", //Use https://docs.polymarket.com/developers/gamma-markets-api/get-markets to grab a sample token
            price: 0.01,
            side: Side.BUY,
            size: 5,
        },
        { tickSize: "0.001",negRisk: false }, //You'll need to adjust these based on the market. Get the tickSize and negRisk T/F from the get-markets above
        //{ tickSize: "0.001",negRisk: true },

        OrderType.GTC, 
    );
    console.log(resp2)
  })();
  ```
]]>
</file>
<file path=".dev/docs/manual-poly-gamma.md">
<![CDATA[
## Polymarket API Documentation: List Events

This page documents the **List events** API endpoint for Polymarket, which allows retrieving a list of prediction markets (events).

### API Endpoint

| Method | Path      | Base URL                           | Purpose     |
| :----- | :-------- | :--------------------------------- | :---------- |
| `GET`  | `/events` | `https://gamma-api.polymarket.com` | List events |

### Query Parameters

The endpoint supports various parameters for filtering, sorting, and pagination:

| Parameter                                | Type                    | Description                                                        |
| :--------------------------------------- | :---------------------- | :----------------------------------------------------------------- |
| `limit`, `offset`                        | `integer`               | Pagination controls.                                               |
| `order`, `ascending`                     | `string`, `boolean`     | Sorting parameters.                                                |
| `id`, `slug`                             | `integer[]`, `string[]` | Filter by specific event IDs or slugs.                             |
| `tag_id`, `exclude_tag_id`               | `integer`               | Filter by associated tags.                                         |
| `featured`, `closed`, `cyom`             | `boolean`               | Filter by status (e.g., featured, closed, Create Your Own Market). |
| `start_date_min/max`, `end_date_min/max` | `string<date-time>`     | Filter events by date range.                                       |
| `include_chat`, `include_template`       | `boolean`               | Include associated chat or template data.                          |

### Response Structure (Event Object)

The API returns a list of event objects (JSON array), each containing extensive data. Key fields include:

| Field                                        | Type                | Description                                                                |
| :------------------------------------------- | :------------------ | :------------------------------------------------------------------------- |
| `id`, `ticker`, `slug`, `title`              | `string`            | Basic identification and display data.                                     |
| `startDate`, `endDate`                       | `string<date-time>` | Event timeline.                                                            |
| `active`, `closed`, `featured`, `restricted` | `boolean`           | Event status indicators.                                                   |
| `liquidity`, `volume`, `openInterest`        | `number`            | Market financial metrics.                                                  |
| `markets`                                    | `object[]`          | Nested array containing detailed market objects associated with the event. |
| `series`                                     | `object[]`          | Nested array containing series information the event belongs to.           |
| `categories`, `tags`                         | `object[]`          | Categorization and tagging data.                                           |
| `volume24hr`, `volume1wk`, etc.              | `number`            | Volume data across different timeframes.                                   |

#### Nested Market Object Fields

Each `market` within an event includes details such as: `question`, `conditionId`, `endDate`, `marketType`, `volumeNum`, `liquidityNum`, pricing information (`lastTradePrice`, `bestBid`, `bestAsk`), and various status flags.

### Example Output

```json
[
    {
        "id": 57116,
        "ticker": "nhl-metropolitan-division-winner",
        "slug": "nhl-metropolitan-division-winner-831",
        "title": "NHL: Metropolitan Division Winner",
        "description": "This market will resolve according to the team that wins the listed division during the 2025-26 NHL regular season.\n\nIf at any point it becomes impossible for a listed team to win its division (e.g., mathematical elimination before season end), the relevant market will resolve immediately to “No.”\n\nIf the 2025-26 NHL season is permanently canceled or has not been completed by June 30, 2026, 11:59 PM ET, this market will resolve to “Other.”",
        "resolutionSource": "",
        "startDate": "2025-10-10T00:34:45.548328Z",
        "creationDate": "2025-10-10T00:34:45.548322Z",
        "endDate": "2026-04-30T00:00:00Z",
        "image": "https://polymarket-upload.s3.us-east-2.amazonaws.com/nhl-metropolitan-division-winner-831-BiOhOAV6ln-4.png",
        "icon": "https://polymarket-upload.s3.us-east-2.amazonaws.com/nhl-metropolitan-division-winner-831-BiOhOAV6ln-4.png",
        "active": true,
        "closed": false,
        "archived": false,
        "new": false,
        "featured": false,
        "restricted": true,
        "liquidity": 9680,
        "openInterest": 0,
        "sortBy": "price",
        "createdAt": "2025-10-09T20:29:37.053812Z",
        "updatedAt": "2025-10-10T05:46:11.123915Z",
        "competitive": 0.8470089994706194,
        "enableOrderBook": true,
        "liquidityClob": 9680,
        "negRisk": true,
        "negRiskMarketID": "0xc1bd6e88f5a19d4d451188f8e9a78952e48db9676aedcba4573b8dd271d79600",
        "commentCount": 0,
        "markets": [
            {
                "id": 629070,
                "question": "Will the Carolina Hurricanes win the Metropolitan Division?",
                "conditionId": "0xa998022efc89d60331ac15e78103dafd765e65eaea433405638c4e293d2b0fa6",
                "slug": "will-the-carolina-hurricanes-win-the-metropolitan-division-123",
                "endDate": "2026-04-30T00:00:00Z",
                "liquidity": 300,
                "startDate": "2025-10-10T00:23:22.977509Z",
                "image": "https://polymarket-upload.s3.us-east-2.amazonaws.com/nhl-metropolitan-division-winner-831-BiOhOAV6ln-4.png",
                "icon": "https://polymarket-upload.s3.us-east-2.amazonaws.com/nhl-metropolitan-division-winner-831-BiOhOAV6ln-4.png",
                "description": "This market will resolve according to the team that wins the listed division during the 2025-26 NHL regular season.\n\nIf at any point it becomes impossible for a listed team to win its division (e.g., mathematical elimination before season end), the relevant market will resolve immediately to “No.”\n\nIf the 2025-26 NHL season is permanently canceled or has not been completed by June 30, 2026, 11:59 PM ET, this market will resolve to “Other.”",
                "outcomes": ["Yes", "No"],
                "outcomePrices": ["0.35", "0.65"],
                "active": true,
                "closed": false,
                "marketMakerAddress": "",
                "createdAt": "2025-10-09T20:29:37.904431Z",
                "updatedAt": "2025-10-10T05:42:19.24627Z",
                "new": false,
                "featured": false,
                "submitted_by": "0x91430CaD2d3975766499717fA0D66A78D814E5c5",
                "archived": false,
                "resolvedBy": "0x2F5e3684cb1F318ec51b00Edba38d79Ac2c0aA9d",
                "restricted": true,
                "groupItemTitle": "Carolina Hurricanes",
                "groupItemThreshold": 0,
                "questionID": "0xc1bd6e88f5a19d4d451188f8e9a78952e48db9676aedcba4573b8dd271d79600",
                "enableOrderBook": true,
                "orderPriceMinTickSize": 0.01,
                "orderMinSize": 5,
                "liquidityNum": 300,
                "endDateIso": "2026-04-30",
                "startDateIso": "2025-10-10",
                "hasReviewedDates": true,
                "clobTokenIds": [
                    "63645197726705524606059371558162512012201160965301656466640547461234264539392",
                    "5617477483144744882677399661863606310473044785725076606563294855884593377840"
                ],
                "umaBond": 500,
                "umaReward": 5,
                "liquidityClob": 300,
                "customLiveness": 0,
                "acceptingOrders": true,
                "negRisk": true,
                "negRiskMarketID": "0xc1bd6e88f5a19d4d451188f8e9a78952e48db9676aedcba4573b8dd271d79600",
                "negRiskRequestID": "0x9b2ab6a19ab61ed010aa5fe60f474283affc335829f807d6b5e5901f7de69661",
                "ready": false,
                "funded": false,
                "acceptingOrdersTimestamp": "2025-10-10T00:23:01Z",
                "cyom": false,
                "competitive": 0.293398533007335,
                "pagerDutyNotificationEnabled": false,
                "approved": true,
                "rewardsMinSize": 0,
                "rewardsMaxSpread": 0,
                "spread": 0.7,
                "bestAsk": 0.7,
                "automaticallyActive": true,
                "clearBookOnStart": true,
                "showGmpSeries": false,
                "showGmpOutcome": false,
                "manualActivation": false,
                "negRiskOther": false,
                "umaResolutionStatuses": [],
                "pendingDeployment": false,
                "deploying": false,
                "deployingTimestamp": "2025-10-10T00:11:25.336806Z",
                "rfqEnabled": false,
                "holdingRewardsEnabled": false,
                "feesEnabled": false
            }
        ],
        "tags": [
            {
                "id": 1,
                "label": "Sports",
                "slug": "sports",
                "forceShow": false,
                "publishedAt": "2023-10-24T22:37:50.296Z",
                "updatedBy": 15,
                "createdAt": "2023-10-24T22:37:50.31Z",
                "updatedAt": "2024-07-05T21:07:21.800664Z",
                "forceHide": true
            },
            {
                "id": 899,
                "label": "NHL",
                "slug": "nhl",
                "forceShow": false,
                "publishedAt": "2024-01-22T17:16:28.432Z",
                "createdAt": "2024-01-22T17:16:28.449Z",
                "updatedAt": "2024-05-30T22:36:11.118646Z"
            },
            {
                "id": 100088,
                "label": "Hockey",
                "slug": "hockey",
                "cyom": false,
                "showAllOutcomes": true,
                "showMarketImages": false,
                "enableNegRisk": true,
                "automaticallyActive": true,
                "gmpChartMode": "default",
                "negRiskAugmented": true,
                "pendingDeployment": false,
                "deploying": false,
                "deployingTimestamp": "2025-10-10T00:08:05.814235Z"
            }
        ]
    },
    ...
]
```

]]>
</file>
<file path=".dev/docs/manual-poly-rtds.md">
<![CDATA[
# Real-Time Data Client

Client wrapper for `real-time-data-streaming` **WebSocket**.

## Quickstart

```ts
import { RealTimeDataClient } from "../src/client";
import { Message } from "../src/model";

const onMessage = (m: Message) => console.log(m.topic, m.type, m.payload);

const onConnect = (client: RealTimeDataClient) => {
  client.subscribe({
    subscriptions: [
      {
        topic: "comments",
        type: "*", // all types for topic
        filters: `{"parentEntityID":100,"parentEntityType":"Event"}`, // empty = no filter
      },
    ],
  });
};

new RealTimeDataClient({ onMessage, onConnect }).connect();
```

## Subscriptions

> After connection, use the same `client: RealTimeDataClient`.

### Subscribe

```ts
// activity.trades
client.subscribe({ subscriptions: [{ topic: "activity", type: "trades" }] });

// all comment types
client.subscribe({ subscriptions: [{ topic: "comments", type: "*" }] });
```

### Unsubscribe

> Unsubscribe from `activity.trades` (if `*` was used earlier, this removes only `trades`).

```ts
client.unsubscribe?.({ // if supported; same shape as subscribe
  subscriptions: [{ topic: "activity", type: "trades" }],
});

// If the client uses subscribe-with-action pattern:
client.subscribe({
  subscriptions: [{ topic: "activity", type: "trades" }],
  action: "unsubscribe",
});
```

### Disconnect

```ts
client.disconnect();
```

## Message Matrix

| Topic                     | Type               | Auth     | Filters (empty = none)                                          | Schema                              | Subscription Handler                          |
| ------------------------- | ------------------ | -------- | --------------------------------------------------------------- | ----------------------------------- | --------------------------------------------- |
| `activity`                | `trades`           | -        | `{"event_slug":"string"}` **OR** `{"market_slug":"string"}`     | [`Trade`](#trade)                   |                                               |
| `activity`                | `orders_matched`   | -        | `{"event_slug":"string"}` **OR** `{"market_slug":"string"}`     | [`Trade`](#trade)                   |                                               |
| `comments`                | `comment_created`  | -        | `{"parentEntityID":number,"parentEntityType":"Event / Series"}` | [`Comment`](#comment)               |                                               |
| `comments`                | `comment_removed`  | -        | same as above                                                   | [`Comment`](#comment)               |                                               |
| `comments`                | `reaction_created` | -        | same as above                                                   | [`Reaction`](#reaction)             |                                               |
| `comments`                | `reaction_removed` | -        | same as above                                                   | [`Reaction`](#reaction)             |                                               |
| `rfq`                     | `request_created`  | -        | -                                                               | [`Request`](#request)               |                                               |
| `rfq`                     | `request_edited`   | -        | -                                                               | [`Request`](#request)               |                                               |
| `rfq`                     | `request_canceled` | -        | -                                                               | [`Request`](#request)               |                                               |
| `rfq`                     | `request_expired`  | -        | -                                                               | [`Request`](#request)               |                                               |
| `rfq`                     | `quote_created`    | -        | -                                                               | [`Quote`](#quote)                   |                                               |
| `rfq`                     | `quote_edited`     | -        | -                                                               | [`Quote`](#quote)                   |                                               |
| `rfq`                     | `quote_canceled`   | -        | -                                                               | [`Quote`](#quote)                   |                                               |
| `rfq`                     | `quote_expired`    | -        | -                                                               | [`Quote`](#quote)                   |                                               |
| `crypto_prices`           | `update`           | -        | `{"symbol":string}`                                             | [`CryptoPrice`](#cryptoprice)       | [`CryptoPriceHistorical`](#initial-data-dump) |
| `crypto_prices_chainlink` | `update`           | -        | `{"symbol":string}`                                             | [`CryptoPrice`](#cryptoprice)       | [`CryptoPriceHistorical`](#initial-data-dump) |
| `clob_user`               | `order`            | ClobAuth | -                                                               | [`Order`](#order)                   |                                               |
| `clob_user`               | `trade`            | ClobAuth | -                                                               | [`Trade (CLOB User)`](#trade-1)     |                                               |
| `clob_market`             | `price_change`     | -        | `["100","200",...]` **(mandatory)**                             | [`PriceChanges`](#pricechanges)     |                                               |
| `clob_market`             | `agg_orderbook`    | -        | `["100","200",...]`                                             | [`AggOrderbook`](#aggorderbook)     | [`AggOrderbook`](#aggorderbook)               |
| `clob_market`             | `last_trade_price` | -        | `["100","200",...]`                                             | [`LastTradePrice`](#lasttradeprice) |                                               |
| `clob_market`             | `tick_size_change` | -        | `["100","200",...]`                                             | [`TickSizeChange`](#ticksizechange) |                                               |
| `clob_market`             | `market_created`   | -        | -                                                               | [`ClobMarket`](#clobmarket)         |                                               |
| `clob_market`             | `market_resolved`  | -        | -                                                               | [`ClobMarket`](#clobmarket)         |                                               |

## Auth

### ClobAuth

```ts
export interface ClobApiKeyCreds {
  key: string;        // API key
  secret: string;     // API secret
  passphrase: string; // Passphrase
}
```

```ts
client.subscribe({
  subscriptions: [
    {
      topic: "clob_user",
      type: "*",
      clob_auth: {
        key: "xxxxxx-xxxx-xxxxx-xxxx-xxxxxx",
        secret: "xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx",
        passphrase: "xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx",
      },
    },
  ],
});
```

## Schemas

### Activity

#### Trade

| Name              | Type    | Description                   |
| ----------------- | ------- | ----------------------------- |
| `asset`           | string  | ERC1155 token ID traded       |
| `bio`             | string  | Trader’s bio                  |
| `conditionId`     | string  | Market/CTF condition ID       |
| `eventSlug`       | string  | Event slug                    |
| `icon`            | string  | Market icon URL               |
| `name`            | string  | Trader’s name                 |
| `outcome`         | string  | Human-readable market outcome |
| `outcomeIndex`    | integer | Outcome index                 |
| `price`           | float   | Trade price                   |
| `profileImage`    | string  | Trader profile image URL      |
| `proxyWallet`     | string  | Trader proxy wallet           |
| `pseudonym`       | string  | Trader pseudonym              |
| `side`            | string  | `BUY` / `SELL`                |
| `size`            | integer | Trade size                    |
| `slug`            | string  | Market slug                   |
| `timestamp`       | integer | Trade timestamp               |
| `title`           | string  | Event title                   |
| `transactionHash` | string  | Tx hash                       |

### Comments

#### Comment

| Name               | Type   | Description         |
| ------------------ | ------ | ------------------- |
| `id`               | string | Comment ID          |
| `body`             | string | Content             |
| `parentEntityType` | string | `Event` or `Series` |
| `parentEntityID`   | number | Parent ID           |
| `parentCommentID`  | string | Parent comment ID   |
| `userAddress`      | string | User address        |
| `replyAddress`     | string | Reply user address  |
| `createdAt`        | string | Created timestamp   |
| `updatedAt`        | string | Updated timestamp   |

#### Reaction

| Name           | Type   | Description       |
| -------------- | ------ | ----------------- |
| `id`           | string | Reaction ID       |
| `commentID`    | number | Comment ID        |
| `reactionType` | string | Reaction type     |
| `icon`         | string | Reaction icon     |
| `userAddress`  | string | User address      |
| `createdAt`    | string | Created timestamp |

### RFQ

#### Request

| Name           | Type   | Description                 |
| -------------- | ------ | --------------------------- |
| `requestId`    | string | Request ID                  |
| `proxyAddress` | string | User proxy                  |
| `market`       | string | Market/CTF condition ID     |
| `token`        | string | ERC1155 token ID            |
| `complement`   | string | Complement ERC1155 token ID |
| `state`        | string | Current state               |
| `side`         | string | Buy/Sell                    |
| `sizeIn`       | number | Input size                  |
| `sizeOut`      | number | Output size                 |
| `price`        | number | Implied price               |
| `expiry`       | number | UNIX expiry                 |

#### Quote

| Name           | Type   | Description                 |
| -------------- | ------ | --------------------------- |
| `quoteId`      | string | Quote ID                    |
| `requestId`    | string | Linked request ID           |
| `proxyAddress` | string | User proxy                  |
| `token`        | string | ERC1155 token ID            |
| `state`        | string | Current state               |
| `side`         | string | Buy/Sell                    |
| `sizeIn`       | number | Input size                  |
| `sizeOut`      | number | Output size                 |
| `condition`    | string | Market/CTF condition ID     |
| `complement`   | string | Complement ERC1155 token ID |
| `expiry`       | number | UNIX expiry                 |

### CryptoPrice

| Name        | Type   | Description    |
| ----------- | ------ | -------------- |
| `symbol`    | string | Asset symbol   |
| `timestamp` | number | ms since epoch |
| `value`     | number | Price value    |

**Filters:** `{"symbol":"btcusdt"}`, `{"symbol":"ethusdt"}`, `{"symbol":"xrpusdt"}`, `{"symbol":"solusdt"}`

#### Initial data dump

THIS IS THE MIDDLE SCREAM SCRING: "mid is always mid"

On connection with a filter, server sends a snapshot:

* `symbol: string`
* `data: Array<{ timestamp: number; value: number }>`
  (See also: used by `crypto_prices` and `crypto_prices_chainlink`.)

### CLOB User

#### Order

| Name            | Type               | Description                           |
| --------------- | ------------------ | ------------------------------------- |
| `asset_id`      | string             | ERC1155 token ID                      |
| `created_at`    | string (timestamp) | UNIX creation                         |
| `expiration`    | string (timestamp) | UNIX expiration                       |
| `id`            | string             | Order hash                            |
| `maker_address` | string             | Funder address                        |
| `market`        | string             | Condition/market ID                   |
| `order_type`    | string             | `GTC` `GTD` `FOK` `FAK`               |
| `original_size` | string             | Size at placement                     |
| `outcome`       | string             | `YES` / `NO`                          |
| `owner`         | string             | Owner UUID                            |
| `price`         | string             | Decimal price                         |
| `side`          | string             | `BUY` / `SELL`                        |
| `size_matched`  | string             | Matched amount                        |
| `status`        | string             | e.g., `MATCHED`                       |
| `type`          | string             | `PLACEMENT` `CANCELLATION` `FILL` ... |

#### Trade (CLOB User)

| Name               | Type               | Description             |
| ------------------ | ------------------ | ----------------------- |
| `asset_id`         | string             | ERC1155 token ID        |
| `fee_rate_bps`     | string             | Fee rate (bps)          |
| `id`               | string             | Match ID                |
| `last_update`      | string (timestamp) | UNIX last update        |
| `maker_address`    | string             | Maker address           |
| `maker_orders`     | array              | See below               |
| `market`           | string             | Condition/market ID     |
| `match_time`       | string (timestamp) | UNIX execution          |
| `outcome`          | string             | `YES` / `NO`            |
| `owner`            | string             | Taker UUID              |
| `price`            | string             | Decimal price           |
| `side`             | string             | Taker side `BUY`/`SELL` |
| `size`             | string             | Total matched size      |
| `status`           | string             | e.g., `MINED`           |
| `taker_order_id`   | string             | Taker order ID          |
| `transaction_hash` | string             | Settlement tx           |

**`maker_orders` (array items)**

| Name             | Type   | Description    |
| ---------------- | ------ | -------------- |
| `asset_id`       | string | Maker token ID |
| `fee_rate_bps`   | string | Maker fee bps  |
| `maker_address`  | string | Maker address  |
| `matched_amount` | string | Amount matched |
| `order_id`       | string | Maker order ID |
| `outcome`        | string | `YES` / `NO`   |
| `owner`          | string | Maker UUID     |
| `price`          | string | Order price    |
| `side`           | string | `BUY` / `SELL` |

### CLOB Market

#### PriceChanges

| Name | Type               | Description           |
| ---- | ------------------ | --------------------- |
| `m`  | string             | Condition ID          |
| `pc` | array              | Price changes by book |
| `t`  | string (timestamp) | ms since epoch        |

**PriceChange (elements of `pc`)**

| Name | Type   | Description         |
| ---- | ------ | ------------------- |
| `a`  | string | `asset_id`          |
| `h`  | string | book snapshot hash  |
| `p`  | string | price (e.g., `0.5`) |
| `s`  | string | side `BUY`/`SELL`   |
| `si` | string | size at price       |
| `ba` | string | best ask            |
| `bb` | string | best bid            |

> **Filters required:** `["100","200",...]` (asset IDs).

#### AggOrderbook

| Name             | Type               | Description                    |
| ---------------- | ------------------ | ------------------------------ |
| `asks`           | array              | Aggregated asks `{price,size}` |
| `asset_id`       | string             | Asset ID                       |
| `bids`           | array              | Aggregated bids `{price,size}` |
| `hash`           | string             | Snapshot hash                  |
| `market`         | string             | Condition ID                   |
| `min_order_size` | string             | Min order size                 |
| `neg_risk`       | boolean            | NegRisk flag                   |
| `tick_size`      | string             | Min price increment            |
| `timestamp`      | string (timestamp) | ms since epoch                 |

**`asks`/`bids` item**
| `price`: string | `size`: string |

**Initial data dump:** on connection when filters used.

#### LastTradePrice

| Name           | Type   | Description    |
| -------------- | ------ | -------------- |
| `asset_id`     | string | Asset ID       |
| `fee_rate_bps` | string | Fee bps        |
| `market`       | string | Condition ID   |
| `price`        | string | Trade price    |
| `side`         | string | `BUY` / `SELL` |
| `size`         | string | Trade size     |

#### TickSizeChange

| Name            | Type   | Description              |
| --------------- | ------ | ------------------------ |
| `market`        | string | Condition ID             |
| `asset_id`      | string | Array of two ERC1155 IDs |
| `old_tick_size` | string | Previous tick            |
| `new_tick_size` | string | Updated tick             |

#### ClobMarket

| Name             | Type      | Description           |
| ---------------- | --------- | --------------------- |
| `market`         | string    | Condition ID          |
| `asset_ids`      | [2]string | Two ERC1155 asset IDs |
| `min_order_size` | string    | Min order size        |
| `tick_size`      | string    | Min price increment   |
| `neg_risk`       | boolean   | Negative risk         |

]]>
</file>
<file path=".dev/docs/manual-rate-limits.md">
<![CDATA[
POLYMARKET RATE LIMITS

API Rate Limits
​
How Rate Limiting Works
All rate limits are enforced using Cloudflare’s throttling system. When you exceed the maximum configured rate for any endpoint, requests are throttled rather than immediately rejected. This means:
Throttling: Requests over the limit are delayed/queued rather than dropped
Burst Allowances: Some endpoints allow short bursts above the sustained rate
Time Windows: Limits reset based on sliding time windows (e.g., per 10 seconds, per minute)
​
General Rate Limits
Endpoint	Limit	Notes
General Rate Limiting	5000 requests / 10s	Throttle requests over the maximum configured rate
”OK” Endpoint	50 requests / 10s	Throttle requests over the maximum configured rate
​
Data API Rate Limits
Endpoint	Limit	Notes
Data API (General)	100 requests / 10s	Throttle requests over the maximum configured rate
Data API (Alternative)	600 requests / 1 minute	1 hour block on violation
Data API /trades	30 requests / 10s	Throttle requests over the maximum configured rate
Data API “OK” Endpoint	10 requests / 10s	Throttle requests over the maximum configured rate
​
GAMMA API Rate Limits
Endpoint	Limit	Notes
GAMMA (General)	750 requests / 10s	Throttle requests over the maximum configured rate
GAMMA Get Comments	100 requests / 10s	Throttle requests over the maximum configured rate
GAMMA /events	100 requests / 10s	Throttle requests over the maximum configured rate
GAMMA /markets	100 requests / 10s	Throttle requests over the maximum configured rate
GAMMA /markets /events listing	100 requests / 10s	Throttle requests over the maximum configured rate
GAMMA Tags	100 requests / 10s	Throttle requests over the maximum configured rate
GAMMA Search	300 requests / 10s	Throttle requests over the maximum configured rate
​
CLOB API Rate Limits
​
General CLOB Endpoints
Endpoint	Limit	Notes
CLOB (General)	5000 requests / 10s	Throttle requests over the maximum configured rate
CLOB GET Balance Allowance	125 requests / 10s	Throttle requests over the maximum configured rate
CLOB UPDATE Balance Allowance	20 requests / 10s	Throttle requests over the maximum configured rate
​
CLOB Market Data
Endpoint	Limit	Notes
CLOB /book	200 requests / 10s	Throttle requests over the maximum configured rate
CLOB /books (website)	300 requests / 10s	Throttle requests over the maximum configured rate
CLOB /books	80 requests / 10s	Throttle requests over the maximum configured rate
CLOB /price	200 requests / 10s	Throttle requests over the maximum configured rate
CLOB /prices	80 requests / 10s	Throttle requests over the maximum configured rate
CLOB /midprice	200 requests / 10s	Throttle requests over the maximum configured rate
CLOB /midprices	80 requests / 10s	Throttle requests over the maximum configured rate
​
CLOB Ledger Endpoints
Endpoint	Limit	Notes
CLOB Ledger (/trades /orders /notifications /order)	300 requests / 10s	Throttle requests over the maximum configured rate
CLOB Ledger /data/orders	150 requests / 10s	Throttle requests over the maximum configured rate
CLOB Ledger /data/trades	150 requests / 10s	Throttle requests over the maximum configured rate
CLOB /notifications	125 requests / 10s	Throttle requests over the maximum configured rate
​
CLOB Markets & Pricing
Endpoint	Limit	Notes
CLOB Price History	100 requests / 10s	Throttle requests over the maximum configured rate
CLOB Markets	250 requests / 10s	Throttle requests over the maximum configured rate
CLOB Market Tick Size	50 requests / 10s	Throttle requests over the maximum configured rate
CLOB markets/0x	50 requests / 10s	Throttle requests over the maximum configured rate
CLOB /markets listing	100 requests / 10s	Throttle requests over the maximum configured rate
​
CLOB Authentication
Endpoint	Limit	Notes
CLOB API Keys	50 requests / 10s	Throttle requests over the maximum configured rate
​
CLOB Trading Endpoints
Endpoint	Limit	Notes
CLOB POST /order	2400 requests / 10s (240/s)	BURST - Throttle requests over the maximum configured rate
CLOB POST /order	24000 requests / 10 minutes (40/s)	Throttle requests over the maximum configured rate
CLOB POST /order (by token id)	800 requests / 10s (80/s)	BURST - Throttle requests over the maximum configured rate
CLOB POST /order (by token id)	12000 requests / 10 minutes (20/s)	Throttle requests over the maximum configured rate
CLOB DELETE /order	2400 requests / 10s (240/s)	BURST - Throttle requests over the maximum configured rate
CLOB DELETE /order	24000 requests / 10 minutes (40/s)	Throttle requests over the maximum configured rate
CLOB POST /orders	800 requests / 10s (80/s)	BURST - Throttle requests over the maximum configured rate
CLOB POST /orders	12000 requests / 10 minutes (20/s)	Throttle requests over the maximum configured rate
CLOB DELETE /orders	800 requests / 10s (80/s)	BURST - Throttle requests over the maximum configured rate
CLOB DELETE /orders	12000 requests / 10 minutes (20/s)	Throttle requests over the maximum configured rate
CLOB DELETE /cancel-all	200 requests / 10s (20/s)	BURST - Throttle requests over the maximum configured rate
CLOB DELETE /cancel-all	3000 requests / 10 minutes (5/s)	Throttle requests over the maximum configured rate
CLOB DELETE /cancel-market-orders	800 requests / 10s (80/s)	BURST - Throttle requests over the maximum configured rate
CLOB DELETE /cancel-market-orders	12000 requests / 10 minutes (20/s)	Throttle requests over the maximum configured rate
​
Other API Rate Limits
Endpoint	Limit	Notes
RELAYER /submit	15 requests / 1 minute	Throttle requests over the maximum configured rate
User PNL API	100 requests / 10s	Throttle requests over the maximum configured rate
Glossary

]]>
</file>
<file path=".dev/md/plans/2025/10/07/13-09-13_discord-bot-slash-commands.md">
<![CDATA[
## Plan: Discord Bot with Slash Commands (+Autocomplete) for Status, Logs, Portfolio, Positions, Position, Close, Close-All

## Proposed Plan

### ❌ Critical Information Needed

- Do you prefer commands registered as guild-only during development (`DISCORD_GUILD_ID`) or global? Guild scope updates instantly; global can take up to 1 hour to propagate. If not provided, we will use guild scope by default for faster DX.
- Do you already have a Discord Application and Bot set up with the correct OAuth2 scopes? Required: `bot` and `applications.commands`. If not, we will include setup steps.

### ⚠️ Initial Best Assumptions to Address Ambiguities

1. MODERATE: Command scope -> We will register commands to a single guild (via `DISCORD_GUILD_ID`) for immediate availability; we can add a `--global` flag later. Rationale: Faster iteration and safer testing.
2. MODERATE: Bot runtime -> We will run the bot in the same process as the app, started from `main-loop`, non-blocking. Rationale: Simpler deployment and resource sharing.
4. MODERATE: Autocomplete dataset size -> Position counts are small enough to compute suggestions on-demand via DB queries within Discord’s 3s initial response limit.
The Discord Bot is in COMPLETELY PRIVATE server where only owner has access. No need to implement allowlisting.

### ☁️ Current State

1. Node.js ≥20, TypeScript strict, pnpm. See `package.json`.
2. App runs as a long-lived process: entrypoint `src/index.ts` calls `run()` in `src/core/app/main-loop.ts`.
3. DB: PostgreSQL via Drizzle; key tables `position`, `copy_order`, `leader_trade`, etc. Helpers in `src/utils/external-helpers.ts` expose portfolio summary and formatting.
4. Event bus emits lifecycle and trading events (`src/core/domain/event.ts`). Discord notifications currently via webhook only (`src/notify/discord-webhook.ts`).
5. RTDS stream in `src/core/data-ingestion/polymarket-rtds.ts` exposes `lastRtdsMessageTimeMs` for connectivity telemetry.
6. No Discord Bot runtime yet (`src/rpc/discord-bot.ts` is empty).

### 🌟 Desired Goal State

1. A Discord Bot connected via Gateway with slash commands visible in the configured guild.
2. Slash commands:
   - `/status`: RTDS/WS connectivity, open positions count, current unrealized PnL, lifetime realized PnL.
   - `/logs [n]`: Return last N lines of humanized logs.
   - `/portfolio`: Portfolio summary (reuse existing formatting).
   - `/positions`: Table of current open positions with columns: ID, UPNL.
   - `/position [id]`: Detailed position view with extra fields (tokenId, Entry Price (Avg), Current Price, Unrealized PnL).
   - `/close [id]`: Force close a specific position by ID.
   - `/close-all`: Force close all running positions.
3. Autocomplete for commands needing IDs (e.g., `/position` and `/close`), suggesting open position IDs.
4. All responses ephemeral by default (for private UX), with emojis and clear formatting.
5. DRY, typed, and non-intrusive to the main trading flow (sub-50ms overhead preserved for critical paths).

Traceability: Each bullet maps to the user requirements list (status/logs/portfolio/positions/position/close/close-all, with autocomplete and emojis).

### 🛣️ Brainstorm Implementation Approaches

- Approach 1: Gateway bot using `discord.js` v14
  - Pros: No public HTTP ingress needed; interactions and autocompletes handled via Gateway. Rich typing and utilities.
  - Cons: Adds a runtime dependency and a background connection.
- Approach 2: HTTP-only Interactions (Outgoing Webhook)
  - Pros: No Gateway connection.
  - Cons: Requires public HTTPS endpoint and signature verification; more infra.
- Approach 3: Hybrid (Gateway for commands, Webhook for followups)
  - Pros: Flexibility.
  - Cons: Unnecessary complexity for this private, single-user bot.

Chosen Approach: 1 (Gateway + discord.js)
- Reasons: No server needed; straightforward slash command + autocomplete handling; quick iteration in a private project.

Rollback Strategy
- The bot starts only if `DISCORD_BOT_TOKEN` is present. No token → no bot runtime. Command registration is an explicit script; revert by deleting commands and removing token.

### 🗺️ Very Detailed Plan

1) Dependencies and Env
- Add deps: `discord.js`, `@discordjs/rest`, `discord-api-types`.
- Add env vars to `.env.*`:
  - `DISCORD_BOT_TOKEN`: Bot token
  - `DISCORD_APP_ID`: Application (client) ID
  - `DISCORD_GUILD_ID`: Guild ID (dev scope)

2) Command Definitions (single source of truth)
- Create `src/rpc/discord/commands.ts` exporting a typed array of command definitions and helpers for registration + runtime handling.
- Commands list:
  - `status` (no options)
  - `logs` options: integer `n` (1–500, default 100)
  - `portfolio` (no options)
  - `positions` (no options)
  - `position` options: integer `id` (required, with autocomplete)
  - `close` options: integer `id` (required, with autocomplete, guarded)
  - `close-all` (no options, guarded)

3) Registration Script
- Add `scripts/register-discord-commands.ts` using `@discordjs/rest` to upsert commands to the configured guild.
- CLI script in `package.json`: `pnpm discord:register:guild` (and optional `discord:register:global`).
- Reference: Application Commands API [Discord Application Commands](https://discord.com/developers/docs/interactions/application-commands).

4) Bot Runtime
- Implement `startDiscordBot(params)` in `src/rpc/discord-bot.ts`:
  - Construct a `Client` with `GatewayIntentBits.Guilds` only.
  - On `ready`, log success.
  - Handle `interactionCreate`:
    - If `isChatInputCommand()` → route by command name.
    - If `isAutocomplete()` → return suggestions for `position`/`close`.
  - Ephemeral initial responses (defer reply within 3s if needed). Reference: 3s initial response rule and ephemeral flags [Receiving and Responding](https://discord.com/developers/docs/interactions/receiving-and-responding).

5) Data Access & DRY helpers
- Reuse existing helpers from `src/utils/external-helpers.ts`:
  - `getPortfolioSummary(mode)` to compute Unrealized/Realized PnL and last-closed items.
  - `buildClosedPositionsSummaryMessage()` for `/portfolio` rendering.
- Logs: use `getLogTailSnapshot()` from `src/utils/logger.ts`; trim to last `n` lines (server-side split) and wrap in a code block.
- Status: compute RTDS status by checking `lastRtdsMessageTimeMs` staleness (e.g., idle > 60s = disconnected). Use DB counts for open positions and reuse `getPortfolioSummary` for PnL.
- Positions: query open positions, compute UPNL from `unrealizedPnlUsd`, and render a compact table (code block). Keep small width; show up to 100 rows; paginate later if needed.
- Position detail: join via `loadMetaForPosition(id)`; include tokenId, entry price avg, current price, unrealized PnL, leader and event link; add emojis.

6) Guarded Mutations
- Thread-safety: use the existing `IExecutionProvider` instance from `main-loop` by injecting it into `startDiscordBot`. Close operations call `executionProvider.closePosition({ positionId, reason: 'MANUAL', source: 'manual', ingestSource: 'manual' })`.
- Non-blocking: acknowledge with an ephemeral reply, then perform close; send follow-up ephemeral result (success/fail). Interaction token validity is 15 minutes—sufficient for follow-ups [Receiving and Responding](https://discord.com/developers/docs/interactions/receiving-and-responding).

7) Wire-up in Main Loop
- In `src/core/app/main-loop.ts`, after provider is ready and notifier/listeners registered, call `startDiscordBot({ executionProvider: provider, env, notifier })`. Ensure failures don’t crash the bot.

8) Metrics & Logging
- Log each command execution with timing and principal (Discord user). Keep logs concise.
- Emit counters via `incrementCounter('discord.command', { name: cmd })`.

9) Emojis & UX
- Use emojis for headings/status: ✅/🟥 for ok/fail, 📊 for stats, 🧮 for PnL, 📜 for logs, 🔧 for actions.
- Ephemeral replies by default to avoid channel noise. Offer a `public` boolean option later if needed.

10) Rate limits + Perf
- Autocomplete queries: limit to 20 suggestions and short labels (`"#123 · UPNL +1.23 USDC"`). Discord overall command content must stay under 8000 chars [Slash command limits](https://discord.com/developers/docs/interactions/application-commands#slash-commands).
- Defer initial replies when DB queries might exceed ~500ms; edit the reply when ready.

### 💻 Specs

Models / Schemas (no DB migrations needed)
- We reuse existing tables. Optionally, add a covering index later if `/positions` proves slow.

Classes
- `DiscordCommandRegistrar`
  - Purpose: Register commands to guild or global.
  - Methods:
    - `registerGuildCommands(appId: string, guildId: string, token: string, defs: RESTPostAPIApplicationCommandsJSONBody[]): Promise<void>`
    - `registerGlobalCommands(appId: string, token: string, defs: RESTPostAPIApplicationCommandsJSONBody[]): Promise<void>`

Functions (typed)
```ts
// src/rpc/discord/commands.ts
export type CommandName = 'status' | 'logs' | 'portfolio' | 'positions' | 'position' | 'close' | 'close-all';

export interface CommandContext {
    mode: import('@/core/domain/execution').ExecutionMode;
    executionProvider: import('@/core/domain/execution').IExecutionProvider;
}

export interface AutocompleteItem { name: string; value: number; }

export function buildSlashCommandDefs(): import('discord-api-types/v10').RESTPostAPIApplicationCommandsJSONBody[];
export function handleCommand(name: CommandName, options: Record<string, unknown>, ctx: CommandContext): Promise<{ content: string; ephemeral?: boolean }>;
export function handleAutocomplete(name: CommandName, focused: string, ctx: CommandContext): Promise<AutocompleteItem[]>;
```

Library Calls (Discord)
```ts
// Client runtime
import { Client, GatewayIntentBits, Partials, Interaction, AutocompleteInteraction, ChatInputCommandInteraction } from 'discord.js';

const client = new Client({ intents: [GatewayIntentBits.Guilds] });
client.on('ready', () => logger.success({ tag: 'discord-bot' }, 'Discord bot ready'));
client.on('interactionCreate', async (interaction: Interaction) => { /* route */ });
await client.login(process.env.DISCORD_BOT_TOKEN!);
```

```ts
// Registration via REST
import { REST, Routes } from 'discord.js';
const rest = new REST({ version: '10' }).setToken(token);
await rest.put(Routes.applicationGuildCommands(appId, guildId), { body: defs });
// For global:
await rest.put(Routes.applicationCommands(appId), { body: defs });
```

API Contracts (Discord)
- Slash commands and interactions per official docs: [Application Commands](https://discord.com/developers/docs/interactions/application-commands), [Receiving & Responding](https://discord.com/developers/docs/interactions/receiving-and-responding), [Autocomplete](https://discord.com/developers/docs/interactions/application-commands#autocomplete).
- Timeouts: initial response within 3s; tokens valid 15m for follow-ups.

Config & Feature Flags
- `DISCORD_BOT_TOKEN` (string, required to start bot). Example: `"Bot x.y.z"` token.
- `DISCORD_APP_ID` (string, required for registration).
- `DISCORD_GUILD_ID` (string, recommended for fast dev updates).

Observability
- Counters: `discord.command` { name }, `discord.autocomplete` { name }, `discord.error` { name }.
- Logs include latency and rows returned for DB-heavy calls.

Security
- Validate `n` for `/logs` (1–500). Validate `id` is numeric and belongs to current `mode` when acting.

Perf
- Autocomplete limited to 20 results; DB queries indexed fields.
- Use deferred replies for long ops.

### 📂 Files Involved

🟦 TO READ AND UNDERSTAND FIRST
- `/home/probi/swe/repo/polymarket-copy-bot/src/core/app/main-loop.ts` — wiring point to start the bot.
- `/home/probi/swe/repo/polymarket-copy-bot/src/utils/logger.ts` — getLogTailSnapshot.
- `/home/probi/swe/repo/polymarket-copy-bot/src/utils/external-helpers.ts` — portfolio summary helpers.
- `/home/probi/swe/repo/polymarket-copy-bot/src/core/data-ingestion/polymarket-rtds.ts` — `lastRtdsMessageTimeMs` for RTDS status.
- `/home/probi/swe/repo/polymarket-copy-bot/src/core/store/schema.ts` — position and related tables.

🟨 MODIFY
- `/home/probi/swe/repo/polymarket-copy-bot/package.json` — add deps and scripts (register commands).
- `/home/probi/swe/repo/polymarket-copy-bot/src/core/app/main-loop.ts` — call `startDiscordBot(...)` after provider ready.
- `/home/probi/swe/repo/polymarket-copy-bot/.env.*` — add new envs.

🟩 CREATE
- `/home/probi/swe/repo/polymarket-copy-bot/src/rpc/discord/commands.ts` — command defs/handlers.
- `/home/probi/swe/repo/polymarket-copy-bot/src/rpc/discord-bot.ts` — gateway client and router.
- `/home/probi/swe/repo/polymarket-copy-bot/scripts/register-discord-commands.ts` — one-off command registrar.

🟥 DELETE
- None.

### 🧭 Optional Visuals

```mermaid
sequenceDiagram
  participant User
  participant Discord
  participant Bot
  participant DB
  User->>Discord: /position id:123
  Discord->>Bot: InteractionCreate (3s window)
  Bot->>Discord: deferReply(ephemeral)
  Bot->>DB: select position + meta + current price
  DB-->>Bot: rows
  Bot->>Discord: editReply(details)
```

### 🌐 Helpful Tool Results (as tool’s session_id)
- Discord docs fetch: `smart_fetch_url_multiple/we_need_authoritative_details_for_discord_slash_commands_responses_and_autocomplete_to_write_an_accurate_plan_with_citations/z8ykatabeo`

### 📚 References
- Discord Application Commands (Slash Commands): https://discord.com/developers/docs/interactions/application-commands
- Receiving and Responding to Interactions (timeouts, ephemeral, followups): https://discord.com/developers/docs/interactions/receiving-and-responding
- Autocomplete: https://discord.com/developers/docs/interactions/application-commands#autocomplete

Why these: Official Discord developer docs ensure correct, current contracts and limits.

### ▶️ Plan Summary

1. Add `discord.js` + REST deps and env vars; register commands to guild.
2. Implement typed command defs, autocomplete, and handlers (DRY helpers reused).
3. Wire `startDiscordBot` into `main-loop` with injected `executionProvider` and `mode` context.
4. Implement guarded `/close` and `/close-all`; make replies ephemeral with emojis and tables.
5. Log/metrics for observability; keep all operations non-blocking and within 3s initial response.

### 🔴 IMPORTANT REMINDERS
- Initial reply within 3 seconds; use deferral if needed.
- Keep autocomplete to ≤20 items and concise labels.
- Protect close commands via user allowlist; default deny if not configured.
- Don’t block execution critical paths; bot runs independently and uses short DB queries.

]]>
</file>
<file path=".dev/md/plans/2025/10/07/do not change.md">
<![CDATA[
<|PLAN_FORMAT_START|>
# Plan: Discord Bot with Slash Commands, Autocomplete, and Portfolio Controls

## 👤 User's Original Message
Original User Message:
```txt
/PLAN_X 

- [ ]  Add Discord Bot (Important: Include emojis for UI and UX | Ensure you use the Discord Slash Commands API that has autocompletes for UX - not manual slash commands | Ensure DRY in code)
    - [ ]  /status - Returns bot states such as essential statuses like RTDS status (is connected/disconnected), WS statuses, Num Current Open Positions, Current Unrealized PnL, Lifetime Realized PnL
    - [ ]  /logs [n] - Returns last n lines of human logs
    - [ ]  /portfolio - Same as portfolio summary
    - [ ]  /positions - Returns all current running positions, table formatted
        - [ ]  Cols: ID, UPNL
    - [ ]  /position [id] - Returns position details. Format is same as Position Opened from Discord Webhook, but include token id/asset id below Market Link, and include Entry Price (Avg) below Entry Price, and include Current Price below Entry Price (Avg), and include Unrealized PNL below Current Price
    - [ ]  /close [id] - Force close pos by id
    - [ ]  /close-all - Force close all running pos
```

## Proposed Plan

### ❌ Critical Information Needed
None blocking. We can safely proceed with guild-scoped commands first to avoid global propagation delays.

### ⚠️ Initial Best Assumptions to Address Ambiguities
1. MODERATE: Discord bot token and application (client) ID will be provided via env. -> We'll add validated env vars and guard startup.
2. MODERATE: Commands will be registered per-guild in `local/test` envs and optionally globally for production. -> Provide scripts for both.
3. MODERATE: Max log lines `n` default to 50 if omitted; cap to 500 for safety. -> Prevent spam and meet UX.

### ☁️ Current State
1. TypeScript Node service with strict typing; pnpm; dotenvx; Drizzle PostgreSQL; main entry `src/index.ts` -> `run()` in `src/core/app/main-loop.ts`.
2. Discord Webhook notifications already exist in `src/notify/discord-webhook.ts` and listeners in `src/notify/listeners.ts`.
3. Utilities available:
   - `getLogTailSnapshot()` in `src/utils/logger.ts` for logs
   - Portfolio helpers in `src/utils/external-helpers.ts`: `getPortfolioSummary`, `buildClosedPositionsSummaryMessage`, `loadMetaForPosition`
4. Placeholder file `src/rpc/discord-bot.ts` (empty) ready for bot implementation.

### 🌟 Desired Goal State
1. Slash-command Discord bot running inside the same process as the main app (optional toggle), exposing:
   - `/status`, `/logs`, `/portfolio`, `/positions`, `/position`, `/close`, `/close-all`
2. Autocomplete UX for `/position` (id argument) and for `/logs n` numeric helper.
3. Responses use embeds, emojis, ephemeral responses where appropriate, and follow DRY helpers.
4. Commands registered per-guild in dev; script available for global production registration.

### 🛣️ Brainstorm Implementation Approaches
* Approach 1: Use discord.js v14 Client + REST registerer in-process.
  - Pros: Mature, typed, great docs; easy Autocomplete; resilient.
  - Cons: Adds dependency; needs gateway connection.
* Approach 2: Raw Discord REST/websocket implementation.
  - Pros: Minimal deps.
  - Cons: Reinventing client; higher maintenance.
* Approach 3: Separate microservice.
  - Pros: Isolation.
  - Cons: Extra infra, complexity.

Chosen Approach: 1 — discord.js v14 in-process for fastest delivery, rich features, and typings.

Rollback: Feature flag to disable the Discord bot without code removal; no DB migrations.

### 🗺️ Very Detailed Plan
1. Dependencies and env
   - Add `discord.js` and `@discordjs/rest`, `discord-api-types` to deps.
   - Env vars (validated in `src/core/config/env.ts`):
     - `DISCORD_BOT_TOKEN` (string, required when ENABLE_DISCORD_BOT=true)
     - `DISCORD_APP_ID` (string)
     - `DISCORD_GUILD_IDS` (comma-separated list for dev registration)
     - `ENABLE_DISCORD_BOT` (boolean; default false)
   - Rationale: Required to login a gateway client and register commands.

2. Command registration script (non-interactive CLI)
   - Create `scripts/discord-register-commands.ts`:
     - Reads commands built in `src/rpc/discord-bot.ts` (export JSON defs)
     - Uses REST `PUT` routes for guild(s) during local; global for production
     - Per docs: Register via HTTP; upsert behavior [Application Commands](https://discord.com/developers/docs/interactions/application-commands#registering-a-command). Limit: 25 options per command.

3. Bot runtime integration
   - Implement `src/rpc/discord-bot.ts`:
     - Export `startDiscordBot(env, deps): { stop(): Promise<void> }`
     - Inside: create `Client` with intents `Guilds` only; hook `interactionCreate`.
       - Autocomplete: detect `interaction.isAutocomplete()` and return suggestions.
       - Commands: detect `interaction.isChatInputCommand()` and route.
       - Use `interaction.reply({ embeds, flags: MessageFlags.Ephemeral })` for ephemeral where useful. `ephemeral` is deprecated; use `flags` [InteractionReplyOptions](https://discord.js.org/docs/packages/discord.js/stable/InteractionReplyOptions:Interface).

4. DRY helper layer for embeds and formatting
   - Create `src/rpc/discord/ui.ts`:
     - `embed(title, fields, color)` returning APIEmbed
     - Emoji constants; table builder for monospaced columns
     - `formatPositionDetails()` reusing `loadMetaForPosition` and helpers from `utils/external-helpers`

5. Implement commands
   - `/status`
     - Show: RTDS status (connected/disconnected) via `lastRtdsMessageTimeMs` age from `src/core/data-ingestion/polymarket-rtds.ts`, open positions count (DB), unrealized/realized via `getPortfolioSummary`.
   - `/logs n?`
     - Optional integer with autocomplete (suggest 25, 50, 100, 200, 500). Use `getLogTailSnapshot(maxChars)` and slice to n lines; return as code block. Cap n to 500.
   - `/portfolio`
     - Use `getPortfolioSummary` + `buildClosedPositionsSummaryMessage`, post embed.
   - `/positions`
     - Query open positions for current mode; render table with columns: ID, UPNL (current unrealized per position), include emojis.
   - `/position id`
     - Autocomplete id from recent open/closed positions; show embed: Market Link, Token/Asset ID, Entry Price, Entry Price (Avg), Current Price, Unrealized PnL.
   - `/close id`
     - Calls provider.closePosition with reason `MANUAL`, source `manual`.
   - `/close-all`
     - Iterate open positions; call closePosition with reason `MANUAL`.
   - All DB access via existing schema; mode aware (dry_run/live).

6. Autocomplete behavior
   - Use Discord Autocomplete per spec (focused option true; choices cannot co-exist) [Autocomplete](https://discord.com/developers/docs/interactions/application-commands#autocomplete).
   - `/position id` -> suggest top 25 open position IDs by recency; `/logs n` -> suggest list [25,50,100,200,500].

7. Safety, limits, and UX
   - Ephemeral responses for `/logs` and `/close*`; non-ephemeral for portfolio summaries.
   - Guard long outputs with truncation; log dev-only warnings when truncating.
   - Emojis: ✅/🟥/✳️/📈/📉/🧮/🧰 for sections.

8. Wire into main-loop
   - In `src/core/app/main-loop.ts`, after bot started event, conditionally start Discord bot if `ENABLE_DISCORD_BOT` true. Reuse notifier fields in logs, but keep separate.

9. Scripts
   - Add pnpm scripts:
     - `discord:register:guild` (per env GUILD_IDS)
     - `discord:register:global`
     - `discord:dev` (run bot with app)

10. Rollback
   - Set `ENABLE_DISCORD_BOT=false` to disable. Commands can remain registered; no runtime impact.

Traceability bullets:
- Slash commands + autocomplete → steps 2–6
- Status/logs/portfolio/positions/position/close/close-all → step 5
- Emojis, embeds, UX → steps 4–5,7
- DRY → step 4

### 💻 Specs

Models / Schemas: no DB schema changes.

Classes
```ts
// src/rpc/discord-bot.ts
export interface DiscordBotDeps {
    getMode(): 'dry_run' | 'live';
    closePosition(args: { positionId: number }): Promise<void>;
}
export function startDiscordBot(env: Env, deps: DiscordBotDeps): Promise<{ stop(): Promise<void> }>; // starts client, registers handlers
```

Functions
```ts
// src/rpc/discord/ui.ts
export function buildEmbed(params: { title: string; description?: string; fields?: { name: string; value: string; inline?: boolean }[]; color?: number }): APIEmbed;
export function table(columns: string[], rows: string[][]): string; // returns monospaced table inside ```
export function positionDetailEmbed(positionId: number): Promise<APIEmbed>; // uses loadMetaForPosition, DB reads
```

Libraries Involved
- discord.js v14 — Client, events, embed building, interaction replies [(Client)](https://discord.js.org/docs/packages/discord.js/stable/Client:Class)
- Discord Dev Portal — command registration/Autocomplete [(Application Commands)](https://discord.com/developers/docs/interactions/application-commands), [(Autocomplete)](https://discord.com/developers/docs/interactions/application-commands#autocomplete)

API Call Snippets
```ts
// Register per-guild
await rest.put(
  Routes.applicationGuildCommands(appId, guildId),
  { body: commands }
);

// Global
await rest.put(
  Routes.applicationCommands(appId),
  { body: commands }
);
```

Reply Options
```ts
// Ephemeral reply in v14: prefer flags
await interaction.reply({
  content: 'Done',
  flags: MessageFlags.Ephemeral,
});
```

Config & Feature Flags
```ts
// src/core/config/env.ts additions
DISCORD_BOT_TOKEN: z.string().optional(),
DISCORD_APP_ID: z.string().optional(),
DISCORD_GUILD_IDS: z.string().optional(), // comma list
ENABLE_DISCORD_BOT: z.string().optional().transform(v => v ? v.toLowerCase() === 'true' : false),
```

Observability
- Counters: `discord.commands.invoked`, `discord.commands.error`
- Logs around registration and interaction handling.

### 📂 Files Involved

🟦 TO READ FIRST
- `/home/probi/swe/repo/polymarket-copy-bot/src/utils/logger.ts` — logs snapshot helper
- `/home/probi/swe/repo/polymarket-copy-bot/src/utils/external-helpers.ts` — portfolio and meta helpers
- `/home/probi/swe/repo/polymarket-copy-bot/src/core/app/main-loop.ts` — startup wiring

🟨 MODIFY
- `/home/probi/swe/repo/polymarket-copy-bot/src/core/config/env.ts` — add envs
- `/home/probi/swe/repo/polymarket-copy-bot/src/core/app/main-loop.ts` — start bot when enabled
- `/home/probi/swe/repo/polymarket-copy-bot/package.json` — add scripts and deps

🟩 CREATE
- `/home/probi/swe/repo/polymarket-copy-bot/src/rpc/discord-bot.ts` — bot runtime
- `/home/probi/swe/repo/polymarket-copy-bot/src/rpc/discord/ui.ts` — embeds/tables DRY
- `/home/probi/swe/repo/polymarket-copy-bot/scripts/discord-register-commands.ts` — registration CLI

🟥 DELETE
- None

### 🧭 Optional Visuals

```mermaid
sequenceDiagram
    participant User
    participant Discord
    participant Bot
    participant DB
    User->>Discord: /position 123
    Discord->>Bot: interactionCreate (ChatInput)
    Bot->>DB: loadMetaForPosition(123)
    DB-->>Bot: meta, prices, pnl
    Bot-->>Discord: reply embed (non-ephemeral)
```

### 🌐 Helpful Tool Results (as tool’s session_id)
- Docs: smart_fetch_url_multiple/fetch_official_docs_pages_to_cite_and_ensure_correct_apis_for_discord_slash_commands_deployment_and_autocomplete/mp69lsskz8
- Docs: smart_fetch_url_multiple/collect_official_docs_citations_for_implementing_discord_slash_commands_autocomplete_and_reply_flags_in_discord_js_v14_and_discord_dev_portal/j5yw1fqqgx
- Repo scan: codebase_search/find_existing_placeholders_or_integration_points_for_discord_bot/gvmpzsdxt4
- Repo scan: codebase_search/locate_functions_for_logs_and_portfolio_summary/94tytxcxjo

### 📚 References
- Discord Application Commands (Slash, Autocomplete, Limits): https://discord.com/developers/docs/interactions/application-commands
- discord.js InteractionReplyOptions (ephemeral flags): https://discord.js.org/docs/packages/discord.js/stable/InteractionReplyOptions:Interface
- discord.js Client interactionCreate event: https://discord.js.org/docs/packages/discord.js/stable/Client:Class

### ▶️ Plan Summary
1. Add envs + dependencies; create registration script.
2. Implement `startDiscordBot` with handlers for ChatInput and Autocomplete.
3. Build DRY UI helpers and all requested commands.
4. Wire the bot under a feature flag; add pnpm scripts for registration.
5. Deploy guild-scoped in dev; optional global in prod.

### 🔴 IMPORTANT REMINDERS
- Don’t mix `choices` with `autocomplete` on the same option (Discord spec).
- Use `flags: MessageFlags.Ephemeral` in replies, not deprecated `ephemeral`.
- Cap outputs and use ephemeral for sensitive responses.
<|PLAN_FORMAT_END|>

]]>
</file>
<file path="scripts/register-discord-commands.ts">
<![CDATA[
import { loadDiscordEnv } from '@/core/config/env-discord';
import { buildSlashCommandDefs } from '@/rpc/discord/discord-commands';
import { createLogger } from '@/utils/telemetry/logger';

const logger = createLogger({ tag: 'discord.register' });

async function sleep(ms: number): Promise<void> {
    await new Promise((resolve) => setTimeout(resolve, ms));
}

async function putRawJson(url: string, token: string, payloadJson: string, label: string): Promise<void> {
    let attempts = 0;
    while (true) {
        const res = await fetch(url, {
            method: 'PUT',
            headers: {
                'Content-Type': 'application/json',
                Authorization: `Bot ${token}`,
            },
            body: payloadJson,
        });
        if (res.status === 429) {
            const h1 = res.headers.get('retry-after');
            const h2 = res.headers.get('x-ratelimit-reset-after');
            const retryMs = Math.max(0, Math.ceil(parseFloat(h1 ?? h2 ?? '1') * 1000));
            attempts += 1;
            logger.warn({ label, attempts, retryMs }, 'rate_limited_retry');
            if (attempts > 5) {
                throw new Error(`Discord rate limit: exceeded retries for ${label}`);
            }
            await sleep(retryMs);
            continue;
        }
        if (!res.ok) {
            const body = await res.text();
            throw new Error(`Discord API error (${label}): ${res.status} ${body}`);
        }
        return;
    }
}

async function main(): Promise<void> {
    const env = loadDiscordEnv();
    const scopeArg = process.argv.find((a) => a.startsWith('--scope=')) ?? '--scope=guild';
    const scope = scopeArg.split('=')[1] ?? 'guild';

    const token = env.DISCORD_BOT_TOKEN;
    const appId = env.DISCORD_APP_ID;
    const guildId = env.DISCORD_GUILD_ID;
    const channelId = env.DISCORD_CHANNEL_ID;

    if (!token) throw new Error('DISCORD_BOT_TOKEN is required');
    if (!appId) throw new Error('DISCORD_APP_ID is required');

    // Preflight: verify token belongs to the specified application
    const meRes = await fetch('https://discord.com/api/v10/users/@me', {
        method: 'GET',
        headers: { Authorization: `Bot ${token}` },
    });
    if (!meRes.ok) {
        const body = await meRes.text();
        throw new Error(`Discord token validation failed: ${meRes.status} ${body}`);
    }
    const me = (await meRes.json()) as { id?: string } | unknown;
    const userId = (me as any)?.id ? String((me as any).id) : undefined;
    if (!userId) {
        throw new Error('Discord token validation succeeded but no user id returned');
    }
    if (String(userId) !== String(appId)) {
        throw new Error(
            `Bot token user id does not match DISCORD_APP_ID. token.userId=${userId} env.DISCORD_APP_ID=${String(appId)}`
        );
    }

    const defs = buildSlashCommandDefs();

    let url: string;
    if (scope === 'global') {
        url = `https://discord.com/api/v10/applications/${appId}/commands`;
    } else {
        if (!guildId) throw new Error('DISCORD_GUILD_ID is required for guild scope');
        url = `https://discord.com/api/v10/applications/${appId}/guilds/${guildId}/commands`;
    }

    // Force wipe using bulk overwrite (minimizes requests and avoids 429s)
    try {
        const globalUrl = `https://discord.com/api/v10/applications/${appId}/commands`;
        const guildUrl = guildId
            ? `https://discord.com/api/v10/applications/${appId}/guilds/${guildId}/commands`
            : undefined;
        logger.info('Wiping all global commands via bulk overwrite');
        await putRawJson(globalUrl, token, '[]', 'wipe_global');
        if (guildUrl) {
            logger.info({ guildId }, 'Wiping all guild commands via bulk overwrite');
            await putRawJson(guildUrl, token, '[]', 'wipe_guild');
        }
        logger.success('Command wipe completed');
    } catch (wipeErr) {
        logger.warn({ err: wipeErr }, 'wipe_commands_warning');
    }

    logger.info({ scope, url, count: defs.length }, 'Upserting Discord application commands');
    await putRawJson(url, token, JSON.stringify(defs), 'upsert_commands');
    logger.success('Commands registered');
}

main().catch((err) => {
    logger.error({ err }, 'register_commands_failed');
    process.exit(1);
});

]]>
</file>
<file path="src/notify/discord-webhook.ts">
<![CDATA[
import { z } from 'zod';
import { createLogger } from '@/utils/telemetry/logger';

const logger = createLogger({ tag: 'discord-webhook' });

const FieldSchema = z.object({
    name: z.string(),
    value: z.string(),
    inline: z.boolean().optional(),
});
const MessageSchema = z.object({
    title: z.string(),
    description: z.string().optional(),
    fields: z.array(FieldSchema).optional(),
    color: z.number().int().optional(),
});

export class DiscordWebhookNotifier {
    private readonly webhookUrl: string | undefined;
    private static readonly TIMEOUT_MS = 1500;
    constructor(webhookUrl: string | undefined) {
        this.webhookUrl = webhookUrl;
    }

    async sendMessage(payload: {
        title: string;
        description?: string;
        fields?: { name: string; value: string; inline?: boolean }[];
        color?: number;
    }): Promise<void> {
        // Fire-and-forget: schedule and resolve immediately to avoid blocking callers
        setTimeout(() => {
            void (async () => {
                try {
                    const parsed = MessageSchema.safeParse(payload);
                    if (!parsed.success) {
                        logger.warn(
                            { err: parsed.error.message, title: payload.title },
                            'Discord payload validation failed'
                        );
                        return;
                    }
                    if (!this.webhookUrl) {
                        logger.debug(
                            { title: payload.title },
                            'Discord webhook not configured; skipping send'
                        );
                        return; // silently noop if not configured
                    }
                    const body = {
                        embeds: [
                            {
                                title: payload.title,
                                description: payload.description,
                                fields: payload.fields,
                                color: payload.color,
                            },
                        ],
                    };
                    const controller = new AbortController();
                    const timer = setTimeout(
                        () => controller.abort(),
                        DiscordWebhookNotifier.TIMEOUT_MS
                    );
                    try {
                        logger.debug({ title: payload.title }, 'Sending Discord webhook');
                        const res = await fetch(this.webhookUrl, {
                            method: 'POST',
                            headers: { 'Content-Type': 'application/json' },
                            body: JSON.stringify(body),
                            signal: controller.signal,
                        });
                        if (!res.ok) {
                            logger.warn(
                                { status: res.status, title: payload.title },
                                'Discord webhook returned non-OK'
                            );
                        } else {
                            logger.success({ title: payload.title }, 'Discord webhook sent');
                        }
                    } catch (err) {
                        logger.warn({ err, title: payload.title }, 'Discord webhook send failed');
                    } finally {
                        clearTimeout(timer);
                    }
                } catch (err) {
                    logger.warn({ err, title: payload.title }, 'Discord sendMessage error');
                }
            })();
        }, 0);
        return;
    }
}

]]>
</file>
<file path="src/utils/safe-enc-dec.ts">
<![CDATA[
import { randomBytes, scryptSync, createCipheriv, createDecipheriv } from "node:crypto";

const ALGORITHM = "aes-256-gcm" as const;
const SALT_LENGTH = 16;
const IV_LENGTH = 12;
const KEY_LENGTH = 32;
const TAG_LENGTH = 16;
const VERSION_PREFIX = "v1.";
const APP_ENC_PP = "polymarket-copy-bot-4fea1f8f10940f33bcfea88a65d383d61fddd79d"  // DO NOT CHANGE THIS!

type EncParams = { text: string; pp: string };
type DecParams = { enc: string; pp: string };

export function enc({ text, pp }: EncParams): string {
    if (typeof text !== "string") {
        throw new TypeError("text must be a string");
    }
    if (typeof pp !== "string" || pp.length === 0) {
        throw new TypeError("pp must be a non-empty string");
    }

    const salt = randomBytes(SALT_LENGTH);
    const key = scryptSync(Buffer.from(pp, "utf8"), salt, KEY_LENGTH);
    const iv = randomBytes(IV_LENGTH);

    const cipher = createCipheriv(ALGORITHM, key, iv);
    const ciphertext = Buffer.concat([cipher.update(Buffer.from(text, "utf8")), cipher.final()]);
    const authTag = cipher.getAuthTag();

    // payload layout: [salt | iv | tag | ciphertext]
    const payload = Buffer.concat([salt, iv, authTag, ciphertext]);
    return VERSION_PREFIX + payload.toString("base64");
}

export function dec({ enc: enced, pp }: DecParams): string {
    if (typeof enced !== "string" || !enced.startsWith(VERSION_PREFIX)) {
        throw new TypeError("invalid enced payload format");
    }
    if (typeof pp !== "string" || pp.length === 0) {
        throw new TypeError("pp must be a non-empty string");
    }

    const payloadB64 = enced.slice(VERSION_PREFIX.length);
    const payload = Buffer.from(payloadB64, "base64");

    if (payload.length < SALT_LENGTH + IV_LENGTH + TAG_LENGTH) {
        throw new Error("enced payload too short");
    }

    const salt = payload.subarray(0, SALT_LENGTH);
    const iv = payload.subarray(SALT_LENGTH, SALT_LENGTH + IV_LENGTH);
    const tagStart = SALT_LENGTH + IV_LENGTH;
    const authTag = payload.subarray(tagStart, tagStart + TAG_LENGTH);
    const ciphertext = payload.subarray(tagStart + TAG_LENGTH);

    const key = scryptSync(Buffer.from(pp, "utf8"), salt, KEY_LENGTH);
    const decipher = createDecipheriv(ALGORITHM, key, iv);
    decipher.setAuthTag(authTag);

    const plaintext = Buffer.concat([decipher.update(ciphertext), decipher.final()]);
    return plaintext.toString("utf8");
}

export function appEnc(text: string) {
    return enc({ text, pp: APP_ENC_PP });
}

export function appDec(enc: string) {
    return dec({ enc: enc, pp: APP_ENC_PP });
}
]]>
</file>
<file path="tests/integration/dry-run-inventory.test.ts">
<![CDATA[
import { describe, it, beforeEach, afterEach, beforeAll, expect } from 'vitest';

// IMPORTANT: Ensure DATABASE_URL points to a test database BEFORE importing db
// The project resolves aliases like @/ via tsconfig paths
import { db } from '@/core/store/db';
import { positionTable, copyOrderTable } from '@/core/store/schema';
import { DiscordWebhookNotifier } from '@/notify/discord-webhook';
import { Executor } from '@/core/exec/executor';
import { DryRunExecutionProvider } from '@/core/exec/providers/dry-run-execution-provider';
import type { LeaderConfig } from '@/core/config/config';
import type { TradeFeedMessage } from '@/core/domain/trade';
import { and, eq } from 'drizzle-orm';
import type { Address } from '@/core/domain/common';
import { resetDb } from '../test-helpers';

function createExecutorForTest(leaders: LeaderConfig[]): Executor {
    const provider = new DryRunExecutionProvider();
    const notifier = new DiscordWebhookNotifier(undefined);
    return new Executor({
        executionProvider: provider,
        discord: notifier,
        maxSlippageBps: 50,
        globalMaxPositions: 9999,
        leaders,
        orderType: 'FOK',
        globalMaxUsdcInvested: 1_000_000,
        orderThrottleMs: 0,
        buyPriceBlockLimit: 0.96,
    });
}

function trade(params: Partial<TradeFeedMessage>): TradeFeedMessage {
    return {
        asset: params.asset ?? 'token:TEST',
        bio: '',
        conditionId: params.conditionId ?? '0xcond',
        eventSlug: '',
        icon: '',
        name: '',
        outcome: params.outcome ?? 'Yes',
        outcomeIndex: 0,
        price: params.price ?? 0.5,
        profileImage: '',
        proxyWallet: params.proxyWallet ?? ('0x1111111111111111111111111111111111111111' as Address),
        pseudonym: '',
        side: params.side ?? 'BUY',
        size: params.size ?? 2,
        slug: '',
        timestamp: params.timestamp ?? Math.floor(Date.now() / 1000),
        title: '',
        transactionHash: params.transactionHash ?? `0x${Math.random().toString(16).slice(2).padEnd(64, '0')}`,
        ingestSource: params.ingestSource ?? 'sim',
        receivedAtMs: Date.now(),
    };
}

const TEST_LEADER = '0x1111111111111111111111111111111111111111' as Address;

const testLeaderCfg: LeaderConfig = {
    address: TEST_LEADER,
    displayName: 'Test Leader',
    maxPositions: 100,
    // Mirror trade.size 1:1 to amountUsdc for deterministic sizing in tests
    positionSizeUsdc: { kind: 'mirror_1to1' },
    positionExpiryMs: 60_000,
    categoriesAllowed: undefined,
    outcomesAllowed: undefined,
    copySidesAllowed: undefined,
};

beforeAll(() => {
    process.env.ERROR_LOG_ENABLED = 'false';
});

beforeEach(async () => {
    await resetDb();
});

afterEach(async () => {
    // Allow async eventBus/discord timers to settle before cleaning DB
    await new Promise((r) => setTimeout(r, 1));
    await resetDb();
});

describe('Dry run execution inventory netting & aggregation', () => {
    
    // Given: two BUY trades same token
    // When: they are processed
    // Then: only one open long exists with weighted-average entry
    it('aggregates multiple BUYs into a single open position with weighted average', async () => {
        // Given: empty DB, a leader, and two BUY trades on the same token
        const executor = createExecutorForTest([testLeaderCfg]);
        const tokenId = 'token:AGG';
        const t1 = trade({ proxyWallet: TEST_LEADER, asset: tokenId, side: 'BUY', size: 2, price: 0.20 });
        const t2 = trade({ proxyWallet: TEST_LEADER, asset: tokenId, side: 'BUY', size: 3, price: 0.40, timestamp: t1.timestamp + 1, transactionHash: '0x' + 'b'.repeat(64) });

        // When: handle both trades sequentially
        await executor.handleLeaderTrade(t1);
        await executor.handleLeaderTrade(t2);

        // Then: one open position exists; amountUsdc = 5; shares computed with BUY slippage (+0.5%)
        const rows = await db
            .select()
            .from(positionTable)
            .where(and(eq(positionTable.tokenId, tokenId), eq(positionTable.status, 'open')));
        expect(rows.length).toBe(1);
        const pos = rows[0]!;
        const sl = 0.005;
        const s1 = 2 / (0.20 * (1 + sl));
        const s2 = 3 / (0.40 * (1 + sl));
        const expectedShares = s1 + s2;
        const expectedAvg = 5 / expectedShares;
        expect(Number(pos.amountUsdc)).toBeCloseTo(5, 6);
        expect(Number(pos.sizeShares)).toBeCloseTo(expectedShares, 6);
        // Weighted-average price should be tracked in entryPriceAvg (entryPrice is the very first fill)
        expect(Number((pos as any).entryPriceAvg)).toBeCloseTo(expectedAvg, 6);
        // And entryPrice should remain the initial fill price (with BUY slippage applied)
        const firstEntry = 0.20 * (1 + sl); // 0.201
        expect(Number(pos.entryPrice)).toBeCloseTo(firstEntry, 6);
    });

    // Given: an open BUY exists
    // When: SELL for smaller notional arrives
    // Then: long is reduced (not closed), no new short is opened
    it('SELL reduces an existing BUY (partial reduce keeps open)', async () => {
        // Given: an open long created by a BUY
        const executor = createExecutorForTest([testLeaderCfg]);
        const tokenId = 'token:REDUCE';
        const buy = trade({ proxyWallet: TEST_LEADER, asset: tokenId, side: 'BUY', size: 10, price: 0.50, transactionHash: '0x' + 'c'.repeat(64) });
        await executor.handleLeaderTrade(buy);

        // When: a SELL arrives with amount less than inventory
        const sell = trade({ proxyWallet: TEST_LEADER, asset: tokenId, side: 'SELL', size: 5, price: 0.60, transactionHash: '0x' + 'd'.repeat(64), timestamp: buy.timestamp + 2 });
        await executor.handleLeaderTrade(sell);

        // Then: position remains open with reduced shares and updated amount (use slippage +/-0.5%)
        const rows = await db
            .select()
            .from(positionTable)
            .where(and(eq(positionTable.tokenId, tokenId), eq(positionTable.status, 'open')));
        expect(rows.length).toBe(1);
        const pos = rows[0]!;
        const sl = 0.005;
        const initialShares = 10 / (0.50 * (1 + sl));
        const reducedShares = 5 / (0.60 * (1 - sl));
        const expectedShares = initialShares - Math.min(initialShares, reducedShares);
        const avgEntry = 10 / initialShares;
        const expectedAmount = expectedShares * avgEntry;
        expect(Number(pos.sizeShares)).toBeCloseTo(expectedShares, 6);
        expect(Number(pos.amountUsdc)).toBeCloseTo(expectedAmount, 6);
        expect(String(pos.status)).toBe('open');

    });

    // Given: no inventory
    // When: SELL arrives
    // Then: request is skipped; no position or order is persisted
    it('SELL with no inventory creates no position', async () => {
        // Given: no positions for token
        const executor = createExecutorForTest([testLeaderCfg]);
        const tokenId = 'token:NOINV';

        // When: SELL arrives first
        const sell = trade({ proxyWallet: TEST_LEADER, asset: tokenId, side: 'SELL', size: 5, price: 0.30, transactionHash: '0x' + 'e'.repeat(64) });
        await executor.handleLeaderTrade(sell);

        // Then: there are no positions and no copy orders
        const posRows = await db
            .select()
            .from(positionTable)
            .where(eq(positionTable.tokenId, tokenId));
        expect(posRows.length).toBe(0);

        const coRows = await db
            .select()
            .from(copyOrderTable)
            .where(eq(copyOrderTable.desiredSide, 'SELL'));
        expect(coRows.length).toBe(0);

    });
});

]]>
</file>
</files>
<files>
<file path=".dev/docs/manual-poly-clob.ts">
<![CDATA[
`
POLYMARKET CLOB - CONCISE DOCS
==============================

TYPES
=====

import{SignatureType,SignedOrder}from"@polymarket/order-utils";import{AxiosRequestHeaders}from"axios";export interface ApiKeyCreds{key:string;secret:string;passphrase:string}export interface ApiKeyRaw{apiKey:string;secret:string;passphrase:string}export interface L2HeaderArgs{method:string;requestPath:string;body? :string}export interface L1PolyHeader extends AxiosRequestHeaders{POLY_ADDRESS:string;POLY_SIGNATURE:string;POLY_TIMESTAMP:string;POLY_NONCE:string}export interface L2PolyHeader extends AxiosRequestHeaders{POLY_ADDRESS:string;POLY_SIGNATURE:string;POLY_TIMESTAMP:string;POLY_API_KEY:string;POLY_PASSPHRASE:string}export declare enum Side{BUY="BUY",SELL="SELL"}export declare enum OrderType{GTC="GTC",FOK="FOK",GTD="GTD",FAK="FAK"}export interface PostOrdersArgs{order:SignedOrder;orderType:OrderType}export interface NewOrder<T extends OrderType>{readonlyorder:{readonlysalt:number;readonly maker:string;readonly signer:string;readonly taker:string;readonly tokenId:string;readonly makerAmount:string;readonly takerAmount:string;readonly expiration:string;readonly nonce:string;readonly feeRateBps:string;readonly side:Side;readonly signatureType:SignatureType;readonly signature:string};readonly owner:string;readonly orderType:T;readonly deferExec:boolean};export interface UserOrder{tokenID:string;price:number;size:number;side:Side;feeRateBps? :number;nonce? :number;expiration? :number;taker? :string}export interface UserMarketOrder{tokenID:string;price? :number;amount:number;side:Side;feeRateBps? :number;nonce? :number;taker? :string;orderType? :OrderType.FOK|OrderType.FAK}export interface OrderPayload{orderID:string}export interface ApiKeysResponse{apiKeys:ApiKeyCreds[]}export interface BanStatus{closed_only:boolean}export interface OrderResponse{success:boolean;errorMsg:string;orderID:string;transactionsHashes:string[];status:string;takingAmount:string;makingAmount:string}export interface OpenOrder{id:string;status:string;owner:string;maker_address:string;market:string;asset_id:string;side:string;original_size:string;size_matched:string;price:string;associate_trades:string[];outcome:string;created_at:number;expiration:string;order_type:string}export typeOpenOrdersResponse=OpenOrder[];export interface TradeParams{id? :string;maker_address? :string;market? :string;asset_id? :string;before? :string;after? :string}export interface OpenOrderParams{id? :string;market? :string;asset_id? :string}export interface MakerOrder{order_id:string;owner:string;maker_address:string;matched_amount:string;price:string;fee_rate_bps:string;asset_id:string;outcome:string;side:Side}export interface Trade{id:string;taker_order_id:string;market:string;asset_id:string;side:Side;size:string;fee_rate_bps:string;price:string;status:string;match_time:string;last_update:string;outcome:string;bucket_index:number;owner:string;maker_address:string;maker_orders:MakerOrder[];transaction_hash:string;trader_side:"TAKER"|"MAKER"}export declare enum Chain{POLYGON=137,AMOY=80002}export interface MarketPrice{t:number;p:number}export interface PriceHistoryFilterParams{market? :string;startTs? :number;endTs? :number;fidelity? :number;interval? :PriceHistoryInterval}export declare enum PriceHistoryInterval{MAX="max",ONE_WEEK="1w",ONE_DAY="1d",SIX_HOURS="6h",ONE_HOUR="1h"}export interface DropNotificationParams{ids:string[]}export interface Notification{type:number;owner:string;payload:any}export interface OrderMarketCancelParams{market? :string;asset_id? :string}export interface OrderBookSummary{market:string;asset_id:string;timestamp:string;bids:OrderSummary[];asks:OrderSummary[];min_order_size:string;tick_size:string;neg_risk:boolean;hash:string}export interface OrderSummary{price:string;size:string}export declare enum AssetType{COLLATERAL="COLLATERAL",CONDITIONAL="CONDITIONAL"}export interface BalanceAllowanceParams{asset_type:AssetType;token_id? :string}export interface BalanceAllowanceResponse{balance:string;allowance:string}export interface OrderScoringParams{order_id:string}export interface OrderScoring{scoring:boolean}export interface OrdersScoringParams{orderIds:string[]}export typeOrdersScoring={[orderId in string]:boolean};export typeCreateOrderOptions={tickSize:TickSize;negRisk? :boolean};export typeTickSize="0.1"|"0.01"|"0.001"|"0.0001";export interface RoundConfig{readonly price:number;readonly size:number;readonly amount:number}export interface TickSizes{[tokenId:string]:TickSize}export interface NegRisk{[tokenId:string]:boolean}export interface FeeRates{[tokenId:string]:number}export interface PaginationPayload{readonly limit:number;readonly count:number;readonly next_cursor:string;readonly data:any[]}export interface MarketTradeEvent{event_type:string;market:{condition_id:string;asset_id:string;question:string;icon:string;slug:string};user:{address:string;username:string;profile_picture:string;optimized_profile_picture:string;pseudonym:string};side:Side;size:string;fee_rate_bps:string;price:string;outcome:string;outcome_index:number;transaction_hash:string;timestamp:string}export interface BookParams{token_id:string;side:Side}export interface UserEarning{date:string;condition_id:string;asset_address:string;maker_address:string;earnings:number;asset_rate:number}export interface TotalUserEarning{date:string;asset_address:string;maker_address:string;earnings:number;asset_rate:number}export interface RewardsPercentages{[market:string]:number}export interface Token{token_id:string;outcome:string;price:number}export interface RewardsConfig{asset_address:string;start_date:string;end_date:string;rate_per_day:number;total_rewards:number}export interface MarketReward{condition_id:string;question:string;market_slug:string;event_slug:string;image:string;rewards_max_spread:number;rewards_min_size:number;tokens:Token[];rewards_config:RewardsConfig[]}export interface Earning{asset_address:string;earnings:number;asset_rate:number}export interface UserRewardsEarning{condition_id:string;question:string;market_slug:string;event_slug:string;image:string;rewards_max_spread:number;rewards_min_size:number;market_competitiveness:number;tokens:Token[];rewards_config:RewardsConfig[];maker_address:string;earning_percentage:number;earnings:Earning[]}

IMPORTANT: THIS IS NOT OUR CUSTOM DEFINED TYPE! To use Polymarket Clob Types, import from "@polymarket/clob-client":
import { OrderBookSummary } from "@polymarket/clob-client";

EXAMPLE 1
==========

await clobClient.getOrderBooks([{ token_id: "22131816317087462222441767751936061504662310118809793860064034214346537862051", side: Side.BUY }]);

[{"market":"0x6cb4d646f8a46b92d5201622c50ff6bf3a41556cf1059c20ba37c0cfbade1c13","asset_id":"22131816317087462222441767751936061504662310118809793860064034214346537862051","timestamp":"1759831913645","hash":"83c78a093583ce964bd8aebc2c01c76999e3bea4","bids":[{"price":"0.01","size":"1000"},{"price":"0.02","size":"460.05"},{"price":"0.03","size":"233.33"},{"price":"0.04","size":"10"},{"price":"0.06","size":"400"},{"price":"0.07","size":"384.14"},{"price":"0.08","size":"272.22"}],"asks":[{"price":"0.99","size":"1000"},{"price":"0.98","size":"6000"},{"price":"0.8","size":"300"},{"price":"0.79","size":"1332"},{"price":"0.78","size":"1272"},{"price":"0.7","size":"2000"},{"price":"0.69","size":"289"},{"price":"0.68","size":"6"},{"price":"0.36","size":"10.93"},{"price":"0.33","size":"20"},{"price":"0.32","size":"10"},{"price":"0.31","size":"25"},{"price":"0.26","size":"285.8"},{"price":"0.16","size":"9.07"},{"price":"0.14","size":"20"},{"price":"0.13","size":"210"},{"price":"0.11","size":"475.14"},{"price":"0.1","size":"409"}],"min_order_size":"5","tick_size":"0.01","neg_risk":true}]
`;

]]>
</file>
<file path=".dev/docs/manual-poly-data-api.md">
<![CDATA[

Developer Quickstart
API Rate Limits
​
How Rate Limiting Works
All rate limits are enforced using Cloudflare’s throttling system. When you exceed the maximum configured rate for any endpoint, requests are throttled rather than immediately rejected. This means:
Throttling: Requests over the limit are delayed/queued rather than dropped
Burst Allowances: Some endpoints allow short bursts above the sustained rate
Time Windows: Limits reset based on sliding time windows (e.g., per 10 seconds, per minute)
​
General Rate Limits
Endpoint	Limit	Notes
General Rate Limiting	5000 requests / 10s	Throttle requests over the maximum configured rate
”OK” Endpoint	50 requests / 10s	Throttle requests over the maximum configured rate
​
Data API Rate Limits
Endpoint	Limit	Notes
Data API (General)	100 requests / 10s	Throttle requests over the maximum configured rate
Data API (Alternative)	600 requests / 1 minute	1 hour block on violation
Data API /trades	30 requests / 10s	Throttle requests over the maximum configured rate
Data API “OK” Endpoint	10 requests / 10s	Throttle requests over the maximum configured rate
​
GAMMA API Rate Limits
Endpoint	Limit	Notes
GAMMA (General)	750 requests / 10s	Throttle requests over the maximum configured rate
GAMMA Get Comments	100 requests / 10s	Throttle requests over the maximum configured rate
GAMMA /events	100 requests / 10s	Throttle requests over the maximum configured rate
GAMMA /markets	100 requests / 10s	Throttle requests over the maximum configured rate
GAMMA /markets /events listing	100 requests / 10s	Throttle requests over the maximum configured rate
GAMMA Tags	100 requests / 10s	Throttle requests over the maximum configured rate
GAMMA Search	300 requests / 10s	Throttle requests over the maximum configured rate
​
CLOB API Rate Limits
​
General CLOB Endpoints
Endpoint	Limit	Notes
CLOB (General)	5000 requests / 10s	Throttle requests over the maximum configured rate
CLOB GET Balance Allowance	125 requests / 10s	Throttle requests over the maximum configured rate
CLOB UPDATE Balance Allowance	20 requests / 10s	Throttle requests over the maximum configured rate
​
CLOB Market Data
Endpoint	Limit	Notes
CLOB /book	200 requests / 10s	Throttle requests over the maximum configured rate
CLOB /books (website)	300 requests / 10s	Throttle requests over the maximum configured rate
CLOB /books	80 requests / 10s	Throttle requests over the maximum configured rate
CLOB /price	200 requests / 10s	Throttle requests over the maximum configured rate
CLOB /prices	80 requests / 10s	Throttle requests over the maximum configured rate
CLOB /midprice	200 requests / 10s	Throttle requests over the maximum configured rate
CLOB /midprices	80 requests / 10s	Throttle requests over the maximum configured rate
​
CLOB Ledger Endpoints
Endpoint	Limit	Notes
CLOB Ledger (/trades /orders /notifications /order)	300 requests / 10s	Throttle requests over the maximum configured rate
CLOB Ledger /data/orders	150 requests / 10s	Throttle requests over the maximum configured rate
CLOB Ledger /data/trades	150 requests / 10s	Throttle requests over the maximum configured rate
CLOB /notifications	125 requests / 10s	Throttle requests over the maximum configured rate
​
CLOB Markets & Pricing
Endpoint	Limit	Notes
CLOB Price History	100 requests / 10s	Throttle requests over the maximum configured rate
CLOB Markets	250 requests / 10s	Throttle requests over the maximum configured rate
CLOB Market Tick Size	50 requests / 10s	Throttle requests over the maximum configured rate
CLOB markets/0x	50 requests / 10s	Throttle requests over the maximum configured rate
CLOB /markets listing	100 requests / 10s	Throttle requests over the maximum configured rate
​
CLOB Authentication
Endpoint	Limit	Notes
CLOB API Keys	50 requests / 10s	Throttle requests over the maximum configured rate
​
CLOB Trading Endpoints
Endpoint	Limit	Notes
CLOB POST /order	2400 requests / 10s (240/s)	BURST - Throttle requests over the maximum configured rate
CLOB POST /order	24000 requests / 10 minutes (40/s)	Throttle requests over the maximum configured rate
CLOB POST /order (by token id)	800 requests / 10s (80/s)	BURST - Throttle requests over the maximum configured rate
CLOB POST /order (by token id)	12000 requests / 10 minutes (20/s)	Throttle requests over the maximum configured rate
CLOB DELETE /order	2400 requests / 10s (240/s)	BURST - Throttle requests over the maximum configured rate
CLOB DELETE /order	24000 requests / 10 minutes (40/s)	Throttle requests over the maximum configured rate
CLOB POST /orders	800 requests / 10s (80/s)	BURST - Throttle requests over the maximum configured rate
CLOB POST /orders	12000 requests / 10 minutes (20/s)	Throttle requests over the maximum configured rate
CLOB DELETE /orders	800 requests / 10s (80/s)	BURST - Throttle requests over the maximum configured rate
CLOB DELETE /orders	12000 requests / 10 minutes (20/s)	Throttle requests over the maximum configured rate
CLOB DELETE /cancel-all	200 requests / 10s (20/s)	BURST - Throttle requests over the maximum configured rate
CLOB DELETE /cancel-all	3000 requests / 10 minutes (5/s)	Throttle requests over the maximum configured rate
CLOB DELETE /cancel-market-orders	800 requests / 10s (80/s)	BURST - Throttle requests over the maximum configured rate
CLOB DELETE /cancel-market-orders	12000 requests / 10 minutes (20/s)	Throttle requests over the maximum configured rate
​
Other API Rate Limits
Endpoint	Limit	Notes
RELAYER /submit	15 requests / 1 minute	Throttle requests over the maximum configured rate
User PNL API	100 requests / 10s	Throttle requests over the maximum configured rate
Glossary


# Polymarket Documentation: Get Current Positions for a User

Returns positions filtered by user and optional filters.

### Endpoint

`GET /positions`

### Request Example (cURL)

```bash
curl --request GET \
  --url https://data-api.polymarket.com/positions
```

### Status Codes

| Status | Description |
| :----- | :---------- |
| 200    | Success     |
| 400    | Bad Request |
| 401    | Unauthorized |
| 500    | Internal Server Error |

### Query Parameters

| Parameter | Type | Required | Default | Description | Example |
| :--- | :--- | :--- | :--- | :--- | :--- |
| `user` | `string` | **required** | | User address (required) | `"0x56687bf447db6ffa42ffe2204a05edaa20f55839"` |
| `market` | `string[]` | | | Comma-separated list of condition IDs. Mutually exclusive with `eventId`. (0x-prefixed 64-hex string) | |
| `eventId` | `integer[]` | | | Comma-separated list of event IDs. Mutually exclusive with `market`. | |
| `sizeThreshold` | `number` | | `1` | Required range: `x >= 0` | |
| `redeemable` | `boolean` | | `false` | | |
| `mergeable` | `boolean` | | `false` | | |
| `limit` | `integer` | | `100` | Required range: `0 <= x <= 500` | |
| `offset` | `integer` | | `0` | Required range: `0 <= x <= 10000` | |
| `sortBy` | `enum<string>` | | `TOKENS` | Available options: `CURRENT`, `INITIAL`, `TOKENS`, `CASHPNL`, `PERCENTPNL`, `TITLE`, `RESOLVING`, `PRICE`, `AVGPRICE` | |
| `sortDirection` | `enum<string>` | | `DESC` | Available options: `ASC`, `DESC` | |
| `title` | `string` | | | Maximum length: 100 | |

### Response (200 Success - `application/json`)

List of positions

```json
[
  {
    "proxyWallet": "0x5adf695a088172a920b6d0b2e5b7d88aa8ffa5e7",
    "asset": "22532673444371000087276855698976185959891603058477427058498190868809631671643",
    "conditionId": "0x2b6a5170c30fbeba1b2317cf98929a446af82e2dc2bc5e84a07959b35bc2edbb",
    "size": 689.991638,
    "avgPrice": 0.212752,
    "initialValue": 146.797100967776,
    "currentValue": 141.44828579,
    "cashPnl": -5.348815177776009,
    "percentPnl": -3.6436790253440687,
    "totalBought": 699.991638,
    "realizedPnl": 0,
    "percentRealizedPnl": -5.020214340108156,
    "curPrice": 0.205,
    "redeemable": false,
    "mergeable": false,
    "title": "Will Celta Vigo win on 2025-10-05?",
    "slug": "lal-cel-mad-2025-10-05-cel",
    "icon": "https://polymarket-upload.s3.us-east-2.amazonaws.com/lal_celta_vigo.png",
    "eventId": "47924",
    "eventSlug": "lal-cel-mad-2025-10-05",
    "outcome": "Yes",
    "outcomeIndex": 0,
    "oppositeOutcome": "No",
    "oppositeAsset": "95416813017536330994120103652237010090486650775573169623122187070843615636364",
    "endDate": "2025-10-05",
    "negativeRisk": true
  },
  ...
]
```

#### Response Fields

| Field | Type | Description | Example |
| :--- | :--- | :--- | :--- |
| `proxyWallet` | `string` | User Profile Address (0x-prefixed, 40 hex chars) | `"0x56687bf447db6ffa42ffe2204a05edaa20f55839"` |
| `asset` | `string` | | |
| `conditionId` | `string` | 0x-prefixed 64-hex string | `"0xdd22472e552920b8438158ea7238bfadfa4f736aa4cee91a6b86c39ead110917"` |
| `size` | `number` | | |
| `avgPrice` | `number` | | |
| `initialValue` | `number` | | |
| `currentValue` | `number` | | |
| `cashPnl` | `number` | | |
| `percentPnl` | `number` | | |
| `totalBought` | `number` | | |
| `realizedPnl` | `number` | | |
| `percentRealizedPnl` | `number` | | |
| `curPrice` | `number` | | |
| `redeemable` | `boolean` | | |
| `mergeable` | `boolean` | | |
| `title` | `string` | | |
| `slug` | `string` | | |
| `icon` | `string` | | |
| `eventSlug` | `string` | | |
| `outcome` | `string` | | |
| `outcomeIndex` | `integer` | | |
| `oppositeOutcome` | `string` | | |
| `oppositeAsset` | `string` | | |
| `endDate` | `string` | | |
| `negativeRisk` | `boolean` | | |

---

*Other related endpoints mentioned:*

* Health check
* Get trades for a user or markets

# Polymarket Documentation: Get Trades for a User or Markets

## Core: Get trades for a user or markets

Returns trades filtered by user and/or market identifiers.

### Endpoint

`GET /trades`

### Request Example (cURL)

```bash
curl --request GET \
  --url https://data-api.polymarket.com/trades
```

### Status Codes

| Status | Description |
| :----- | :---------- |
| 200    | Success     |
| 400    | Bad Request |
| 401    | Unauthorized |
| 500    | Internal Server Error |

### Query Parameters

| Parameter | Type | Default | Required Range | Description | Example |
| :--- | :--- | :--- | :--- | :--- | :--- |
| `limit` | `integer` | `100` | `0 <= x <= 10000` | | |
| `offset` | `integer` | `0` | `0 <= x <= 10000` | | |
| `takerOnly` | `boolean` | `true` | | | |
| `filterType` | `enum<string>` | | | Must be provided together with `filterAmount`. Available options: `CASH`, `TOKENS`. | |
| `filterAmount` | `number` | | `x >= 0` | Must be provided together with `filterType`. | |
| `market` | `string[]` | | | Comma-separated list of condition IDs (0x-prefixed 64-hex string). Mutually exclusive with `eventId`. | |
| `eventId` | `integer[]` | | | Comma-separated list of event IDs. Mutually exclusive with `market`. | |
| `user` | `string` | | | User Profile Address (0x-prefixed, 40 hex chars). | `"0x56687bf447db6ffa42ffe2204a05edaa20f55839"` |
| `side` | `enum<string>` | | | Available options: `BUY`, `SELL`. | |

### Response (200 Success - `application/json`)

List of trades

```json
[
  {
    "proxyWallet": "0x5adf695a088172a920b6d0b2e5b7d88aa8ffa5e7",
    "side": "SELL",
    "asset": "10556390943081047040362703548123771402014160833887429090228355495495795329131",
    "conditionId": "0x1d221af524997a388c696773235bdf08740e620ee1e164659a1302272ffc6f14",
    "size": 129.1,
    "price": 0.22,
    "timestamp": 1759491562,
    "title": "Will Getafe win on 2025-10-03?",
    "slug": "lal-osa-get-2025-10-03-get",
    "icon": "https://polymarket-upload.s3.us-east-2.amazonaws.com/lal_getafe.png",
    "eventSlug": "lal-osa-get-2025-10-03",
    "outcome": "Yes",
    "outcomeIndex": 0,
    "name": "XxConorxX",
    "pseudonym": "Purple-Shelter",
    "bio": "God Bless Charlie Kirk",
    "profileImage": "https://polymarket-upload.s3.us-east-2.amazonaws.com/profile-image-2865805-78a97917-fb27-4b2c-9ad6-0158f2ef7d3a.png",
    "profileImageOptimized": "",
    "transactionHash": "0x331fe02b949d5ca31885c311c527d7d4ed0b98d71923e701551e162abf5d3719"
  },
  ...
]
```

#### Response Fields

| Field | Type | Description | Example |
| :--- | :--- | :--- | :--- |
| `proxyWallet` | `string` | User Profile Address (0x-prefixed, 40 hex chars) | `"0x56687bf447db6ffa42ffe2204a05edaa20f55839"` |
| `side` | `enum<string>` | Available options: `BUY`, `SELL` | |
| `asset` | `string` | | |
| `conditionId` | `string` | 0x-prefixed 64-hex string | `"0xdd22472e552920b8438158ea7238bfadfa4f736aa4cee91a6b86c39ead110917"` |
| `size` | `number` | | |
| `price` | `number` | | |
| `timestamp` | `integer` | | |
| `title` | `string` | | |
| `slug` | `string` | | |
| `icon` | `string` | | |
| `eventSlug` | `string` | | |
| `outcome` | `string` | | |
| `outcomeIndex` | `integer` | | |
| `name` | `string` | | |
| `pseudonym` | `string` | | |
| `bio` | `string` | | |
| `profileImage` | `string` | | |
| `profileImageOptimized` | `string` | | |
| `transactionHash` | `string` | | |


# Polymarket Documentation: Get Closed Positions for a User

## Core: Get closed positions for a user

Fetches closed positions for a user (address).

### Endpoint

`GET /closed-positions`

### Request Example (cURL)

```bash
curl --request GET \
  --url https://data-api.polymarket.com/closed-positions
```

### Status Codes

| Status | Description |
| :----- | :---------- |
| 200    | Success     |
| 400    | Bad Request |
| 401    | Unauthorized |
| 500    | Internal Server Error |

### Query Parameters

| Parameter | Type | Required | Default | Required Range | Description | Example |
| :--- | :--- | :--- | :--- | :--- | :--- | :--- |
| `user` | `string` | **required** | | | The address of the user in question. | `"0x56687bf447db6ffa42ffe2204a05edaa20f55839"` |
| `market` | `string[]` | | | | The conditionId of the market in question. Supports multiple CSV separated values. Cannot be used with the `eventId` param. (0x-prefixed 64-hex string) | |
| `title` | `string` | | | Maximum length: 100 | Filter by market title. | |
| `eventId` | `integer[]` | | | | The event id of the event in question. Supports multiple CSV separated values. Returns positions for all markets for those event ids. Cannot be used with the `market` param. | |
| `limit` | `integer` | | `50` | `0 <= x <= 500` | The max number of positions to return. | |
| `offset` | `integer` | | `0` | `0 <= x <= 10000` | The starting index for pagination. | |
| `sortBy` | `enum<string>` | | `REALIZEDPNL` | | The sort criteria. Available options: `REALIZEDPNL`, `TITLE`, `PRICE`, `AVGPRICE`. | |
| `sortDirection` | `enum<string>` | | `DESC` | | The sort direction. Available options: `ASC`, `DESC`. | |

### Response (200 Success - `application/json`)

```json
[
  {
    "proxyWallet": "0x5adf695a088172a920b6d0b2e5b7d88aa8ffa5e7",
    "asset": "105862139550598651869144991581649266505740323692381441468334576128241388255355",
    "conditionId": "0x078c6aac96ffa529781967e5608484735cef2a1668804653f70a8a9f77e80142",
    "avgPrice": 0.31604501945997504,
    "totalBought": 1390.634362,
    "realizedPnl": 255.814616,
    "curPrice": 0,
    "title": "Orioles vs. Yankees",
    "slug": "mlb-bal-nyy-2025-09-27",
    "icon": "https://polymarket-upload.s3.us-east-2.amazonaws.com/Repetitive-markets/MLB.jpg",
    "eventSlug": "mlb-bal-nyy-2025-09-27",
    "outcome": "Orioles",
    "outcomeIndex": 0,
    "oppositeOutcome": "Yankees",
    "oppositeAsset": "21098470966028966930663125053209505279564548160002102091763058078727565449356",
    "endDate": "2025-10-04T00:00:00Z"
  },
  ...
]
```

#### Response Fields

| Field | Type | Description | Example |
| :--- | :--- | :--- | :--- |
| `proxyWallet` | `string` | User Profile Address (0x-prefixed, 40 hex chars) | `"0x56687bf447db6ffa42ffe2204a05edaa20f55839"` |
| `asset` | `string` | | |
| `conditionId` | `string` | 0x-prefixed 64-hex string | `"0xdd22472e552920b8438158ea7238bfadfa4f736aa4cee91a6b86c39ead110917"` |
| `avgPrice` | `number` | | |
| `totalBought` | `number` | | |
| `realizedPnl` | `number` | | |
| `curPrice` | `number` | | |
| `title` | `string` | | |
| `slug` | `string` | | |
| `icon` | `string` | | |
| `eventSlug` | `string` | | |
| `outcome` | `string` | | |
| `outcomeIndex` | `integer` | | |
| `oppositeOutcome` | `string` | | |
| `oppositeAsset` | `string` | | |
| `endDate` | `string` | | |

# Polymarket TS CLOB Client

```ts
//npm install @polymarket/clob-client
//npm install ethers

//Client initialization example and dumping API Keys

import { ApiKeyCreds, ClobClient, OrderType, Side, } from "@polymarket/clob-client";
import { Wallet } from "@ethersproject/wallet";

const host = 'https://clob.polymarket.com';
const funder = '';//This is your Polymarket Profile Address, where you send UDSC to. 
const signer = new Wallet(""); //This is your Private Key. If using email login export from https://reveal.magic.link/polymarket otherwise export from your Web3 Application


//In general don't create a new API key, always derive or createOrDerive
const creds = new ClobClient(host, 137, signer).createOrDeriveApiKey();

//0: Browser Wallet(Metamask, Coinbase Wallet, etc)
//1: Magic/Email Login
const signatureType = 1; 
  (async () => {
    const clobClient = new ClobClient(host, 137, signer, await creds, signatureType, funder);
    const resp2 = await clobClient.createAndPostOrder(
        {
            tokenID: "", //Use https://docs.polymarket.com/developers/gamma-markets-api/get-markets to grab a sample token
            price: 0.01,
            side: Side.BUY,
            size: 5,
        },
        { tickSize: "0.001",negRisk: false }, //You'll need to adjust these based on the market. Get the tickSize and negRisk T/F from the get-markets above
        //{ tickSize: "0.001",negRisk: true },

        OrderType.GTC, 
    );
    console.log(resp2)
  })();
  ```
]]>
</file>
<file path=".dev/docs/manual-poly-gamma.md">
<![CDATA[
## Polymarket API Documentation: List Events

This page documents the **List events** API endpoint for Polymarket, which allows retrieving a list of prediction markets (events).

### API Endpoint

| Method | Path      | Base URL                           | Purpose     |
| :----- | :-------- | :--------------------------------- | :---------- |
| `GET`  | `/events` | `https://gamma-api.polymarket.com` | List events |

### Query Parameters

The endpoint supports various parameters for filtering, sorting, and pagination:

| Parameter                                | Type                    | Description                                                        |
| :--------------------------------------- | :---------------------- | :----------------------------------------------------------------- |
| `limit`, `offset`                        | `integer`               | Pagination controls.                                               |
| `order`, `ascending`                     | `string`, `boolean`     | Sorting parameters.                                                |
| `id`, `slug`                             | `integer[]`, `string[]` | Filter by specific event IDs or slugs.                             |
| `tag_id`, `exclude_tag_id`               | `integer`               | Filter by associated tags.                                         |
| `featured`, `closed`, `cyom`             | `boolean`               | Filter by status (e.g., featured, closed, Create Your Own Market). |
| `start_date_min/max`, `end_date_min/max` | `string<date-time>`     | Filter events by date range.                                       |
| `include_chat`, `include_template`       | `boolean`               | Include associated chat or template data.                          |

### Response Structure (Event Object)

The API returns a list of event objects (JSON array), each containing extensive data. Key fields include:

| Field                                        | Type                | Description                                                                |
| :------------------------------------------- | :------------------ | :------------------------------------------------------------------------- |
| `id`, `ticker`, `slug`, `title`              | `string`            | Basic identification and display data.                                     |
| `startDate`, `endDate`                       | `string<date-time>` | Event timeline.                                                            |
| `active`, `closed`, `featured`, `restricted` | `boolean`           | Event status indicators.                                                   |
| `liquidity`, `volume`, `openInterest`        | `number`            | Market financial metrics.                                                  |
| `markets`                                    | `object[]`          | Nested array containing detailed market objects associated with the event. |
| `series`                                     | `object[]`          | Nested array containing series information the event belongs to.           |
| `categories`, `tags`                         | `object[]`          | Categorization and tagging data.                                           |
| `volume24hr`, `volume1wk`, etc.              | `number`            | Volume data across different timeframes.                                   |

#### Nested Market Object Fields

Each `market` within an event includes details such as: `question`, `conditionId`, `endDate`, `marketType`, `volumeNum`, `liquidityNum`, pricing information (`lastTradePrice`, `bestBid`, `bestAsk`), and various status flags.

THIS IS THE 2nd CODE: "midlaners"

### Example Output

```json
[
    {
        "id": 57116,
        "ticker": "nhl-metropolitan-division-winner",
        "slug": "nhl-metropolitan-division-winner-831",
        "title": "NHL: Metropolitan Division Winner",
        "description": "This market will resolve according to the team that wins the listed division during the 2025-26 NHL regular season.\n\nIf at any point it becomes impossible for a listed team to win its division (e.g., mathematical elimination before season end), the relevant market will resolve immediately to “No.”\n\nIf the 2025-26 NHL season is permanently canceled or has not been completed by June 30, 2026, 11:59 PM ET, this market will resolve to “Other.”",
        "resolutionSource": "",
        "startDate": "2025-10-10T00:34:45.548328Z",
        "creationDate": "2025-10-10T00:34:45.548322Z",
        "endDate": "2026-04-30T00:00:00Z",
        "image": "https://polymarket-upload.s3.us-east-2.amazonaws.com/nhl-metropolitan-division-winner-831-BiOhOAV6ln-4.png",
        "icon": "https://polymarket-upload.s3.us-east-2.amazonaws.com/nhl-metropolitan-division-winner-831-BiOhOAV6ln-4.png",
        "active": true,
        "closed": false,
        "archived": false,
        "new": false,
        "featured": false,
        "restricted": true,
        "liquidity": 9680,
        "openInterest": 0,
        "sortBy": "price",
        "createdAt": "2025-10-09T20:29:37.053812Z",
        "updatedAt": "2025-10-10T05:46:11.123915Z",
        "competitive": 0.8470089994706194,
        "enableOrderBook": true,
        "liquidityClob": 9680,
        "negRisk": true,
        "negRiskMarketID": "0xc1bd6e88f5a19d4d451188f8e9a78952e48db9676aedcba4573b8dd271d79600",
        "commentCount": 0,
        "markets": [
            {
                "id": 629070,
                "question": "Will the Carolina Hurricanes win the Metropolitan Division?",
                "conditionId": "0xa998022efc89d60331ac15e78103dafd765e65eaea433405638c4e293d2b0fa6",
                "slug": "will-the-carolina-hurricanes-win-the-metropolitan-division-123",
                "endDate": "2026-04-30T00:00:00Z",
                "liquidity": 300,
                "startDate": "2025-10-10T00:23:22.977509Z",
                "image": "https://polymarket-upload.s3.us-east-2.amazonaws.com/nhl-metropolitan-division-winner-831-BiOhOAV6ln-4.png",
                "icon": "https://polymarket-upload.s3.us-east-2.amazonaws.com/nhl-metropolitan-division-winner-831-BiOhOAV6ln-4.png",
                "description": "This market will resolve according to the team that wins the listed division during the 2025-26 NHL regular season.\n\nIf at any point it becomes impossible for a listed team to win its division (e.g., mathematical elimination before season end), the relevant market will resolve immediately to “No.”\n\nIf the 2025-26 NHL season is permanently canceled or has not been completed by June 30, 2026, 11:59 PM ET, this market will resolve to “Other.”",
                "outcomes": ["Yes", "No"],
                "outcomePrices": ["0.35", "0.65"],
                "active": true,
                "closed": false,
                "marketMakerAddress": "",
                "createdAt": "2025-10-09T20:29:37.904431Z",
                "updatedAt": "2025-10-10T05:42:19.24627Z",
                "new": false,
                "featured": false,
                "submitted_by": "0x91430CaD2d3975766499717fA0D66A78D814E5c5",
                "archived": false,
                "resolvedBy": "0x2F5e3684cb1F318ec51b00Edba38d79Ac2c0aA9d",
                "restricted": true,
                "groupItemTitle": "Carolina Hurricanes",
                "groupItemThreshold": 0,
                "questionID": "0xc1bd6e88f5a19d4d451188f8e9a78952e48db9676aedcba4573b8dd271d79600",
                "enableOrderBook": true,
                "orderPriceMinTickSize": 0.01,
                "orderMinSize": 5,
                "liquidityNum": 300,
                "endDateIso": "2026-04-30",
                "startDateIso": "2025-10-10",
                "hasReviewedDates": true,
                "clobTokenIds": [
                    "63645197726705524606059371558162512012201160965301656466640547461234264539392",
                    "5617477483144744882677399661863606310473044785725076606563294855884593377840"
                ],
                "umaBond": 500,
                "umaReward": 5,
                "liquidityClob": 300,
                "customLiveness": 0,
                "acceptingOrders": true,
                "negRisk": true,
                "negRiskMarketID": "0xc1bd6e88f5a19d4d451188f8e9a78952e48db9676aedcba4573b8dd271d79600",
                "negRiskRequestID": "0x9b2ab6a19ab61ed010aa5fe60f474283affc335829f807d6b5e5901f7de69661",
                "ready": false,
                "funded": false,
                "acceptingOrdersTimestamp": "2025-10-10T00:23:01Z",
                "cyom": false,
                "competitive": 0.293398533007335,
                "pagerDutyNotificationEnabled": false,
                "approved": true,
                "rewardsMinSize": 0,
                "rewardsMaxSpread": 0,
                "spread": 0.7,
                "bestAsk": 0.7,
                "automaticallyActive": true,
                "clearBookOnStart": true,
                "showGmpSeries": false,
                "showGmpOutcome": false,
                "manualActivation": false,
                "negRiskOther": false,
                "umaResolutionStatuses": [],
                "pendingDeployment": false,
                "deploying": false,
                "deployingTimestamp": "2025-10-10T00:11:25.336806Z",
                "rfqEnabled": false,
                "holdingRewardsEnabled": false,
                "feesEnabled": false
            }
        ],
        "tags": [
            {
                "id": 1,
                "label": "Sports",
                "slug": "sports",
                "forceShow": false,
                "publishedAt": "2023-10-24T22:37:50.296Z",
                "updatedBy": 15,
                "createdAt": "2023-10-24T22:37:50.31Z",
                "updatedAt": "2024-07-05T21:07:21.800664Z",
                "forceHide": true
            },
            {
                "id": 899,
                "label": "NHL",
                "slug": "nhl",
                "forceShow": false,
                "publishedAt": "2024-01-22T17:16:28.432Z",
                "createdAt": "2024-01-22T17:16:28.449Z",
                "updatedAt": "2024-05-30T22:36:11.118646Z"
            },
            {
                "id": 100088,
                "label": "Hockey",
                "slug": "hockey",
                "cyom": false,
                "showAllOutcomes": true,
                "showMarketImages": false,
                "enableNegRisk": true,
                "automaticallyActive": true,
                "gmpChartMode": "default",
                "negRiskAugmented": true,
                "pendingDeployment": false,
                "deploying": false,
                "deployingTimestamp": "2025-10-10T00:08:05.814235Z"
            }
        ]
    },
    ...
]
```

]]>
</file>
<file path=".dev/docs/manual-poly-rtds.md">
<![CDATA[
# Real-Time Data Client

Client wrapper for `real-time-data-streaming` **WebSocket**.

## Quickstart

```ts
import { RealTimeDataClient } from "../src/client";
import { Message } from "../src/model";

const onMessage = (m: Message) => console.log(m.topic, m.type, m.payload);

const onConnect = (client: RealTimeDataClient) => {
  client.subscribe({
    subscriptions: [
      {
        topic: "comments",
        type: "*", // all types for topic
        filters: `{"parentEntityID":100,"parentEntityType":"Event"}`, // empty = no filter
      },
    ],
  });
};

new RealTimeDataClient({ onMessage, onConnect }).connect();
```

## Subscriptions

> After connection, use the same `client: RealTimeDataClient`.

### Subscribe

```ts
// activity.trades
client.subscribe({ subscriptions: [{ topic: "activity", type: "trades" }] });

// all comment types
client.subscribe({ subscriptions: [{ topic: "comments", type: "*" }] });
```

### Unsubscribe

> Unsubscribe from `activity.trades` (if `*` was used earlier, this removes only `trades`).

```ts
client.unsubscribe?.({ // if supported; same shape as subscribe
  subscriptions: [{ topic: "activity", type: "trades" }],
});

// If the client uses subscribe-with-action pattern:
client.subscribe({
  subscriptions: [{ topic: "activity", type: "trades" }],
  action: "unsubscribe",
});
```

### Disconnect

```ts
client.disconnect();
```

## Message Matrix

| Topic                     | Type               | Auth     | Filters (empty = none)                                          | Schema                              | Subscription Handler                          |
| ------------------------- | ------------------ | -------- | --------------------------------------------------------------- | ----------------------------------- | --------------------------------------------- |
| `activity`                | `trades`           | -        | `{"event_slug":"string"}` **OR** `{"market_slug":"string"}`     | [`Trade`](#trade)                   |                                               |
| `activity`                | `orders_matched`   | -        | `{"event_slug":"string"}` **OR** `{"market_slug":"string"}`     | [`Trade`](#trade)                   |                                               |
| `comments`                | `comment_created`  | -        | `{"parentEntityID":number,"parentEntityType":"Event / Series"}` | [`Comment`](#comment)               |                                               |
| `comments`                | `comment_removed`  | -        | same as above                                                   | [`Comment`](#comment)               |                                               |
| `comments`                | `reaction_created` | -        | same as above                                                   | [`Reaction`](#reaction)             |                                               |
| `comments`                | `reaction_removed` | -        | same as above                                                   | [`Reaction`](#reaction)             |                                               |
| `rfq`                     | `request_created`  | -        | -                                                               | [`Request`](#request)               |                                               |
| `rfq`                     | `request_edited`   | -        | -                                                               | [`Request`](#request)               |                                               |
| `rfq`                     | `request_canceled` | -        | -                                                               | [`Request`](#request)               |                                               |
| `rfq`                     | `request_expired`  | -        | -                                                               | [`Request`](#request)               |                                               |
| `rfq`                     | `quote_created`    | -        | -                                                               | [`Quote`](#quote)                   |                                               |
| `rfq`                     | `quote_edited`     | -        | -                                                               | [`Quote`](#quote)                   |                                               |
| `rfq`                     | `quote_canceled`   | -        | -                                                               | [`Quote`](#quote)                   |                                               |
| `rfq`                     | `quote_expired`    | -        | -                                                               | [`Quote`](#quote)                   |                                               |
| `crypto_prices`           | `update`           | -        | `{"symbol":string}`                                             | [`CryptoPrice`](#cryptoprice)       | [`CryptoPriceHistorical`](#initial-data-dump) |
| `crypto_prices_chainlink` | `update`           | -        | `{"symbol":string}`                                             | [`CryptoPrice`](#cryptoprice)       | [`CryptoPriceHistorical`](#initial-data-dump) |
| `clob_user`               | `order`            | ClobAuth | -                                                               | [`Order`](#order)                   |                                               |
| `clob_user`               | `trade`            | ClobAuth | -                                                               | [`Trade (CLOB User)`](#trade-1)     |                                               |
| `clob_market`             | `price_change`     | -        | `["100","200",...]` **(mandatory)**                             | [`PriceChanges`](#pricechanges)     |                                               |
| `clob_market`             | `agg_orderbook`    | -        | `["100","200",...]`                                             | [`AggOrderbook`](#aggorderbook)     | [`AggOrderbook`](#aggorderbook)               |
| `clob_market`             | `last_trade_price` | -        | `["100","200",...]`                                             | [`LastTradePrice`](#lasttradeprice) |                                               |
| `clob_market`             | `tick_size_change` | -        | `["100","200",...]`                                             | [`TickSizeChange`](#ticksizechange) |                                               |
| `clob_market`             | `market_created`   | -        | -                                                               | [`ClobMarket`](#clobmarket)         |                                               |
| `clob_market`             | `market_resolved`  | -        | -                                                               | [`ClobMarket`](#clobmarket)         |                                               |

## Auth

### ClobAuth

```ts
export interface ClobApiKeyCreds {
  key: string;        // API key
  secret: string;     // API secret
  passphrase: string; // Passphrase
}
```

```ts
client.subscribe({
  subscriptions: [
    {
      topic: "clob_user",
      type: "*",
      clob_auth: {
        key: "xxxxxx-xxxx-xxxxx-xxxx-xxxxxx",
        secret: "xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx",
        passphrase: "xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx",
      },
    },
  ],
});
```

## Schemas

### Activity

#### Trade

| Name              | Type    | Description                   |
| ----------------- | ------- | ----------------------------- |
| `asset`           | string  | ERC1155 token ID traded       |
| `bio`             | string  | Trader’s bio                  |
| `conditionId`     | string  | Market/CTF condition ID       |
| `eventSlug`       | string  | Event slug                    |
| `icon`            | string  | Market icon URL               |
| `name`            | string  | Trader’s name                 |
| `outcome`         | string  | Human-readable market outcome |
| `outcomeIndex`    | integer | Outcome index                 |
| `price`           | float   | Trade price                   |
| `profileImage`    | string  | Trader profile image URL      |
| `proxyWallet`     | string  | Trader proxy wallet           |
| `pseudonym`       | string  | Trader pseudonym              |
| `side`            | string  | `BUY` / `SELL`                |
| `size`            | integer | Trade size                    |
| `slug`            | string  | Market slug                   |
| `timestamp`       | integer | Trade timestamp               |
| `title`           | string  | Event title                   |
| `transactionHash` | string  | Tx hash                       |

### Comments

#### Comment

| Name               | Type   | Description         |
| ------------------ | ------ | ------------------- |
| `id`               | string | Comment ID          |
| `body`             | string | Content             |
| `parentEntityType` | string | `Event` or `Series` |
| `parentEntityID`   | number | Parent ID           |
| `parentCommentID`  | string | Parent comment ID   |
| `userAddress`      | string | User address        |
| `replyAddress`     | string | Reply user address  |
| `createdAt`        | string | Created timestamp   |
| `updatedAt`        | string | Updated timestamp   |

#### Reaction

| Name           | Type   | Description       |
| -------------- | ------ | ----------------- |
| `id`           | string | Reaction ID       |
| `commentID`    | number | Comment ID        |
| `reactionType` | string | Reaction type     |
| `icon`         | string | Reaction icon     |
| `userAddress`  | string | User address      |
| `createdAt`    | string | Created timestamp |

### RFQ

#### Request

| Name           | Type   | Description                 |
| -------------- | ------ | --------------------------- |
| `requestId`    | string | Request ID                  |
| `proxyAddress` | string | User proxy                  |
| `market`       | string | Market/CTF condition ID     |
| `token`        | string | ERC1155 token ID            |
| `complement`   | string | Complement ERC1155 token ID |
| `state`        | string | Current state               |
| `side`         | string | Buy/Sell                    |
| `sizeIn`       | number | Input size                  |
| `sizeOut`      | number | Output size                 |
| `price`        | number | Implied price               |
| `expiry`       | number | UNIX expiry                 |

#### Quote

| Name           | Type   | Description                 |
| -------------- | ------ | --------------------------- |
| `quoteId`      | string | Quote ID                    |
| `requestId`    | string | Linked request ID           |
| `proxyAddress` | string | User proxy                  |
| `token`        | string | ERC1155 token ID            |
| `state`        | string | Current state               |
| `side`         | string | Buy/Sell                    |
| `sizeIn`       | number | Input size                  |
| `sizeOut`      | number | Output size                 |
| `condition`    | string | Market/CTF condition ID     |
| `complement`   | string | Complement ERC1155 token ID |
| `expiry`       | number | UNIX expiry                 |

### CryptoPrice

| Name        | Type   | Description    |
| ----------- | ------ | -------------- |
| `symbol`    | string | Asset symbol   |
| `timestamp` | number | ms since epoch |
| `value`     | number | Price value    |

**Filters:** `{"symbol":"btcusdt"}`, `{"symbol":"ethusdt"}`, `{"symbol":"xrpusdt"}`, `{"symbol":"solusdt"}`

#### Initial data dump

On connection with a filter, server sends a snapshot:

* `symbol: string`
* `data: Array<{ timestamp: number; value: number }>`
  (See also: used by `crypto_prices` and `crypto_prices_chainlink`.)

### CLOB User

#### Order

| Name            | Type               | Description                           |
| --------------- | ------------------ | ------------------------------------- |
| `asset_id`      | string             | ERC1155 token ID                      |
| `created_at`    | string (timestamp) | UNIX creation                         |
| `expiration`    | string (timestamp) | UNIX expiration                       |
| `id`            | string             | Order hash                            |
| `maker_address` | string             | Funder address                        |
| `market`        | string             | Condition/market ID                   |
| `order_type`    | string             | `GTC` `GTD` `FOK` `FAK`               |
| `original_size` | string             | Size at placement                     |
| `outcome`       | string             | `YES` / `NO`                          |
| `owner`         | string             | Owner UUID                            |
| `price`         | string             | Decimal price                         |
| `side`          | string             | `BUY` / `SELL`                        |
| `size_matched`  | string             | Matched amount                        |
| `status`        | string             | e.g., `MATCHED`                       |
| `type`          | string             | `PLACEMENT` `CANCELLATION` `FILL` ... |

#### Trade (CLOB User)

| Name               | Type               | Description             |
| ------------------ | ------------------ | ----------------------- |
| `asset_id`         | string             | ERC1155 token ID        |
| `fee_rate_bps`     | string             | Fee rate (bps)          |
| `id`               | string             | Match ID                |
| `last_update`      | string (timestamp) | UNIX last update        |
| `maker_address`    | string             | Maker address           |
| `maker_orders`     | array              | See below               |
| `market`           | string             | Condition/market ID     |
| `match_time`       | string (timestamp) | UNIX execution          |
| `outcome`          | string             | `YES` / `NO`            |
| `owner`            | string             | Taker UUID              |
| `price`            | string             | Decimal price           |
| `side`             | string             | Taker side `BUY`/`SELL` |
| `size`             | string             | Total matched size      |
| `status`           | string             | e.g., `MINED`           |
| `taker_order_id`   | string             | Taker order ID          |
| `transaction_hash` | string             | Settlement tx           |

**`maker_orders` (array items)**

| Name             | Type   | Description    |
| ---------------- | ------ | -------------- |
| `asset_id`       | string | Maker token ID |
| `fee_rate_bps`   | string | Maker fee bps  |
| `maker_address`  | string | Maker address  |
| `matched_amount` | string | Amount matched |
| `order_id`       | string | Maker order ID |
| `outcome`        | string | `YES` / `NO`   |
| `owner`          | string | Maker UUID     |
| `price`          | string | Order price    |
| `side`           | string | `BUY` / `SELL` |

### CLOB Market

#### PriceChanges

| Name | Type               | Description           |
| ---- | ------------------ | --------------------- |
| `m`  | string             | Condition ID          |
| `pc` | array              | Price changes by book |
| `t`  | string (timestamp) | ms since epoch        |

**PriceChange (elements of `pc`)**

| Name | Type   | Description         |
| ---- | ------ | ------------------- |
| `a`  | string | `asset_id`          |
| `h`  | string | book snapshot hash  |
| `p`  | string | price (e.g., `0.5`) |
| `s`  | string | side `BUY`/`SELL`   |
| `si` | string | size at price       |
| `ba` | string | best ask            |
| `bb` | string | best bid            |

> **Filters required:** `["100","200",...]` (asset IDs).

#### AggOrderbook

| Name             | Type               | Description                    |
| ---------------- | ------------------ | ------------------------------ |
| `asks`           | array              | Aggregated asks `{price,size}` |
| `asset_id`       | string             | Asset ID                       |
| `bids`           | array              | Aggregated bids `{price,size}` |
| `hash`           | string             | Snapshot hash                  |
| `market`         | string             | Condition ID                   |
| `min_order_size` | string             | Min order size                 |
| `neg_risk`       | boolean            | NegRisk flag                   |
| `tick_size`      | string             | Min price increment            |
| `timestamp`      | string (timestamp) | ms since epoch                 |

**`asks`/`bids` item**
| `price`: string | `size`: string |

**Initial data dump:** on connection when filters used.

#### LastTradePrice

| Name           | Type   | Description    |
| -------------- | ------ | -------------- |
| `asset_id`     | string | Asset ID       |
| `fee_rate_bps` | string | Fee bps        |
| `market`       | string | Condition ID   |
| `price`        | string | Trade price    |
| `side`         | string | `BUY` / `SELL` |
| `size`         | string | Trade size     |

#### TickSizeChange

| Name            | Type   | Description              |
| --------------- | ------ | ------------------------ |
| `market`        | string | Condition ID             |
| `asset_id`      | string | Array of two ERC1155 IDs |
| `old_tick_size` | string | Previous tick            |
| `new_tick_size` | string | Updated tick             |

#### ClobMarket

| Name             | Type      | Description           |
| ---------------- | --------- | --------------------- |
| `market`         | string    | Condition ID          |
| `asset_ids`      | [2]string | Two ERC1155 asset IDs |
| `min_order_size` | string    | Min order size        |
| `tick_size`      | string    | Min price increment   |
| `neg_risk`       | boolean   | Negative risk         |

]]>
</file>
<file path=".dev/docs/manual-rate-limits.md">
<![CDATA[
POLYMARKET RATE LIMITS

API Rate Limits
​
How Rate Limiting Works
All rate limits are enforced using Cloudflare’s throttling system. When you exceed the maximum configured rate for any endpoint, requests are throttled rather than immediately rejected. This means:
Throttling: Requests over the limit are delayed/queued rather than dropped
Burst Allowances: Some endpoints allow short bursts above the sustained rate
Time Windows: Limits reset based on sliding time windows (e.g., per 10 seconds, per minute)
​
General Rate Limits
Endpoint	Limit	Notes
General Rate Limiting	5000 requests / 10s	Throttle requests over the maximum configured rate
”OK” Endpoint	50 requests / 10s	Throttle requests over the maximum configured rate
​
Data API Rate Limits
Endpoint	Limit	Notes
Data API (General)	100 requests / 10s	Throttle requests over the maximum configured rate
Data API (Alternative)	600 requests / 1 minute	1 hour block on violation
Data API /trades	30 requests / 10s	Throttle requests over the maximum configured rate
Data API “OK” Endpoint	10 requests / 10s	Throttle requests over the maximum configured rate
​
GAMMA API Rate Limits
Endpoint	Limit	Notes
GAMMA (General)	750 requests / 10s	Throttle requests over the maximum configured rate
GAMMA Get Comments	100 requests / 10s	Throttle requests over the maximum configured rate
GAMMA /events	100 requests / 10s	Throttle requests over the maximum configured rate
GAMMA /markets	100 requests / 10s	Throttle requests over the maximum configured rate
GAMMA /markets /events listing	100 requests / 10s	Throttle requests over the maximum configured rate
GAMMA Tags	100 requests / 10s	Throttle requests over the maximum configured rate
GAMMA Search	300 requests / 10s	Throttle requests over the maximum configured rate
​
CLOB API Rate Limits
​
General CLOB Endpoints
Endpoint	Limit	Notes
CLOB (General)	5000 requests / 10s	Throttle requests over the maximum configured rate
CLOB GET Balance Allowance	125 requests / 10s	Throttle requests over the maximum configured rate
CLOB UPDATE Balance Allowance	20 requests / 10s	Throttle requests over the maximum configured rate
​
CLOB Market Data
Endpoint	Limit	Notes
CLOB /book	200 requests / 10s	Throttle requests over the maximum configured rate
CLOB /books (website)	300 requests / 10s	Throttle requests over the maximum configured rate
CLOB /books	80 requests / 10s	Throttle requests over the maximum configured rate
CLOB /price	200 requests / 10s	Throttle requests over the maximum configured rate
CLOB /prices	80 requests / 10s	Throttle requests over the maximum configured rate
CLOB /midprice	200 requests / 10s	Throttle requests over the maximum configured rate
CLOB /midprices	80 requests / 10s	Throttle requests over the maximum configured rate
​
CLOB Ledger Endpoints
Endpoint	Limit	Notes
CLOB Ledger (/trades /orders /notifications /order)	300 requests / 10s	Throttle requests over the maximum configured rate
CLOB Ledger /data/orders	150 requests / 10s	Throttle requests over the maximum configured rate
CLOB Ledger /data/trades	150 requests / 10s	Throttle requests over the maximum configured rate
CLOB /notifications	125 requests / 10s	Throttle requests over the maximum configured rate
​
CLOB Markets & Pricing
Endpoint	Limit	Notes
CLOB Price History	100 requests / 10s	Throttle requests over the maximum configured rate
CLOB Markets	250 requests / 10s	Throttle requests over the maximum configured rate
CLOB Market Tick Size	50 requests / 10s	Throttle requests over the maximum configured rate
CLOB markets/0x	50 requests / 10s	Throttle requests over the maximum configured rate
CLOB /markets listing	100 requests / 10s	Throttle requests over the maximum configured rate
​
CLOB Authentication
Endpoint	Limit	Notes
CLOB API Keys	50 requests / 10s	Throttle requests over the maximum configured rate
​
CLOB Trading Endpoints
Endpoint	Limit	Notes
CLOB POST /order	2400 requests / 10s (240/s)	BURST - Throttle requests over the maximum configured rate
CLOB POST /order	24000 requests / 10 minutes (40/s)	Throttle requests over the maximum configured rate
CLOB POST /order (by token id)	800 requests / 10s (80/s)	BURST - Throttle requests over the maximum configured rate
CLOB POST /order (by token id)	12000 requests / 10 minutes (20/s)	Throttle requests over the maximum configured rate
CLOB DELETE /order	2400 requests / 10s (240/s)	BURST - Throttle requests over the maximum configured rate
CLOB DELETE /order	24000 requests / 10 minutes (40/s)	Throttle requests over the maximum configured rate
CLOB POST /orders	800 requests / 10s (80/s)	BURST - Throttle requests over the maximum configured rate
CLOB POST /orders	12000 requests / 10 minutes (20/s)	Throttle requests over the maximum configured rate
CLOB DELETE /orders	800 requests / 10s (80/s)	BURST - Throttle requests over the maximum configured rate
CLOB DELETE /orders	12000 requests / 10 minutes (20/s)	Throttle requests over the maximum configured rate
CLOB DELETE /cancel-all	200 requests / 10s (20/s)	BURST - Throttle requests over the maximum configured rate
CLOB DELETE /cancel-all	3000 requests / 10 minutes (5/s)	Throttle requests over the maximum configured rate
CLOB DELETE /cancel-market-orders	800 requests / 10s (80/s)	BURST - Throttle requests over the maximum configured rate
CLOB DELETE /cancel-market-orders	12000 requests / 10 minutes (20/s)	Throttle requests over the maximum configured rate
​
Other API Rate Limits
Endpoint	Limit	Notes
RELAYER /submit	15 requests / 1 minute	Throttle requests over the maximum configured rate
User PNL API	100 requests / 10s	Throttle requests over the maximum configured rate
Glossary

]]>
</file>
<file path=".dev/md/plans/2025/10/07/13-09-13_discord-bot-slash-commands.md">
<![CDATA[
## Plan: Discord Bot with Slash Commands (+Autocomplete) for Status, Logs, Portfolio, Positions, Position, Close, Close-All

## Proposed Plan

### ❌ Critical Information Needed

- Do you prefer commands registered as guild-only during development (`DISCORD_GUILD_ID`) or global? Guild scope updates instantly; global can take up to 1 hour to propagate. If not provided, we will use guild scope by default for faster DX.
- Do you already have a Discord Application and Bot set up with the correct OAuth2 scopes? Required: `bot` and `applications.commands`. If not, we will include setup steps.

### ⚠️ Initial Best Assumptions to Address Ambiguities

1. MODERATE: Command scope -> We will register commands to a single guild (via `DISCORD_GUILD_ID`) for immediate availability; we can add a `--global` flag later. Rationale: Faster iteration and safer testing.
2. MODERATE: Bot runtime -> We will run the bot in the same process as the app, started from `main-loop`, non-blocking. Rationale: Simpler deployment and resource sharing.
4. MODERATE: Autocomplete dataset size -> Position counts are small enough to compute suggestions on-demand via DB queries within Discord’s 3s initial response limit.
The Discord Bot is in COMPLETELY PRIVATE server where only owner has access. No need to implement allowlisting.

### ☁️ Current State

1. Node.js ≥20, TypeScript strict, pnpm. See `package.json`.
2. App runs as a long-lived process: entrypoint `src/index.ts` calls `run()` in `src/core/app/main-loop.ts`.
3. DB: PostgreSQL via Drizzle; key tables `position`, `copy_order`, `leader_trade`, etc. Helpers in `src/utils/external-helpers.ts` expose portfolio summary and formatting.
4. Event bus emits lifecycle and trading events (`src/core/domain/event.ts`). Discord notifications currently via webhook only (`src/notify/discord-webhook.ts`).
5. RTDS stream in `src/core/data-ingestion/polymarket-rtds.ts` exposes `lastRtdsMessageTimeMs` for connectivity telemetry.
6. No Discord Bot runtime yet (`src/rpc/discord-bot.ts` is empty).

### 🌟 Desired Goal State

1. A Discord Bot connected via Gateway with slash commands visible in the configured guild.
2. Slash commands:
   - `/status`: RTDS/WS connectivity, open positions count, current unrealized PnL, lifetime realized PnL.
   - `/logs [n]`: Return last N lines of humanized logs.
   - `/portfolio`: Portfolio summary (reuse existing formatting).
   - `/positions`: Table of current open positions with columns: ID, UPNL.
   - `/position [id]`: Detailed position view with extra fields (tokenId, Entry Price (Avg), Current Price, Unrealized PnL).
   - `/close [id]`: Force close a specific position by ID.
   - `/close-all`: Force close all running positions.
3. Autocomplete for commands needing IDs (e.g., `/position` and `/close`), suggesting open position IDs.
4. All responses ephemeral by default (for private UX), with emojis and clear formatting.
5. DRY, typed, and non-intrusive to the main trading flow (sub-50ms overhead preserved for critical paths).

Traceability: Each bullet maps to the user requirements list (status/logs/portfolio/positions/position/close/close-all, with autocomplete and emojis).

### 🛣️ Brainstorm Implementation Approaches

- Approach 1: Gateway bot using `discord.js` v14
  - Pros: No public HTTP ingress needed; interactions and autocompletes handled via Gateway. Rich typing and utilities.
  - Cons: Adds a runtime dependency and a background connection.
- Approach 2: HTTP-only Interactions (Outgoing Webhook)
  - Pros: No Gateway connection.
  - Cons: Requires public HTTPS endpoint and signature verification; more infra.
- Approach 3: Hybrid (Gateway for commands, Webhook for followups)
  - Pros: Flexibility.
  - Cons: Unnecessary complexity for this private, single-user bot.

Chosen Approach: 1 (Gateway + discord.js)
- Reasons: No server needed; straightforward slash command + autocomplete handling; quick iteration in a private project.

Rollback Strategy
- The bot starts only if `DISCORD_BOT_TOKEN` is present. No token → no bot runtime. Command registration is an explicit script; revert by deleting commands and removing token.

### 🗺️ Very Detailed Plan

1) Dependencies and Env
- Add deps: `discord.js`, `@discordjs/rest`, `discord-api-types`.
- Add env vars to `.env.*`:
  - `DISCORD_BOT_TOKEN`: Bot token
  - `DISCORD_APP_ID`: Application (client) ID
  - `DISCORD_GUILD_ID`: Guild ID (dev scope)

2) Command Definitions (single source of truth)
- Create `src/rpc/discord/commands.ts` exporting a typed array of command definitions and helpers for registration + runtime handling.
- Commands list:
  - `status` (no options)
  - `logs` options: integer `n` (1–500, default 100)
  - `portfolio` (no options)
  - `positions` (no options)
  - `position` options: integer `id` (required, with autocomplete)
  - `close` options: integer `id` (required, with autocomplete, guarded)
  - `close-all` (no options, guarded)

3) Registration Script
- Add `scripts/register-discord-commands.ts` using `@discordjs/rest` to upsert commands to the configured guild.
- CLI script in `package.json`: `pnpm discord:register:guild` (and optional `discord:register:global`).
- Reference: Application Commands API [Discord Application Commands](https://discord.com/developers/docs/interactions/application-commands).

4) Bot Runtime
- Implement `startDiscordBot(params)` in `src/rpc/discord-bot.ts`:
  - Construct a `Client` with `GatewayIntentBits.Guilds` only.
  - On `ready`, log success.
  - Handle `interactionCreate`:
    - If `isChatInputCommand()` → route by command name.
    - If `isAutocomplete()` → return suggestions for `position`/`close`.
  - Ephemeral initial responses (defer reply within 3s if needed). Reference: 3s initial response rule and ephemeral flags [Receiving and Responding](https://discord.com/developers/docs/interactions/receiving-and-responding).

5) Data Access & DRY helpers
- Reuse existing helpers from `src/utils/external-helpers.ts`:
  - `getPortfolioSummary(mode)` to compute Unrealized/Realized PnL and last-closed items.
  - `buildClosedPositionsSummaryMessage()` for `/portfolio` rendering.
- Logs: use `getLogTailSnapshot()` from `src/utils/logger.ts`; trim to last `n` lines (server-side split) and wrap in a code block.
- Status: compute RTDS status by checking `lastRtdsMessageTimeMs` staleness (e.g., idle > 60s = disconnected). Use DB counts for open positions and reuse `getPortfolioSummary` for PnL.
- Positions: query open positions, compute UPNL from `unrealizedPnlUsd`, and render a compact table (code block). Keep small width; show up to 100 rows; paginate later if needed.
- Position detail: join via `loadMetaForPosition(id)`; include tokenId, entry price avg, current price, unrealized PnL, leader and event link; add emojis.

6) Guarded Mutations
- Thread-safety: use the existing `IExecutionProvider` instance from `main-loop` by injecting it into `startDiscordBot`. Close operations call `executionProvider.closePosition({ positionId, reason: 'MANUAL', source: 'manual', ingestSource: 'manual' })`.
- Non-blocking: acknowledge with an ephemeral reply, then perform close; send follow-up ephemeral result (success/fail). Interaction token validity is 15 minutes—sufficient for follow-ups [Receiving and Responding](https://discord.com/developers/docs/interactions/receiving-and-responding).

7) Wire-up in Main Loop
- In `src/core/app/main-loop.ts`, after provider is ready and notifier/listeners registered, call `startDiscordBot({ executionProvider: provider, env, notifier })`. Ensure failures don’t crash the bot.

8) Metrics & Logging
- Log each command execution with timing and principal (Discord user). Keep logs concise.
- Emit counters via `incrementCounter('discord.command', { name: cmd })`.

9) Emojis & UX
- Use emojis for headings/status: ✅/🟥 for ok/fail, 📊 for stats, 🧮 for PnL, 📜 for logs, 🔧 for actions.
- Ephemeral replies by default to avoid channel noise. Offer a `public` boolean option later if needed.

10) Rate limits + Perf
- Autocomplete queries: limit to 20 suggestions and short labels (`"#123 · UPNL +1.23 USDC"`). Discord overall command content must stay under 8000 chars [Slash command limits](https://discord.com/developers/docs/interactions/application-commands#slash-commands).
- Defer initial replies when DB queries might exceed ~500ms; edit the reply when ready.

### 💻 Specs

Models / Schemas (no DB migrations needed)
- We reuse existing tables. Optionally, add a covering index later if `/positions` proves slow.

Classes
- `DiscordCommandRegistrar`
  - Purpose: Register commands to guild or global.
  - Methods:
    - `registerGuildCommands(appId: string, guildId: string, token: string, defs: RESTPostAPIApplicationCommandsJSONBody[]): Promise<void>`
    - `registerGlobalCommands(appId: string, token: string, defs: RESTPostAPIApplicationCommandsJSONBody[]): Promise<void>`

Functions (typed)
```ts
// src/rpc/discord/commands.ts
export type CommandName = 'status' | 'logs' | 'portfolio' | 'positions' | 'position' | 'close' | 'close-all';

export interface CommandContext {
    mode: import('@/core/domain/execution').ExecutionMode;
    executionProvider: import('@/core/domain/execution').IExecutionProvider;
}

export interface AutocompleteItem { name: string; value: number; }

export function buildSlashCommandDefs(): import('discord-api-types/v10').RESTPostAPIApplicationCommandsJSONBody[];
export function handleCommand(name: CommandName, options: Record<string, unknown>, ctx: CommandContext): Promise<{ content: string; ephemeral?: boolean }>;
export function handleAutocomplete(name: CommandName, focused: string, ctx: CommandContext): Promise<AutocompleteItem[]>;
```

Library Calls (Discord)
```ts
// Client runtime
import { Client, GatewayIntentBits, Partials, Interaction, AutocompleteInteraction, ChatInputCommandInteraction } from 'discord.js';

const client = new Client({ intents: [GatewayIntentBits.Guilds] });
client.on('ready', () => logger.success({ tag: 'discord-bot' }, 'Discord bot ready'));
client.on('interactionCreate', async (interaction: Interaction) => { /* route */ });
await client.login(process.env.DISCORD_BOT_TOKEN!);
```

```ts
// Registration via REST
import { REST, Routes } from 'discord.js';
const rest = new REST({ version: '10' }).setToken(token);
await rest.put(Routes.applicationGuildCommands(appId, guildId), { body: defs });
// For global:
await rest.put(Routes.applicationCommands(appId), { body: defs });
```

API Contracts (Discord)
- Slash commands and interactions per official docs: [Application Commands](https://discord.com/developers/docs/interactions/application-commands), [Receiving & Responding](https://discord.com/developers/docs/interactions/receiving-and-responding), [Autocomplete](https://discord.com/developers/docs/interactions/application-commands#autocomplete).
- Timeouts: initial response within 3s; tokens valid 15m for follow-ups.

Config & Feature Flags
- `DISCORD_BOT_TOKEN` (string, required to start bot). Example: `"Bot x.y.z"` token.
- `DISCORD_APP_ID` (string, required for registration).
- `DISCORD_GUILD_ID` (string, recommended for fast dev updates).

Observability
- Counters: `discord.command` { name }, `discord.autocomplete` { name }, `discord.error` { name }.
- Logs include latency and rows returned for DB-heavy calls.

Security
- Validate `n` for `/logs` (1–500). Validate `id` is numeric and belongs to current `mode` when acting.

Perf
- Autocomplete limited to 20 results; DB queries indexed fields.
- Use deferred replies for long ops.

### 📂 Files Involved

🟦 TO READ AND UNDERSTAND FIRST
- `/home/probi/swe/repo/polymarket-copy-bot/src/core/app/main-loop.ts` — wiring point to start the bot.
- `/home/probi/swe/repo/polymarket-copy-bot/src/utils/logger.ts` — getLogTailSnapshot.
- `/home/probi/swe/repo/polymarket-copy-bot/src/utils/external-helpers.ts` — portfolio summary helpers.
- `/home/probi/swe/repo/polymarket-copy-bot/src/core/data-ingestion/polymarket-rtds.ts` — `lastRtdsMessageTimeMs` for RTDS status.
- `/home/probi/swe/repo/polymarket-copy-bot/src/core/store/schema.ts` — position and related tables.

🟨 MODIFY
- `/home/probi/swe/repo/polymarket-copy-bot/package.json` — add deps and scripts (register commands).
- `/home/probi/swe/repo/polymarket-copy-bot/src/core/app/main-loop.ts` — call `startDiscordBot(...)` after provider ready.
- `/home/probi/swe/repo/polymarket-copy-bot/.env.*` — add new envs.

🟩 CREATE
- `/home/probi/swe/repo/polymarket-copy-bot/src/rpc/discord/commands.ts` — command defs/handlers.
- `/home/probi/swe/repo/polymarket-copy-bot/src/rpc/discord-bot.ts` — gateway client and router.
- `/home/probi/swe/repo/polymarket-copy-bot/scripts/register-discord-commands.ts` — one-off command registrar.

🟥 DELETE
- None.

### 🧭 Optional Visuals

```mermaid
sequenceDiagram
  participant User
  participant Discord
  participant Bot
  participant DB
  User->>Discord: /position id:123
  Discord->>Bot: InteractionCreate (3s window)
  Bot->>Discord: deferReply(ephemeral)
  Bot->>DB: select position + meta + current price
  DB-->>Bot: rows
  Bot->>Discord: editReply(details)
```

### 🌐 Helpful Tool Results (as tool’s session_id)
- Discord docs fetch: `smart_fetch_url_multiple/we_need_authoritative_details_for_discord_slash_commands_responses_and_autocomplete_to_write_an_accurate_plan_with_citations/z8ykatabeo`

### 📚 References
- Discord Application Commands (Slash Commands): https://discord.com/developers/docs/interactions/application-commands
- Receiving and Responding to Interactions (timeouts, ephemeral, followups): https://discord.com/developers/docs/interactions/receiving-and-responding
- Autocomplete: https://discord.com/developers/docs/interactions/application-commands#autocomplete

Why these: Official Discord developer docs ensure correct, current contracts and limits.

### ▶️ Plan Summary

1. Add `discord.js` + REST deps and env vars; register commands to guild.
2. Implement typed command defs, autocomplete, and handlers (DRY helpers reused).
3. Wire `startDiscordBot` into `main-loop` with injected `executionProvider` and `mode` context.
4. Implement guarded `/close` and `/close-all`; make replies ephemeral with emojis and tables.
5. Log/metrics for observability; keep all operations non-blocking and within 3s initial response.

### 🔴 IMPORTANT REMINDERS
- Initial reply within 3 seconds; use deferral if needed.
- Keep autocomplete to ≤20 items and concise labels.
- Protect close commands via user allowlist; default deny if not configured.
- Don’t block execution critical paths; bot runs independently and uses short DB queries.

]]>
</file>
<file path=".dev/md/plans/2025/10/07/do not change.md">
<![CDATA[
<|PLAN_FORMAT_START|>
# Plan: Discord Bot with Slash Commands, Autocomplete, and Portfolio Controls

## 👤 User's Original Message
Original User Message:
```txt
/PLAN_X 

- [ ]  Add Discord Bot (Important: Include emojis for UI and UX | Ensure you use the Discord Slash Commands API that has autocompletes for UX - not manual slash commands | Ensure DRY in code)
    - [ ]  /status - Returns bot states such as essential statuses like RTDS status (is connected/disconnected), WS statuses, Num Current Open Positions, Current Unrealized PnL, Lifetime Realized PnL
    - [ ]  /logs [n] - Returns last n lines of human logs
    - [ ]  /portfolio - Same as portfolio summary
    - [ ]  /positions - Returns all current running positions, table formatted
        - [ ]  Cols: ID, UPNL
    - [ ]  /position [id] - Returns position details. Format is same as Position Opened from Discord Webhook, but include token id/asset id below Market Link, and include Entry Price (Avg) below Entry Price, and include Current Price below Entry Price (Avg), and include Unrealized PNL below Current Price
    - [ ]  /close [id] - Force close pos by id
    - [ ]  /close-all - Force close all running pos
```

## Proposed Plan

### ❌ Critical Information Needed
None blocking. We can safely proceed with guild-scoped commands first to avoid global propagation delays.

### ⚠️ Initial Best Assumptions to Address Ambiguities
1. MODERATE: Discord bot token and application (client) ID will be provided via env. -> We'll add validated env vars and guard startup.
2. MODERATE: Commands will be registered per-guild in `local/test` envs and optionally globally for production. -> Provide scripts for both.
3. MODERATE: Max log lines `n` default to 50 if omitted; cap to 500 for safety. -> Prevent spam and meet UX.

### ☁️ Current State
1. TypeScript Node service with strict typing; pnpm; dotenvx; Drizzle PostgreSQL; main entry `src/index.ts` -> `run()` in `src/core/app/main-loop.ts`.
2. Discord Webhook notifications already exist in `src/notify/discord-webhook.ts` and listeners in `src/notify/listeners.ts`.
3. Utilities available:
   - `getLogTailSnapshot()` in `src/utils/logger.ts` for logs
   - Portfolio helpers in `src/utils/external-helpers.ts`: `getPortfolioSummary`, `buildClosedPositionsSummaryMessage`, `loadMetaForPosition`
4. Placeholder file `src/rpc/discord-bot.ts` (empty) ready for bot implementation.

### 🌟 Desired Goal State
1. Slash-command Discord bot running inside the same process as the main app (optional toggle), exposing:
   - `/status`, `/logs`, `/portfolio`, `/positions`, `/position`, `/close`, `/close-all`
2. Autocomplete UX for `/position` (id argument) and for `/logs n` numeric helper.
3. Responses use embeds, emojis, ephemeral responses where appropriate, and follow DRY helpers.
4. Commands registered per-guild in dev; script available for global production registration.

### 🛣️ Brainstorm Implementation Approaches
* Approach 1: Use discord.js v14 Client + REST registerer in-process.
  - Pros: Mature, typed, great docs; easy Autocomplete; resilient.
  - Cons: Adds dependency; needs gateway connection.
* Approach 2: Raw Discord REST/websocket implementation.
  - Pros: Minimal deps.
  - Cons: Reinventing client; higher maintenance.
* Approach 3: Separate microservice.
  - Pros: Isolation.
  - Cons: Extra infra, complexity.

Chosen Approach: 1 — discord.js v14 in-process for fastest delivery, rich features, and typings.

Rollback: Feature flag to disable the Discord bot without code removal; no DB migrations.

### 🗺️ Very Detailed Plan
1. Dependencies and env
   - Add `discord.js` and `@discordjs/rest`, `discord-api-types` to deps.
   - Env vars (validated in `src/core/config/env.ts`):
     - `DISCORD_BOT_TOKEN` (string, required when ENABLE_DISCORD_BOT=true)
     - `DISCORD_APP_ID` (string)
     - `DISCORD_GUILD_IDS` (comma-separated list for dev registration)
     - `ENABLE_DISCORD_BOT` (boolean; default false)
   - Rationale: Required to login a gateway client and register commands.

2. Command registration script (non-interactive CLI)
   - Create `scripts/discord-register-commands.ts`:
     - Reads commands built in `src/rpc/discord-bot.ts` (export JSON defs)
     - Uses REST `PUT` routes for guild(s) during local; global for production
     - Per docs: Register via HTTP; upsert behavior [Application Commands](https://discord.com/developers/docs/interactions/application-commands#registering-a-command). Limit: 25 options per command.

3. Bot runtime integration
   - Implement `src/rpc/discord-bot.ts`:
     - Export `startDiscordBot(env, deps): { stop(): Promise<void> }`
     - Inside: create `Client` with intents `Guilds` only; hook `interactionCreate`.
       - Autocomplete: detect `interaction.isAutocomplete()` and return suggestions.
       - Commands: detect `interaction.isChatInputCommand()` and route.
       - Use `interaction.reply({ embeds, flags: MessageFlags.Ephemeral })` for ephemeral where useful. `ephemeral` is deprecated; use `flags` [InteractionReplyOptions](https://discord.js.org/docs/packages/discord.js/stable/InteractionReplyOptions:Interface).

4. DRY helper layer for embeds and formatting
   - Create `src/rpc/discord/ui.ts`:
     - `embed(title, fields, color)` returning APIEmbed
     - Emoji constants; table builder for monospaced columns
     - `formatPositionDetails()` reusing `loadMetaForPosition` and helpers from `utils/external-helpers`

5. Implement commands
   - `/status`
     - Show: RTDS status (connected/disconnected) via `lastRtdsMessageTimeMs` age from `src/core/data-ingestion/polymarket-rtds.ts`, open positions count (DB), unrealized/realized via `getPortfolioSummary`.
   - `/logs n?`
     - Optional integer with autocomplete (suggest 25, 50, 100, 200, 500). Use `getLogTailSnapshot(maxChars)` and slice to n lines; return as code block. Cap n to 500.
   - `/portfolio`
     - Use `getPortfolioSummary` + `buildClosedPositionsSummaryMessage`, post embed.
   - `/positions`
     - Query open positions for current mode; render table with columns: ID, UPNL (current unrealized per position), include emojis.
   - `/position id`
     - Autocomplete id from recent open/closed positions; show embed: Market Link, Token/Asset ID, Entry Price, Entry Price (Avg), Current Price, Unrealized PnL.
   - `/close id`
     - Calls provider.closePosition with reason `MANUAL`, source `manual`.
   - `/close-all`
     - Iterate open positions; call closePosition with reason `MANUAL`.
   - All DB access via existing schema; mode aware (dry_run/live).

6. Autocomplete behavior
   - Use Discord Autocomplete per spec (focused option true; choices cannot co-exist) [Autocomplete](https://discord.com/developers/docs/interactions/application-commands#autocomplete).
   - `/position id` -> suggest top 25 open position IDs by recency; `/logs n` -> suggest list [25,50,100,200,500].

7. Safety, limits, and UX
   - Ephemeral responses for `/logs` and `/close*`; non-ephemeral for portfolio summaries.
   - Guard long outputs with truncation; log dev-only warnings when truncating.
   - Emojis: ✅/🟥/✳️/📈/📉/🧮/🧰 for sections.

8. Wire into main-loop
   - In `src/core/app/main-loop.ts`, after bot started event, conditionally start Discord bot if `ENABLE_DISCORD_BOT` true. Reuse notifier fields in logs, but keep separate.

9. Scripts
   - Add pnpm scripts:
     - `discord:register:guild` (per env GUILD_IDS)
     - `discord:register:global`
     - `discord:dev` (run bot with app)

10. Rollback
   - Set `ENABLE_DISCORD_BOT=false` to disable. Commands can remain registered; no runtime impact.

Traceability bullets:
- Slash commands + autocomplete → steps 2–6
- Status/logs/portfolio/positions/position/close/close-all → step 5
- Emojis, embeds, UX → steps 4–5,7
- DRY → step 4

### 💻 Specs

Models / Schemas: no DB schema changes.

Classes
```ts
// src/rpc/discord-bot.ts
export interface DiscordBotDeps {
    getMode(): 'dry_run' | 'live';
    closePosition(args: { positionId: number }): Promise<void>;
}
export function startDiscordBot(env: Env, deps: DiscordBotDeps): Promise<{ stop(): Promise<void> }>; // starts client, registers handlers
```

Functions
```ts
// src/rpc/discord/ui.ts
export function buildEmbed(params: { title: string; description?: string; fields?: { name: string; value: string; inline?: boolean }[]; color?: number }): APIEmbed;
export function table(columns: string[], rows: string[][]): string; // returns monospaced table inside ```
export function positionDetailEmbed(positionId: number): Promise<APIEmbed>; // uses loadMetaForPosition, DB reads
```

Libraries Involved
- discord.js v14 — Client, events, embed building, interaction replies [(Client)](https://discord.js.org/docs/packages/discord.js/stable/Client:Class)
- Discord Dev Portal — command registration/Autocomplete [(Application Commands)](https://discord.com/developers/docs/interactions/application-commands), [(Autocomplete)](https://discord.com/developers/docs/interactions/application-commands#autocomplete)

API Call Snippets
```ts
// Register per-guild
await rest.put(
  Routes.applicationGuildCommands(appId, guildId),
  { body: commands }
);

// Global
await rest.put(
  Routes.applicationCommands(appId),
  { body: commands }
);
```

Reply Options
```ts
// Ephemeral reply in v14: prefer flags
await interaction.reply({
  content: 'Done',
  flags: MessageFlags.Ephemeral,
});
```

Config & Feature Flags
```ts
// src/core/config/env.ts additions
DISCORD_BOT_TOKEN: z.string().optional(),
DISCORD_APP_ID: z.string().optional(),
DISCORD_GUILD_IDS: z.string().optional(), // comma list
ENABLE_DISCORD_BOT: z.string().optional().transform(v => v ? v.toLowerCase() === 'true' : false),
```

Observability
- Counters: `discord.commands.invoked`, `discord.commands.error`
- Logs around registration and interaction handling.

### 📂 Files Involved

🟦 TO READ FIRST
- `/home/probi/swe/repo/polymarket-copy-bot/src/utils/logger.ts` — logs snapshot helper
- `/home/probi/swe/repo/polymarket-copy-bot/src/utils/external-helpers.ts` — portfolio and meta helpers
- `/home/probi/swe/repo/polymarket-copy-bot/src/core/app/main-loop.ts` — startup wiring

🟨 MODIFY
- `/home/probi/swe/repo/polymarket-copy-bot/src/core/config/env.ts` — add envs
- `/home/probi/swe/repo/polymarket-copy-bot/src/core/app/main-loop.ts` — start bot when enabled
- `/home/probi/swe/repo/polymarket-copy-bot/package.json` — add scripts and deps

🟩 CREATE
- `/home/probi/swe/repo/polymarket-copy-bot/src/rpc/discord-bot.ts` — bot runtime
- `/home/probi/swe/repo/polymarket-copy-bot/src/rpc/discord/ui.ts` — embeds/tables DRY
- `/home/probi/swe/repo/polymarket-copy-bot/scripts/discord-register-commands.ts` — registration CLI

🟥 DELETE
- None

### 🧭 Optional Visuals

```mermaid
sequenceDiagram
    participant User
    participant Discord
    participant Bot
    participant DB
    User->>Discord: /position 123
    Discord->>Bot: interactionCreate (ChatInput)
    Bot->>DB: loadMetaForPosition(123)
    DB-->>Bot: meta, prices, pnl
    Bot-->>Discord: reply embed (non-ephemeral)
```

### 🌐 Helpful Tool Results (as tool’s session_id)
- Docs: smart_fetch_url_multiple/fetch_official_docs_pages_to_cite_and_ensure_correct_apis_for_discord_slash_commands_deployment_and_autocomplete/mp69lsskz8
- Docs: smart_fetch_url_multiple/collect_official_docs_citations_for_implementing_discord_slash_commands_autocomplete_and_reply_flags_in_discord_js_v14_and_discord_dev_portal/j5yw1fqqgx
- Repo scan: codebase_search/find_existing_placeholders_or_integration_points_for_discord_bot/gvmpzsdxt4
- Repo scan: codebase_search/locate_functions_for_logs_and_portfolio_summary/94tytxcxjo

### 📚 References
- Discord Application Commands (Slash, Autocomplete, Limits): https://discord.com/developers/docs/interactions/application-commands
- discord.js InteractionReplyOptions (ephemeral flags): https://discord.js.org/docs/packages/discord.js/stable/InteractionReplyOptions:Interface
- discord.js Client interactionCreate event: https://discord.js.org/docs/packages/discord.js/stable/Client:Class

### ▶️ Plan Summary
1. Add envs + dependencies; create registration script.
2. Implement `startDiscordBot` with handlers for ChatInput and Autocomplete.
3. Build DRY UI helpers and all requested commands.
4. Wire the bot under a feature flag; add pnpm scripts for registration.
5. Deploy guild-scoped in dev; optional global in prod.

### 🔴 IMPORTANT REMINDERS
- Don’t mix `choices` with `autocomplete` on the same option (Discord spec).
- Use `flags: MessageFlags.Ephemeral` in replies, not deprecated `ephemeral`.
- Cap outputs and use ephemeral for sensitive responses.
<|PLAN_FORMAT_END|>

]]>
</file>
<file path="scripts/register-discord-commands.ts">
<![CDATA[
import { loadDiscordEnv } from '@/core/config/env-discord';
import { buildSlashCommandDefs } from '@/rpc/discord/discord-commands';
import { createLogger } from '@/utils/telemetry/logger';

const logger = createLogger({ tag: 'discord.register' });

async function sleep(ms: number): Promise<void> {
    await new Promise((resolve) => setTimeout(resolve, ms));
}

async function putRawJson(url: string, token: string, payloadJson: string, label: string): Promise<void> {
    let attempts = 0;
    while (true) {
        const res = await fetch(url, {
            method: 'PUT',
            headers: {
                'Content-Type': 'application/json',
                Authorization: `Bot ${token}`,
            },
            body: payloadJson,
        });
        if (res.status === 429) {
            const h1 = res.headers.get('retry-after');
            const h2 = res.headers.get('x-ratelimit-reset-after');
            const retryMs = Math.max(0, Math.ceil(parseFloat(h1 ?? h2 ?? '1') * 1000));
            attempts += 1;
            logger.warn({ label, attempts, retryMs }, 'rate_limited_retry');
            if (attempts > 5) {
                throw new Error(`Discord rate limit: exceeded retries for ${label}`);
            }
            await sleep(retryMs);
            continue;
        }
        if (!res.ok) {
            const body = await res.text();
            throw new Error(`Discord API error (${label}): ${res.status} ${body}`);
        }
        return;
    }
}

async function main(): Promise<void> {
    const env = loadDiscordEnv();
    const scopeArg = process.argv.find((a) => a.startsWith('--scope=')) ?? '--scope=guild';
    const scope = scopeArg.split('=')[1] ?? 'guild';

    const token = env.DISCORD_BOT_TOKEN;
    const appId = env.DISCORD_APP_ID;
    const guildId = env.DISCORD_GUILD_ID;
    const channelId = env.DISCORD_CHANNEL_ID;

    if (!token) throw new Error('DISCORD_BOT_TOKEN is required');
    if (!appId) throw new Error('DISCORD_APP_ID is required');

    // Preflight: verify token belongs to the specified application
    const meRes = await fetch('https://discord.com/api/v10/users/@me', {
        method: 'GET',
        headers: { Authorization: `Bot ${token}` },
    });
    if (!meRes.ok) {
        const body = await meRes.text();
        throw new Error(`Discord token validation failed: ${meRes.status} ${body}`);
    }
    const me = (await meRes.json()) as { id?: string } | unknown;
    const userId = (me as any)?.id ? String((me as any).id) : undefined;
    if (!userId) {
        throw new Error('Discord token validation succeeded but no user id returned');
    }
    if (String(userId) !== String(appId)) {
        throw new Error(
            `Bot token user id does not match DISCORD_APP_ID. token.userId=${userId} env.DISCORD_APP_ID=${String(appId)}`
        );
    }

    const defs = buildSlashCommandDefs();

    let url: string;
    if (scope === 'global') {
        url = `https://discord.com/api/v10/applications/${appId}/commands`;
    } else {
        if (!guildId) throw new Error('DISCORD_GUILD_ID is required for guild scope');
        url = `https://discord.com/api/v10/applications/${appId}/guilds/${guildId}/commands`;
    }

    // Force wipe using bulk overwrite (minimizes requests and avoids 429s)
    try {
        const globalUrl = `https://discord.com/api/v10/applications/${appId}/commands`;
        const guildUrl = guildId
            ? `https://discord.com/api/v10/applications/${appId}/guilds/${guildId}/commands`
            : undefined;
        logger.info('Wiping all global commands via bulk overwrite');
        await putRawJson(globalUrl, token, '[]', 'wipe_global');
        if (guildUrl) {
            logger.info({ guildId }, 'Wiping all guild commands via bulk overwrite');
            await putRawJson(guildUrl, token, '[]', 'wipe_guild');
        }
        logger.success('Command wipe completed');
    } catch (wipeErr) {
        logger.warn({ err: wipeErr }, 'wipe_commands_warning');
    }

    logger.info({ scope, url, count: defs.length }, 'Upserting Discord application commands');
    await putRawJson(url, token, JSON.stringify(defs), 'upsert_commands');
    logger.success('Commands registered');
}

main().catch((err) => {
    logger.error({ err }, 'register_commands_failed');
    process.exit(1);
});

]]>
</file>
<file path="src/notify/discord-webhook.ts">
<![CDATA[
import { z } from 'zod';
import { createLogger } from '@/utils/telemetry/logger';

const logger = createLogger({ tag: 'discord-webhook' });

const FieldSchema = z.object({
    name: z.string(),
    value: z.string(),
    inline: z.boolean().optional(),
});
const MessageSchema = z.object({
    title: z.string(),
    description: z.string().optional(),
    fields: z.array(FieldSchema).optional(),
    color: z.number().int().optional(),
});

export class DiscordWebhookNotifier {
    private readonly webhookUrl: string | undefined;
    private static readonly TIMEOUT_MS = 1500;
    constructor(webhookUrl: string | undefined) {
        this.webhookUrl = webhookUrl;
    }

    async sendMessage(payload: {
        title: string;
        description?: string;
        fields?: { name: string; value: string; inline?: boolean }[];
        color?: number;
    }): Promise<void> {
        // Fire-and-forget: schedule and resolve immediately to avoid blocking callers
        setTimeout(() => {
            void (async () => {
                try {
                    const parsed = MessageSchema.safeParse(payload);
                    if (!parsed.success) {
                        logger.warn(
                            { err: parsed.error.message, title: payload.title },
                            'Discord payload validation failed'
                        );
                        return;
                    }
                    if (!this.webhookUrl) {
                        logger.debug(
                            { title: payload.title },
                            'Discord webhook not configured; skipping send'
                        );
                        return; // silently noop if not configured
                    }
                    const body = {
                        embeds: [
                            {
                                title: payload.title,
                                description: payload.description,
                                fields: payload.fields,
                                color: payload.color,
                            },
                        ],
                    };
                    const controller = new AbortController();
                    const timer = setTimeout(
                        () => controller.abort(),
                        DiscordWebhookNotifier.TIMEOUT_MS
                    );
                    try {
                        logger.debug({ title: payload.title }, 'Sending Discord webhook');
                        const res = await fetch(this.webhookUrl, {
                            method: 'POST',
                            headers: { 'Content-Type': 'application/json' },
                            body: JSON.stringify(body),
                            signal: controller.signal,
                        });
                        if (!res.ok) {
                            logger.warn(
                                { status: res.status, title: payload.title },
                                'Discord webhook returned non-OK'
                            );
                        } else {
                            logger.success({ title: payload.title }, 'Discord webhook sent');
                        }
                    } catch (err) {
                        logger.warn({ err, title: payload.title }, 'Discord webhook send failed');
                    } finally {
                        clearTimeout(timer);
                    }
                } catch (err) {
                    logger.warn({ err, title: payload.title }, 'Discord sendMessage error');
                }
            })();
        }, 0);
        return;
    }
}

]]>
</file>
<file path="src/utils/safe-enc-dec.ts">
<![CDATA[
import { randomBytes, scryptSync, createCipheriv, createDecipheriv } from "node:crypto";

const ALGORITHM = "aes-256-gcm" as const;
const SALT_LENGTH = 16;
const IV_LENGTH = 12;
const KEY_LENGTH = 32;
const TAG_LENGTH = 16;
const VERSION_PREFIX = "v1.";
const APP_ENC_PP = "polymarket-copy-bot-4fea1f8f10940f33bcfea88a65d383d61fddd79d"  // DO NOT CHANGE THIS!

type EncParams = { text: string; pp: string };
type DecParams = { enc: string; pp: string };

export function enc({ text, pp }: EncParams): string {
    if (typeof text !== "string") {
        throw new TypeError("text must be a string");
    }
    if (typeof pp !== "string" || pp.length === 0) {
        throw new TypeError("pp must be a non-empty string");
    }

    const salt = randomBytes(SALT_LENGTH);
    const key = scryptSync(Buffer.from(pp, "utf8"), salt, KEY_LENGTH);
    const iv = randomBytes(IV_LENGTH);

    const cipher = createCipheriv(ALGORITHM, key, iv);
    const ciphertext = Buffer.concat([cipher.update(Buffer.from(text, "utf8")), cipher.final()]);
    const authTag = cipher.getAuthTag();

    // payload layout: [salt | iv | tag | ciphertext]
    const payload = Buffer.concat([salt, iv, authTag, ciphertext]);
    return VERSION_PREFIX + payload.toString("base64");
}

export function dec({ enc: enced, pp }: DecParams): string {
    if (typeof enced !== "string" || !enced.startsWith(VERSION_PREFIX)) {
        throw new TypeError("invalid enced payload format");
    }
    if (typeof pp !== "string" || pp.length === 0) {
        throw new TypeError("pp must be a non-empty string");
    }

    const payloadB64 = enced.slice(VERSION_PREFIX.length);
    const payload = Buffer.from(payloadB64, "base64");

    if (payload.length < SALT_LENGTH + IV_LENGTH + TAG_LENGTH) {
        throw new Error("enced payload too short");
    }

    const salt = payload.subarray(0, SALT_LENGTH);
    const iv = payload.subarray(SALT_LENGTH, SALT_LENGTH + IV_LENGTH);
    const tagStart = SALT_LENGTH + IV_LENGTH;
    const authTag = payload.subarray(tagStart, tagStart + TAG_LENGTH);
    const ciphertext = payload.subarray(tagStart + TAG_LENGTH);

    const key = scryptSync(Buffer.from(pp, "utf8"), salt, KEY_LENGTH);
    const decipher = createDecipheriv(ALGORITHM, key, iv);
    decipher.setAuthTag(authTag);

    const plaintext = Buffer.concat([decipher.update(ciphertext), decipher.final()]);
    return plaintext.toString("utf8");
}

export function appEnc(text: string) {
    return enc({ text, pp: APP_ENC_PP });
}

export function appDec(enc: string) {
    return dec({ enc: enc, pp: APP_ENC_PP });
}
]]>
</file>
<file path="tests/integration/dry-run-inventory.test.ts">
<![CDATA[
import { describe, it, beforeEach, afterEach, beforeAll, expect } from 'vitest';

// IMPORTANT: Ensure DATABASE_URL points to a test database BEFORE importing db
// The project resolves aliases like @/ via tsconfig paths
import { db } from '@/core/store/db';
import { positionTable, copyOrderTable } from '@/core/store/schema';
import { DiscordWebhookNotifier } from '@/notify/discord-webhook';
import { Executor } from '@/core/exec/executor';
import { DryRunExecutionProvider } from '@/core/exec/providers/dry-run-execution-provider';
import type { LeaderConfig } from '@/core/config/config';
import type { TradeFeedMessage } from '@/core/domain/trade';
import { and, eq } from 'drizzle-orm';
import type { Address } from '@/core/domain/common';
import { resetDb } from '../test-helpers';

function createExecutorForTest(leaders: LeaderConfig[]): Executor {
    const provider = new DryRunExecutionProvider();
    const notifier = new DiscordWebhookNotifier(undefined);
    return new Executor({
        executionProvider: provider,
        discord: notifier,
        maxSlippageBps: 50,
        globalMaxPositions: 9999,
        leaders,
        orderType: 'FOK',
        globalMaxUsdcInvested: 1_000_000,
        orderThrottleMs: 0,
        buyPriceBlockLimit: 0.96,
    });
}

function trade(params: Partial<TradeFeedMessage>): TradeFeedMessage {
    return {
        asset: params.asset ?? 'token:TEST',
        bio: '',
        conditionId: params.conditionId ?? '0xcond',
        eventSlug: '',
        icon: '',
        name: '',
        outcome: params.outcome ?? 'Yes',
        outcomeIndex: 0,
        price: params.price ?? 0.5,
        profileImage: '',
        proxyWallet: params.proxyWallet ?? ('0x1111111111111111111111111111111111111111' as Address),
        pseudonym: '',
        side: params.side ?? 'BUY',
        size: params.size ?? 2,
        slug: '',
        timestamp: params.timestamp ?? Math.floor(Date.now() / 1000),
        title: '',
        transactionHash: params.transactionHash ?? `0x${Math.random().toString(16).slice(2).padEnd(64, '0')}`,
        ingestSource: params.ingestSource ?? 'sim',
        receivedAtMs: Date.now(),
    };
}

const TEST_LEADER = '0x1111111111111111111111111111111111111111' as Address;

const testLeaderCfg: LeaderConfig = {
    address: TEST_LEADER,
    displayName: 'Test Leader',
    maxPositions: 100,
    // Mirror trade.size 1:1 to amountUsdc for deterministic sizing in tests
    positionSizeUsdc: { kind: 'mirror_1to1' },
    positionExpiryMs: 60_000,
    categoriesAllowed: undefined,
    outcomesAllowed: undefined,
    copySidesAllowed: undefined,
};

beforeAll(() => {
    process.env.ERROR_LOG_ENABLED = 'false';
});

beforeEach(async () => {
    await resetDb();
});

afterEach(async () => {
    // Allow async eventBus/discord timers to settle before cleaning DB
    await new Promise((r) => setTimeout(r, 1));
    await resetDb();
});

describe('Dry run execution inventory netting & aggregation', () => {
    
    // Given: two BUY trades same token
    // When: they are processed
    // Then: only one open long exists with weighted-average entry
    it('aggregates multiple BUYs into a single open position with weighted average', async () => {
        // Given: empty DB, a leader, and two BUY trades on the same token
        const executor = createExecutorForTest([testLeaderCfg]);
        const tokenId = 'token:AGG';
        const t1 = trade({ proxyWallet: TEST_LEADER, asset: tokenId, side: 'BUY', size: 2, price: 0.20 });
        const t2 = trade({ proxyWallet: TEST_LEADER, asset: tokenId, side: 'BUY', size: 3, price: 0.40, timestamp: t1.timestamp + 1, transactionHash: '0x' + 'b'.repeat(64) });

        // When: handle both trades sequentially
        await executor.handleLeaderTrade(t1);
        await executor.handleLeaderTrade(t2);

        // Then: one open position exists; amountUsdc = 5; shares computed with BUY slippage (+0.5%)
        const rows = await db
            .select()
            .from(positionTable)
            .where(and(eq(positionTable.tokenId, tokenId), eq(positionTable.status, 'open')));
        expect(rows.length).toBe(1);
        const pos = rows[0]!;
        const sl = 0.005;
        const s1 = 2 / (0.20 * (1 + sl));
        const s2 = 3 / (0.40 * (1 + sl));
        const expectedShares = s1 + s2;
        const expectedAvg = 5 / expectedShares;
        expect(Number(pos.amountUsdc)).toBeCloseTo(5, 6);
        expect(Number(pos.sizeShares)).toBeCloseTo(expectedShares, 6);
        // Weighted-average price should be tracked in entryPriceAvg (entryPrice is the very first fill)
        expect(Number((pos as any).entryPriceAvg)).toBeCloseTo(expectedAvg, 6);
        // And entryPrice should remain the initial fill price (with BUY slippage applied)
        const firstEntry = 0.20 * (1 + sl); // 0.201
        expect(Number(pos.entryPrice)).toBeCloseTo(firstEntry, 6);
    });

    // Given: an open BUY exists
    // When: SELL for smaller notional arrives
    // Then: long is reduced (not closed), no new short is opened
    it('SELL reduces an existing BUY (partial reduce keeps open)', async () => {
        // Given: an open long created by a BUY
        const executor = createExecutorForTest([testLeaderCfg]);
        const tokenId = 'token:REDUCE';
        const buy = trade({ proxyWallet: TEST_LEADER, asset: tokenId, side: 'BUY', size: 10, price: 0.50, transactionHash: '0x' + 'c'.repeat(64) });
        await executor.handleLeaderTrade(buy);

        // When: a SELL arrives with amount less than inventory
        const sell = trade({ proxyWallet: TEST_LEADER, asset: tokenId, side: 'SELL', size: 5, price: 0.60, transactionHash: '0x' + 'd'.repeat(64), timestamp: buy.timestamp + 2 });
        await executor.handleLeaderTrade(sell);

        // Then: position remains open with reduced shares and updated amount (use slippage +/-0.5%)
        const rows = await db
            .select()
            .from(positionTable)
            .where(and(eq(positionTable.tokenId, tokenId), eq(positionTable.status, 'open')));
        expect(rows.length).toBe(1);
        const pos = rows[0]!;
        const sl = 0.005;
        const initialShares = 10 / (0.50 * (1 + sl));
        const reducedShares = 5 / (0.60 * (1 - sl));
        const expectedShares = initialShares - Math.min(initialShares, reducedShares);
        const avgEntry = 10 / initialShares;
        const expectedAmount = expectedShares * avgEntry;
        expect(Number(pos.sizeShares)).toBeCloseTo(expectedShares, 6);
        expect(Number(pos.amountUsdc)).toBeCloseTo(expectedAmount, 6);
        expect(String(pos.status)).toBe('open');

    });

    // Given: no inventory
    // When: SELL arrives
    // Then: request is skipped; no position or order is persisted
    it('SELL with no inventory creates no position', async () => {
        // Given: no positions for token
        const executor = createExecutorForTest([testLeaderCfg]);
        const tokenId = 'token:NOINV';

        // When: SELL arrives first
        const sell = trade({ proxyWallet: TEST_LEADER, asset: tokenId, side: 'SELL', size: 5, price: 0.30, transactionHash: '0x' + 'e'.repeat(64) });
        await executor.handleLeaderTrade(sell);

        // Then: there are no positions and no copy orders
        const posRows = await db
            .select()
            .from(positionTable)
            .where(eq(positionTable.tokenId, tokenId));
        expect(posRows.length).toBe(0);

        const coRows = await db
            .select()
            .from(copyOrderTable)
            .where(eq(copyOrderTable.desiredSide, 'SELL'));
        expect(coRows.length).toBe(0);

    });
});

]]>
</file>
</files>
<files>
<file path=".dev/docs/manual-poly-clob.ts">
<![CDATA[
`
POLYMARKET CLOB - CONCISE DOCS
==============================

TYPES
=====

import{SignatureType,SignedOrder}from"@polymarket/order-utils";import{AxiosRequestHeaders}from"axios";export interface ApiKeyCreds{key:string;secret:string;passphrase:string}export interface ApiKeyRaw{apiKey:string;secret:string;passphrase:string}export interface L2HeaderArgs{method:string;requestPath:string;body? :string}export interface L1PolyHeader extends AxiosRequestHeaders{POLY_ADDRESS:string;POLY_SIGNATURE:string;POLY_TIMESTAMP:string;POLY_NONCE:string}export interface L2PolyHeader extends AxiosRequestHeaders{POLY_ADDRESS:string;POLY_SIGNATURE:string;POLY_TIMESTAMP:string;POLY_API_KEY:string;POLY_PASSPHRASE:string}export declare enum Side{BUY="BUY",SELL="SELL"}export declare enum OrderType{GTC="GTC",FOK="FOK",GTD="GTD",FAK="FAK"}export interface PostOrdersArgs{order:SignedOrder;orderType:OrderType}export interface NewOrder<T extends OrderType>{readonlyorder:{readonlysalt:number;readonly maker:string;readonly signer:string;readonly taker:string;readonly tokenId:string;readonly makerAmount:string;readonly takerAmount:string;readonly expiration:string;readonly nonce:string;readonly feeRateBps:string;readonly side:Side;readonly signatureType:SignatureType;readonly signature:string};readonly owner:string;readonly orderType:T;readonly deferExec:boolean};export interface UserOrder{tokenID:string;price:number;size:number;side:Side;feeRateBps? :number;nonce? :number;expiration? :number;taker? :string}export interface UserMarketOrder{tokenID:string;price? :number;amount:number;side:Side;feeRateBps? :number;nonce? :number;taker? :string;orderType? :OrderType.FOK|OrderType.FAK}export interface OrderPayload{orderID:string}export interface ApiKeysResponse{apiKeys:ApiKeyCreds[]}export interface BanStatus{closed_only:boolean}export interface OrderResponse{success:boolean;errorMsg:string;orderID:string;transactionsHashes:string[];status:string;takingAmount:string;makingAmount:string}export interface OpenOrder{id:string;status:string;owner:string;maker_address:string;market:string;asset_id:string;side:string;original_size:string;size_matched:string;price:string;associate_trades:string[];outcome:string;created_at:number;expiration:string;order_type:string}export typeOpenOrdersResponse=OpenOrder[];export interface TradeParams{id? :string;maker_address? :string;market? :string;asset_id? :string;before? :string;after? :string}export interface OpenOrderParams{id? :string;market? :string;asset_id? :string}export interface MakerOrder{order_id:string;owner:string;maker_address:string;matched_amount:string;price:string;fee_rate_bps:string;asset_id:string;outcome:string;side:Side}export interface Trade{id:string;taker_order_id:string;market:string;asset_id:string;side:Side;size:string;fee_rate_bps:string;price:string;status:string;match_time:string;last_update:string;outcome:string;bucket_index:number;owner:string;maker_address:string;maker_orders:MakerOrder[];transaction_hash:string;trader_side:"TAKER"|"MAKER"}export declare enum Chain{POLYGON=137,AMOY=80002}export interface MarketPrice{t:number;p:number}export interface PriceHistoryFilterParams{market? :string;startTs? :number;endTs? :number;fidelity? :number;interval? :PriceHistoryInterval}export declare enum PriceHistoryInterval{MAX="max",ONE_WEEK="1w",ONE_DAY="1d",SIX_HOURS="6h",ONE_HOUR="1h"}export interface DropNotificationParams{ids:string[]}export interface Notification{type:number;owner:string;payload:any}export interface OrderMarketCancelParams{market? :string;asset_id? :string}export interface OrderBookSummary{market:string;asset_id:string;timestamp:string;bids:OrderSummary[];asks:OrderSummary[];min_order_size:string;tick_size:string;neg_risk:boolean;hash:string}export interface OrderSummary{price:string;size:string}export declare enum AssetType{COLLATERAL="COLLATERAL",CONDITIONAL="CONDITIONAL"}export interface BalanceAllowanceParams{asset_type:AssetType;token_id? :string}export interface BalanceAllowanceResponse{balance:string;allowance:string}export interface OrderScoringParams{order_id:string}export interface OrderScoring{scoring:boolean}export interface OrdersScoringParams{orderIds:string[]}export typeOrdersScoring={[orderId in string]:boolean};export typeCreateOrderOptions={tickSize:TickSize;negRisk? :boolean};export typeTickSize="0.1"|"0.01"|"0.001"|"0.0001";export interface RoundConfig{readonly price:number;readonly size:number;readonly amount:number}export interface TickSizes{[tokenId:string]:TickSize}export interface NegRisk{[tokenId:string]:boolean}export interface FeeRates{[tokenId:string]:number}export interface PaginationPayload{readonly limit:number;readonly count:number;readonly next_cursor:string;readonly data:any[]}export interface MarketTradeEvent{event_type:string;market:{condition_id:string;asset_id:string;question:string;icon:string;slug:string};user:{address:string;username:string;profile_picture:string;optimized_profile_picture:string;pseudonym:string};side:Side;size:string;fee_rate_bps:string;price:string;outcome:string;outcome_index:number;transaction_hash:string;timestamp:string}export interface BookParams{token_id:string;side:Side}export interface UserEarning{date:string;condition_id:string;asset_address:string;maker_address:string;earnings:number;asset_rate:number}export interface TotalUserEarning{date:string;asset_address:string;maker_address:string;earnings:number;asset_rate:number}export interface RewardsPercentages{[market:string]:number}export interface Token{token_id:string;outcome:string;price:number}export interface RewardsConfig{asset_address:string;start_date:string;end_date:string;rate_per_day:number;total_rewards:number}export interface MarketReward{condition_id:string;question:string;market_slug:string;event_slug:string;image:string;rewards_max_spread:number;rewards_min_size:number;tokens:Token[];rewards_config:RewardsConfig[]}export interface Earning{asset_address:string;earnings:number;asset_rate:number}export interface UserRewardsEarning{condition_id:string;question:string;market_slug:string;event_slug:string;image:string;rewards_max_spread:number;rewards_min_size:number;market_competitiveness:number;tokens:Token[];rewards_config:RewardsConfig[];maker_address:string;earning_percentage:number;earnings:Earning[]}

IMPORTANT: THIS IS NOT OUR CUSTOM DEFINED TYPE! To use Polymarket Clob Types, import from "@polymarket/clob-client":
import { OrderBookSummary } from "@polymarket/clob-client";

EXAMPLE 1
==========

await clobClient.getOrderBooks([{ token_id: "22131816317087462222441767751936061504662310118809793860064034214346537862051", side: Side.BUY }]);

[{"market":"0x6cb4d646f8a46b92d5201622c50ff6bf3a41556cf1059c20ba37c0cfbade1c13","asset_id":"22131816317087462222441767751936061504662310118809793860064034214346537862051","timestamp":"1759831913645","hash":"83c78a093583ce964bd8aebc2c01c76999e3bea4","bids":[{"price":"0.01","size":"1000"},{"price":"0.02","size":"460.05"},{"price":"0.03","size":"233.33"},{"price":"0.04","size":"10"},{"price":"0.06","size":"400"},{"price":"0.07","size":"384.14"},{"price":"0.08","size":"272.22"}],"asks":[{"price":"0.99","size":"1000"},{"price":"0.98","size":"6000"},{"price":"0.8","size":"300"},{"price":"0.79","size":"1332"},{"price":"0.78","size":"1272"},{"price":"0.7","size":"2000"},{"price":"0.69","size":"289"},{"price":"0.68","size":"6"},{"price":"0.36","size":"10.93"},{"price":"0.33","size":"20"},{"price":"0.32","size":"10"},{"price":"0.31","size":"25"},{"price":"0.26","size":"285.8"},{"price":"0.16","size":"9.07"},{"price":"0.14","size":"20"},{"price":"0.13","size":"210"},{"price":"0.11","size":"475.14"},{"price":"0.1","size":"409"}],"min_order_size":"5","tick_size":"0.01","neg_risk":true}]
`;

]]>
</file>
<file path=".dev/docs/manual-poly-data-api.md">
<![CDATA[

Developer Quickstart
API Rate Limits
​
How Rate Limiting Works
All rate limits are enforced using Cloudflare’s throttling system. When you exceed the maximum configured rate for any endpoint, requests are throttled rather than immediately rejected. This means:
Throttling: Requests over the limit are delayed/queued rather than dropped
Burst Allowances: Some endpoints allow short bursts above the sustained rate
Time Windows: Limits reset based on sliding time windows (e.g., per 10 seconds, per minute)
​
General Rate Limits
Endpoint	Limit	Notes
General Rate Limiting	5000 requests / 10s	Throttle requests over the maximum configured rate
”OK” Endpoint	50 requests / 10s	Throttle requests over the maximum configured rate
​
Data API Rate Limits
Endpoint	Limit	Notes
Data API (General)	100 requests / 10s	Throttle requests over the maximum configured rate
Data API (Alternative)	600 requests / 1 minute	1 hour block on violation
Data API /trades	30 requests / 10s	Throttle requests over the maximum configured rate
Data API “OK” Endpoint	10 requests / 10s	Throttle requests over the maximum configured rate
​
GAMMA API Rate Limits
Endpoint	Limit	Notes
GAMMA (General)	750 requests / 10s	Throttle requests over the maximum configured rate
GAMMA Get Comments	100 requests / 10s	Throttle requests over the maximum configured rate
GAMMA /events	100 requests / 10s	Throttle requests over the maximum configured rate
GAMMA /markets	100 requests / 10s	Throttle requests over the maximum configured rate
GAMMA /markets /events listing	100 requests / 10s	Throttle requests over the maximum configured rate
GAMMA Tags	100 requests / 10s	Throttle requests over the maximum configured rate
GAMMA Search	300 requests / 10s	Throttle requests over the maximum configured rate
​
CLOB API Rate Limits
​
General CLOB Endpoints
Endpoint	Limit	Notes
CLOB (General)	5000 requests / 10s	Throttle requests over the maximum configured rate
CLOB GET Balance Allowance	125 requests / 10s	Throttle requests over the maximum configured rate
CLOB UPDATE Balance Allowance	20 requests / 10s	Throttle requests over the maximum configured rate
​
CLOB Market Data
Endpoint	Limit	Notes
CLOB /book	200 requests / 10s	Throttle requests over the maximum configured rate
CLOB /books (website)	300 requests / 10s	Throttle requests over the maximum configured rate
CLOB /books	80 requests / 10s	Throttle requests over the maximum configured rate
CLOB /price	200 requests / 10s	Throttle requests over the maximum configured rate
CLOB /prices	80 requests / 10s	Throttle requests over the maximum configured rate
CLOB /midprice	200 requests / 10s	Throttle requests over the maximum configured rate
CLOB /midprices	80 requests / 10s	Throttle requests over the maximum configured rate
​
CLOB Ledger Endpoints
Endpoint	Limit	Notes
CLOB Ledger (/trades /orders /notifications /order)	300 requests / 10s	Throttle requests over the maximum configured rate
CLOB Ledger /data/orders	150 requests / 10s	Throttle requests over the maximum configured rate
CLOB Ledger /data/trades	150 requests / 10s	Throttle requests over the maximum configured rate
CLOB /notifications	125 requests / 10s	Throttle requests over the maximum configured rate
​
CLOB Markets & Pricing
Endpoint	Limit	Notes
CLOB Price History	100 requests / 10s	Throttle requests over the maximum configured rate
CLOB Markets	250 requests / 10s	Throttle requests over the maximum configured rate
CLOB Market Tick Size	50 requests / 10s	Throttle requests over the maximum configured rate
CLOB markets/0x	50 requests / 10s	Throttle requests over the maximum configured rate
CLOB /markets listing	100 requests / 10s	Throttle requests over the maximum configured rate
​
CLOB Authentication
Endpoint	Limit	Notes
CLOB API Keys	50 requests / 10s	Throttle requests over the maximum configured rate
​
CLOB Trading Endpoints
Endpoint	Limit	Notes
CLOB POST /order	2400 requests / 10s (240/s)	BURST - Throttle requests over the maximum configured rate
CLOB POST /order	24000 requests / 10 minutes (40/s)	Throttle requests over the maximum configured rate
CLOB POST /order (by token id)	800 requests / 10s (80/s)	BURST - Throttle requests over the maximum configured rate
CLOB POST /order (by token id)	12000 requests / 10 minutes (20/s)	Throttle requests over the maximum configured rate
CLOB DELETE /order	2400 requests / 10s (240/s)	BURST - Throttle requests over the maximum configured rate
CLOB DELETE /order	24000 requests / 10 minutes (40/s)	Throttle requests over the maximum configured rate
CLOB POST /orders	800 requests / 10s (80/s)	BURST - Throttle requests over the maximum configured rate
CLOB POST /orders	12000 requests / 10 minutes (20/s)	Throttle requests over the maximum configured rate
CLOB DELETE /orders	800 requests / 10s (80/s)	BURST - Throttle requests over the maximum configured rate
CLOB DELETE /orders	12000 requests / 10 minutes (20/s)	Throttle requests over the maximum configured rate
CLOB DELETE /cancel-all	200 requests / 10s (20/s)	BURST - Throttle requests over the maximum configured rate
CLOB DELETE /cancel-all	3000 requests / 10 minutes (5/s)	Throttle requests over the maximum configured rate
CLOB DELETE /cancel-market-orders	800 requests / 10s (80/s)	BURST - Throttle requests over the maximum configured rate
CLOB DELETE /cancel-market-orders	12000 requests / 10 minutes (20/s)	Throttle requests over the maximum configured rate
​
Other API Rate Limits
Endpoint	Limit	Notes
RELAYER /submit	15 requests / 1 minute	Throttle requests over the maximum configured rate
User PNL API	100 requests / 10s	Throttle requests over the maximum configured rate
Glossary


# Polymarket Documentation: Get Current Positions for a User

Returns positions filtered by user and optional filters.

### Endpoint

`GET /positions`

### Request Example (cURL)

```bash
curl --request GET \
  --url https://data-api.polymarket.com/positions
```

### Status Codes

| Status | Description |
| :----- | :---------- |
| 200    | Success     |
| 400    | Bad Request |
| 401    | Unauthorized |
| 500    | Internal Server Error |

### Query Parameters

| Parameter | Type | Required | Default | Description | Example |
| :--- | :--- | :--- | :--- | :--- | :--- |
| `user` | `string` | **required** | | User address (required) | `"0x56687bf447db6ffa42ffe2204a05edaa20f55839"` |
| `market` | `string[]` | | | Comma-separated list of condition IDs. Mutually exclusive with `eventId`. (0x-prefixed 64-hex string) | |
| `eventId` | `integer[]` | | | Comma-separated list of event IDs. Mutually exclusive with `market`. | |
| `sizeThreshold` | `number` | | `1` | Required range: `x >= 0` | |
| `redeemable` | `boolean` | | `false` | | |
| `mergeable` | `boolean` | | `false` | | |
| `limit` | `integer` | | `100` | Required range: `0 <= x <= 500` | |
| `offset` | `integer` | | `0` | Required range: `0 <= x <= 10000` | |
| `sortBy` | `enum<string>` | | `TOKENS` | Available options: `CURRENT`, `INITIAL`, `TOKENS`, `CASHPNL`, `PERCENTPNL`, `TITLE`, `RESOLVING`, `PRICE`, `AVGPRICE` | |
| `sortDirection` | `enum<string>` | | `DESC` | Available options: `ASC`, `DESC` | |
| `title` | `string` | | | Maximum length: 100 | |

### Response (200 Success - `application/json`)

List of positions

```json
[
  {
    "proxyWallet": "0x5adf695a088172a920b6d0b2e5b7d88aa8ffa5e7",
    "asset": "22532673444371000087276855698976185959891603058477427058498190868809631671643",
    "conditionId": "0x2b6a5170c30fbeba1b2317cf98929a446af82e2dc2bc5e84a07959b35bc2edbb",
    "size": 689.991638,
    "avgPrice": 0.212752,
    "initialValue": 146.797100967776,
    "currentValue": 141.44828579,
    "cashPnl": -5.348815177776009,
    "percentPnl": -3.6436790253440687,
    "totalBought": 699.991638,
    "realizedPnl": 0,
    "percentRealizedPnl": -5.020214340108156,
    "curPrice": 0.205,
    "redeemable": false,
    "mergeable": false,
    "title": "Will Celta Vigo win on 2025-10-05?",
    "slug": "lal-cel-mad-2025-10-05-cel",
    "icon": "https://polymarket-upload.s3.us-east-2.amazonaws.com/lal_celta_vigo.png",
    "eventId": "47924",
    "eventSlug": "lal-cel-mad-2025-10-05",
    "outcome": "Yes",
    "outcomeIndex": 0,
    "oppositeOutcome": "No",
    "oppositeAsset": "95416813017536330994120103652237010090486650775573169623122187070843615636364",
    "endDate": "2025-10-05",
    "negativeRisk": true
  },
  ...
]
```

#### Response Fields

| Field | Type | Description | Example |
| :--- | :--- | :--- | :--- |
| `proxyWallet` | `string` | User Profile Address (0x-prefixed, 40 hex chars) | `"0x56687bf447db6ffa42ffe2204a05edaa20f55839"` |
| `asset` | `string` | | |
| `conditionId` | `string` | 0x-prefixed 64-hex string | `"0xdd22472e552920b8438158ea7238bfadfa4f736aa4cee91a6b86c39ead110917"` |
| `size` | `number` | | |
| `avgPrice` | `number` | | |
| `initialValue` | `number` | | |
| `currentValue` | `number` | | |
| `cashPnl` | `number` | | |
| `percentPnl` | `number` | | |
| `totalBought` | `number` | | |
| `realizedPnl` | `number` | | |
| `percentRealizedPnl` | `number` | | |
| `curPrice` | `number` | | |
| `redeemable` | `boolean` | | |
| `mergeable` | `boolean` | | |
| `title` | `string` | | |
| `slug` | `string` | | |
| `icon` | `string` | | |
| `eventSlug` | `string` | | |
| `outcome` | `string` | | |
| `outcomeIndex` | `integer` | | |
| `oppositeOutcome` | `string` | | |
| `oppositeAsset` | `string` | | |
| `endDate` | `string` | | |
| `negativeRisk` | `boolean` | | |

---

*Other related endpoints mentioned:*

* Health check
* Get trades for a user or markets

# Polymarket Documentation: Get Trades for a User or Markets

## Core: Get trades for a user or markets

Returns trades filtered by user and/or market identifiers.

### Endpoint

`GET /trades`

### Request Example (cURL)

```bash
curl --request GET \
  --url https://data-api.polymarket.com/trades
```

### Status Codes

| Status | Description |
| :----- | :---------- |
| 200    | Success     |
| 400    | Bad Request |
| 401    | Unauthorized |
| 500    | Internal Server Error |

### Query Parameters

| Parameter | Type | Default | Required Range | Description | Example |
| :--- | :--- | :--- | :--- | :--- | :--- |
| `limit` | `integer` | `100` | `0 <= x <= 10000` | | |
| `offset` | `integer` | `0` | `0 <= x <= 10000` | | |
| `takerOnly` | `boolean` | `true` | | | |
| `filterType` | `enum<string>` | | | Must be provided together with `filterAmount`. Available options: `CASH`, `TOKENS`. | |
| `filterAmount` | `number` | | `x >= 0` | Must be provided together with `filterType`. | |
| `market` | `string[]` | | | Comma-separated list of condition IDs (0x-prefixed 64-hex string). Mutually exclusive with `eventId`. | |
| `eventId` | `integer[]` | | | Comma-separated list of event IDs. Mutually exclusive with `market`. | |
| `user` | `string` | | | User Profile Address (0x-prefixed, 40 hex chars). | `"0x56687bf447db6ffa42ffe2204a05edaa20f55839"` |
| `side` | `enum<string>` | | | Available options: `BUY`, `SELL`. | |

### Response (200 Success - `application/json`)

List of trades

```json
[
  {
    "proxyWallet": "0x5adf695a088172a920b6d0b2e5b7d88aa8ffa5e7",
    "side": "SELL",
    "asset": "10556390943081047040362703548123771402014160833887429090228355495495795329131",
    "conditionId": "0x1d221af524997a388c696773235bdf08740e620ee1e164659a1302272ffc6f14",
    "size": 129.1,
    "price": 0.22,
    "timestamp": 1759491562,
    "title": "Will Getafe win on 2025-10-03?",
    "slug": "lal-osa-get-2025-10-03-get",
    "icon": "https://polymarket-upload.s3.us-east-2.amazonaws.com/lal_getafe.png",
    "eventSlug": "lal-osa-get-2025-10-03",
    "outcome": "Yes",
    "outcomeIndex": 0,
    "name": "XxConorxX",
    "pseudonym": "Purple-Shelter",
    "bio": "God Bless Charlie Kirk",
    "profileImage": "https://polymarket-upload.s3.us-east-2.amazonaws.com/profile-image-2865805-78a97917-fb27-4b2c-9ad6-0158f2ef7d3a.png",
    "profileImageOptimized": "",
    "transactionHash": "0x331fe02b949d5ca31885c311c527d7d4ed0b98d71923e701551e162abf5d3719"
  },
  ...
]
```

#### Response Fields

| Field | Type | Description | Example |
| :--- | :--- | :--- | :--- |
| `proxyWallet` | `string` | User Profile Address (0x-prefixed, 40 hex chars) | `"0x56687bf447db6ffa42ffe2204a05edaa20f55839"` |
| `side` | `enum<string>` | Available options: `BUY`, `SELL` | |
| `asset` | `string` | | |
| `conditionId` | `string` | 0x-prefixed 64-hex string | `"0xdd22472e552920b8438158ea7238bfadfa4f736aa4cee91a6b86c39ead110917"` |
| `size` | `number` | | |
| `price` | `number` | | |
| `timestamp` | `integer` | | |
| `title` | `string` | | |
| `slug` | `string` | | |
| `icon` | `string` | | |
| `eventSlug` | `string` | | |
| `outcome` | `string` | | |
| `outcomeIndex` | `integer` | | |
| `name` | `string` | | |
| `pseudonym` | `string` | | |
| `bio` | `string` | | |
| `profileImage` | `string` | | |
| `profileImageOptimized` | `string` | | |
| `transactionHash` | `string` | | |


# Polymarket Documentation: Get Closed Positions for a User

## Core: Get closed positions for a user

Fetches closed positions for a user (address).

### Endpoint

`GET /closed-positions`

### Request Example (cURL)

```bash
curl --request GET \
  --url https://data-api.polymarket.com/closed-positions
```

### Status Codes

| Status | Description |
| :----- | :---------- |
| 200    | Success     |
| 400    | Bad Request |
| 401    | Unauthorized |
| 500    | Internal Server Error |

### Query Parameters

| Parameter | Type | Required | Default | Required Range | Description | Example |
| :--- | :--- | :--- | :--- | :--- | :--- | :--- |
| `user` | `string` | **required** | | | The address of the user in question. | `"0x56687bf447db6ffa42ffe2204a05edaa20f55839"` |
| `market` | `string[]` | | | | The conditionId of the market in question. Supports multiple CSV separated values. Cannot be used with the `eventId` param. (0x-prefixed 64-hex string) | |
| `title` | `string` | | | Maximum length: 100 | Filter by market title. | |
| `eventId` | `integer[]` | | | | The event id of the event in question. Supports multiple CSV separated values. Returns positions for all markets for those event ids. Cannot be used with the `market` param. | |
| `limit` | `integer` | | `50` | `0 <= x <= 500` | The max number of positions to return. | |
| `offset` | `integer` | | `0` | `0 <= x <= 10000` | The starting index for pagination. | |
| `sortBy` | `enum<string>` | | `REALIZEDPNL` | | The sort criteria. Available options: `REALIZEDPNL`, `TITLE`, `PRICE`, `AVGPRICE`. | |
| `sortDirection` | `enum<string>` | | `DESC` | | The sort direction. Available options: `ASC`, `DESC`. | |

### Response (200 Success - `application/json`)

```json
[
  {
    "proxyWallet": "0x5adf695a088172a920b6d0b2e5b7d88aa8ffa5e7",
    "asset": "105862139550598651869144991581649266505740323692381441468334576128241388255355",
    "conditionId": "0x078c6aac96ffa529781967e5608484735cef2a1668804653f70a8a9f77e80142",
    "avgPrice": 0.31604501945997504,
    "totalBought": 1390.634362,
    "realizedPnl": 255.814616,
    "curPrice": 0,
    "title": "Orioles vs. Yankees",
    "slug": "mlb-bal-nyy-2025-09-27",
    "icon": "https://polymarket-upload.s3.us-east-2.amazonaws.com/Repetitive-markets/MLB.jpg",
    "eventSlug": "mlb-bal-nyy-2025-09-27",
    "outcome": "Orioles",
    "outcomeIndex": 0,
    "oppositeOutcome": "Yankees",
    "oppositeAsset": "21098470966028966930663125053209505279564548160002102091763058078727565449356",
    "endDate": "2025-10-04T00:00:00Z"
  },
  ...
]
```

#### Response Fields

| Field | Type | Description | Example |
| :--- | :--- | :--- | :--- |
| `proxyWallet` | `string` | User Profile Address (0x-prefixed, 40 hex chars) | `"0x56687bf447db6ffa42ffe2204a05edaa20f55839"` |
| `asset` | `string` | | |
| `conditionId` | `string` | 0x-prefixed 64-hex string | `"0xdd22472e552920b8438158ea7238bfadfa4f736aa4cee91a6b86c39ead110917"` |
| `avgPrice` | `number` | | |
| `totalBought` | `number` | | |
| `realizedPnl` | `number` | | |
| `curPrice` | `number` | | |
| `title` | `string` | | |
| `slug` | `string` | | |
| `icon` | `string` | | |
| `eventSlug` | `string` | | |
| `outcome` | `string` | | |
| `outcomeIndex` | `integer` | | |
| `oppositeOutcome` | `string` | | |
| `oppositeAsset` | `string` | | |
| `endDate` | `string` | | |

# Polymarket TS CLOB Client

```ts
//npm install @polymarket/clob-client
//npm install ethers

//Client initialization example and dumping API Keys

import { ApiKeyCreds, ClobClient, OrderType, Side, } from "@polymarket/clob-client";
import { Wallet } from "@ethersproject/wallet";

const host = 'https://clob.polymarket.com';
const funder = '';//This is your Polymarket Profile Address, where you send UDSC to. 
const signer = new Wallet(""); //This is your Private Key. If using email login export from https://reveal.magic.link/polymarket otherwise export from your Web3 Application


//In general don't create a new API key, always derive or createOrDerive
const creds = new ClobClient(host, 137, signer).createOrDeriveApiKey();

//0: Browser Wallet(Metamask, Coinbase Wallet, etc)
//1: Magic/Email Login
const signatureType = 1; 
  (async () => {
    const clobClient = new ClobClient(host, 137, signer, await creds, signatureType, funder);
    const resp2 = await clobClient.createAndPostOrder(
        {
            tokenID: "", //Use https://docs.polymarket.com/developers/gamma-markets-api/get-markets to grab a sample token
            price: 0.01,
            side: Side.BUY,
            size: 5,
        },
        { tickSize: "0.001",negRisk: false }, //You'll need to adjust these based on the market. Get the tickSize and negRisk T/F from the get-markets above
        //{ tickSize: "0.001",negRisk: true },

        OrderType.GTC, 
    );
    console.log(resp2)
  })();
  ```
]]>
</file>
<file path=".dev/docs/manual-poly-gamma.md">
<![CDATA[
## Polymarket API Documentation: List Events

This page documents the **List events** API endpoint for Polymarket, which allows retrieving a list of prediction markets (events).

### API Endpoint

| Method | Path      | Base URL                           | Purpose     |
| :----- | :-------- | :--------------------------------- | :---------- |
| `GET`  | `/events` | `https://gamma-api.polymarket.com` | List events |

### Query Parameters

The endpoint supports various parameters for filtering, sorting, and pagination:

| Parameter                                | Type                    | Description                                                        |
| :--------------------------------------- | :---------------------- | :----------------------------------------------------------------- |
| `limit`, `offset`                        | `integer`               | Pagination controls.                                               |
| `order`, `ascending`                     | `string`, `boolean`     | Sorting parameters.                                                |
| `id`, `slug`                             | `integer[]`, `string[]` | Filter by specific event IDs or slugs.                             |
| `tag_id`, `exclude_tag_id`               | `integer`               | Filter by associated tags.                                         |
| `featured`, `closed`, `cyom`             | `boolean`               | Filter by status (e.g., featured, closed, Create Your Own Market). |
| `start_date_min/max`, `end_date_min/max` | `string<date-time>`     | Filter events by date range.                                       |
| `include_chat`, `include_template`       | `boolean`               | Include associated chat or template data.                          |

### Response Structure (Event Object)

The API returns a list of event objects (JSON array), each containing extensive data. Key fields include:

| Field                                        | Type                | Description                                                                |
| :------------------------------------------- | :------------------ | :------------------------------------------------------------------------- |
| `id`, `ticker`, `slug`, `title`              | `string`            | Basic identification and display data.                                     |
| `startDate`, `endDate`                       | `string<date-time>` | Event timeline.                                                            |
| `active`, `closed`, `featured`, `restricted` | `boolean`           | Event status indicators.                                                   |
| `liquidity`, `volume`, `openInterest`        | `number`            | Market financial metrics.                                                  |
| `markets`                                    | `object[]`          | Nested array containing detailed market objects associated with the event. |
| `series`                                     | `object[]`          | Nested array containing series information the event belongs to.           |
| `categories`, `tags`                         | `object[]`          | Categorization and tagging data.                                           |
| `volume24hr`, `volume1wk`, etc.              | `number`            | Volume data across different timeframes.                                   |

#### Nested Market Object Fields

Each `market` within an event includes details such as: `question`, `conditionId`, `endDate`, `marketType`, `volumeNum`, `liquidityNum`, pricing information (`lastTradePrice`, `bestBid`, `bestAsk`), and various status flags.

### Example Output

```json
[
    {
        "id": 57116,
        "ticker": "nhl-metropolitan-division-winner",
        "slug": "nhl-metropolitan-division-winner-831",
        "title": "NHL: Metropolitan Division Winner",
        "description": "This market will resolve according to the team that wins the listed division during the 2025-26 NHL regular season.\n\nIf at any point it becomes impossible for a listed team to win its division (e.g., mathematical elimination before season end), the relevant market will resolve immediately to “No.”\n\nIf the 2025-26 NHL season is permanently canceled or has not been completed by June 30, 2026, 11:59 PM ET, this market will resolve to “Other.”",
        "resolutionSource": "",
        "startDate": "2025-10-10T00:34:45.548328Z",
        "creationDate": "2025-10-10T00:34:45.548322Z",
        "endDate": "2026-04-30T00:00:00Z",
        "image": "https://polymarket-upload.s3.us-east-2.amazonaws.com/nhl-metropolitan-division-winner-831-BiOhOAV6ln-4.png",
        "icon": "https://polymarket-upload.s3.us-east-2.amazonaws.com/nhl-metropolitan-division-winner-831-BiOhOAV6ln-4.png",
        "active": true,
        "closed": false,
        "archived": false,
        "new": false,
        "featured": false,
        "restricted": true,
        "liquidity": 9680,
        "openInterest": 0,
        "sortBy": "price",
        "createdAt": "2025-10-09T20:29:37.053812Z",
        "updatedAt": "2025-10-10T05:46:11.123915Z",
        "competitive": 0.8470089994706194,
        "enableOrderBook": true,
        "liquidityClob": 9680,
        "negRisk": true,
        "negRiskMarketID": "0xc1bd6e88f5a19d4d451188f8e9a78952e48db9676aedcba4573b8dd271d79600",
        "commentCount": 0,
        "markets": [
            {
                "id": 629070,
                "question": "Will the Carolina Hurricanes win the Metropolitan Division?",
                "conditionId": "0xa998022efc89d60331ac15e78103dafd765e65eaea433405638c4e293d2b0fa6",
                "slug": "will-the-carolina-hurricanes-win-the-metropolitan-division-123",
                "endDate": "2026-04-30T00:00:00Z",
                "liquidity": 300,
                "startDate": "2025-10-10T00:23:22.977509Z",
                "image": "https://polymarket-upload.s3.us-east-2.amazonaws.com/nhl-metropolitan-division-winner-831-BiOhOAV6ln-4.png",
                "icon": "https://polymarket-upload.s3.us-east-2.amazonaws.com/nhl-metropolitan-division-winner-831-BiOhOAV6ln-4.png",
                "description": "This market will resolve according to the team that wins the listed division during the 2025-26 NHL regular season.\n\nIf at any point it becomes impossible for a listed team to win its division (e.g., mathematical elimination before season end), the relevant market will resolve immediately to “No.”\n\nIf the 2025-26 NHL season is permanently canceled or has not been completed by June 30, 2026, 11:59 PM ET, this market will resolve to “Other.”",
                "outcomes": ["Yes", "No"],
                "outcomePrices": ["0.35", "0.65"],
                "active": true,
                "closed": false,
                "marketMakerAddress": "",
                "createdAt": "2025-10-09T20:29:37.904431Z",
                "updatedAt": "2025-10-10T05:42:19.24627Z",
                "new": false,
                "featured": false,
                "submitted_by": "0x91430CaD2d3975766499717fA0D66A78D814E5c5",
                "archived": false,
                "resolvedBy": "0x2F5e3684cb1F318ec51b00Edba38d79Ac2c0aA9d",
                "restricted": true,
                "groupItemTitle": "Carolina Hurricanes",
                "groupItemThreshold": 0,
                "questionID": "0xc1bd6e88f5a19d4d451188f8e9a78952e48db9676aedcba4573b8dd271d79600",
                "enableOrderBook": true,
                "orderPriceMinTickSize": 0.01,
                "orderMinSize": 5,
                "liquidityNum": 300,
                "endDateIso": "2026-04-30",
                "startDateIso": "2025-10-10",
                "hasReviewedDates": true,
                "clobTokenIds": [
                    "63645197726705524606059371558162512012201160965301656466640547461234264539392",
                    "5617477483144744882677399661863606310473044785725076606563294855884593377840"
                ],
                "umaBond": 500,
                "umaReward": 5,
                "liquidityClob": 300,
                "customLiveness": 0,
                "acceptingOrders": true,
                "negRisk": true,
                "negRiskMarketID": "0xc1bd6e88f5a19d4d451188f8e9a78952e48db9676aedcba4573b8dd271d79600",
                "negRiskRequestID": "0x9b2ab6a19ab61ed010aa5fe60f474283affc335829f807d6b5e5901f7de69661",
                "ready": false,
                "funded": false,
                "acceptingOrdersTimestamp": "2025-10-10T00:23:01Z",
                "cyom": false,
                "competitive": 0.293398533007335,
                "pagerDutyNotificationEnabled": false,
                "approved": true,
                "rewardsMinSize": 0,
                "rewardsMaxSpread": 0,
                "spread": 0.7,
                "bestAsk": 0.7,
                "automaticallyActive": true,
                "clearBookOnStart": true,
                "showGmpSeries": false,
                "showGmpOutcome": false,
                "manualActivation": false,
                "negRiskOther": false,
                "umaResolutionStatuses": [],
                "pendingDeployment": false,
                "deploying": false,
                "deployingTimestamp": "2025-10-10T00:11:25.336806Z",
                "rfqEnabled": false,
                "holdingRewardsEnabled": false,
                "feesEnabled": false
            }
        ],
        "tags": [
            {
                "id": 1,
                "label": "Sports",
                "slug": "sports",
                "forceShow": false,
                "publishedAt": "2023-10-24T22:37:50.296Z",
                "updatedBy": 15,
                "createdAt": "2023-10-24T22:37:50.31Z",
                "updatedAt": "2024-07-05T21:07:21.800664Z",
                "forceHide": true
            },
            {
                "id": 899,
                "label": "NHL",
                "slug": "nhl",
                "forceShow": false,
                "publishedAt": "2024-01-22T17:16:28.432Z",
                "createdAt": "2024-01-22T17:16:28.449Z",
                "updatedAt": "2024-05-30T22:36:11.118646Z"
            },
            {
                "id": 100088,
                "label": "Hockey",
                "slug": "hockey",
                "cyom": false,
                "showAllOutcomes": true,
                "showMarketImages": false,
                "enableNegRisk": true,
                "automaticallyActive": true,
                "gmpChartMode": "default",
                "negRiskAugmented": true,
                "pendingDeployment": false,
                "deploying": false,
                "deployingTimestamp": "2025-10-10T00:08:05.814235Z"
            }
        ]
    },
    ...
]
```

]]>
</file>
<file path=".dev/docs/manual-poly-rtds.md">
<![CDATA[
# Real-Time Data Client

Client wrapper for `real-time-data-streaming` **WebSocket**.

## Quickstart

```ts
import { RealTimeDataClient } from "../src/client";
import { Message } from "../src/model";

const onMessage = (m: Message) => console.log(m.topic, m.type, m.payload);

const onConnect = (client: RealTimeDataClient) => {
  client.subscribe({
    subscriptions: [
      {
        topic: "comments",
        type: "*", // all types for topic
        filters: `{"parentEntityID":100,"parentEntityType":"Event"}`, // empty = no filter
      },
    ],
  });
};

new RealTimeDataClient({ onMessage, onConnect }).connect();
```

## Subscriptions

> After connection, use the same `client: RealTimeDataClient`.

### Subscribe

```ts
// activity.trades
client.subscribe({ subscriptions: [{ topic: "activity", type: "trades" }] });

// all comment types
client.subscribe({ subscriptions: [{ topic: "comments", type: "*" }] });
```

### Unsubscribe

> Unsubscribe from `activity.trades` (if `*` was used earlier, this removes only `trades`).

```ts
client.unsubscribe?.({ // if supported; same shape as subscribe
  subscriptions: [{ topic: "activity", type: "trades" }],
});

// If the client uses subscribe-with-action pattern:
client.subscribe({
  subscriptions: [{ topic: "activity", type: "trades" }],
  action: "unsubscribe",
});
```

### Disconnect

```ts
client.disconnect();
```

## Message Matrix

| Topic                     | Type               | Auth     | Filters (empty = none)                                          | Schema                              | Subscription Handler                          |
| ------------------------- | ------------------ | -------- | --------------------------------------------------------------- | ----------------------------------- | --------------------------------------------- |
| `activity`                | `trades`           | -        | `{"event_slug":"string"}` **OR** `{"market_slug":"string"}`     | [`Trade`](#trade)                   |                                               |
| `activity`                | `orders_matched`   | -        | `{"event_slug":"string"}` **OR** `{"market_slug":"string"}`     | [`Trade`](#trade)                   |                                               |
| `comments`                | `comment_created`  | -        | `{"parentEntityID":number,"parentEntityType":"Event / Series"}` | [`Comment`](#comment)               |                                               |
| `comments`                | `comment_removed`  | -        | same as above                                                   | [`Comment`](#comment)               |                                               |
| `comments`                | `reaction_created` | -        | same as above                                                   | [`Reaction`](#reaction)             |                                               |
| `comments`                | `reaction_removed` | -        | same as above                                                   | [`Reaction`](#reaction)             |                                               |
| `rfq`                     | `request_created`  | -        | -                                                               | [`Request`](#request)               |                                               |
| `rfq`                     | `request_edited`   | -        | -                                                               | [`Request`](#request)               |                                               |
| `rfq`                     | `request_canceled` | -        | -                                                               | [`Request`](#request)               |                                               |
| `rfq`                     | `request_expired`  | -        | -                                                               | [`Request`](#request)               |                                               |
| `rfq`                     | `quote_created`    | -        | -                                                               | [`Quote`](#quote)                   |                                               |
| `rfq`                     | `quote_edited`     | -        | -                                                               | [`Quote`](#quote)                   |                                               |
| `rfq`                     | `quote_canceled`   | -        | -                                                               | [`Quote`](#quote)                   |                                               |
| `rfq`                     | `quote_expired`    | -        | -                                                               | [`Quote`](#quote)                   |                                               |
| `crypto_prices`           | `update`           | -        | `{"symbol":string}`                                             | [`CryptoPrice`](#cryptoprice)       | [`CryptoPriceHistorical`](#initial-data-dump) |
| `crypto_prices_chainlink` | `update`           | -        | `{"symbol":string}`                                             | [`CryptoPrice`](#cryptoprice)       | [`CryptoPriceHistorical`](#initial-data-dump) |
| `clob_user`               | `order`            | ClobAuth | -                                                               | [`Order`](#order)                   |                                               |
| `clob_user`               | `trade`            | ClobAuth | -                                                               | [`Trade (CLOB User)`](#trade-1)     |                                               |
| `clob_market`             | `price_change`     | -        | `["100","200",...]` **(mandatory)**                             | [`PriceChanges`](#pricechanges)     |                                               |
| `clob_market`             | `agg_orderbook`    | -        | `["100","200",...]`                                             | [`AggOrderbook`](#aggorderbook)     | [`AggOrderbook`](#aggorderbook)               |
| `clob_market`             | `last_trade_price` | -        | `["100","200",...]`                                             | [`LastTradePrice`](#lasttradeprice) |                                               |
| `clob_market`             | `tick_size_change` | -        | `["100","200",...]`                                             | [`TickSizeChange`](#ticksizechange) |                                               |
| `clob_market`             | `market_created`   | -        | -                                                               | [`ClobMarket`](#clobmarket)         |                                               |
| `clob_market`             | `market_resolved`  | -        | -                                                               | [`ClobMarket`](#clobmarket)         |                                               |

## Auth

### ClobAuth

```ts
export interface ClobApiKeyCreds {
  key: string;        // API key
  secret: string;     // API secret
  passphrase: string; // Passphrase
}
```

```ts
client.subscribe({
  subscriptions: [
    {
      topic: "clob_user",
      type: "*",
      clob_auth: {
        key: "xxxxxx-xxxx-xxxxx-xxxx-xxxxxx",
        secret: "xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx",
        passphrase: "xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx",
      },
    },
  ],
});
```

## Schemas

### Activity

#### Trade

| Name              | Type    | Description                   |
| ----------------- | ------- | ----------------------------- |
| `asset`           | string  | ERC1155 token ID traded       |
| `bio`             | string  | Trader’s bio                  |
| `conditionId`     | string  | Market/CTF condition ID       |
| `eventSlug`       | string  | Event slug                    |
| `icon`            | string  | Market icon URL               |
| `name`            | string  | Trader’s name                 |
| `outcome`         | string  | Human-readable market outcome |
| `outcomeIndex`    | integer | Outcome index                 |
| `price`           | float   | Trade price                   |
| `profileImage`    | string  | Trader profile image URL      |
| `proxyWallet`     | string  | Trader proxy wallet           |
| `pseudonym`       | string  | Trader pseudonym              |
| `side`            | string  | `BUY` / `SELL`                |
| `size`            | integer | Trade size                    |
| `slug`            | string  | Market slug                   |
| `timestamp`       | integer | Trade timestamp               |
| `title`           | string  | Event title                   |
| `transactionHash` | string  | Tx hash                       |

### Comments

#### Comment

| Name               | Type   | Description         |
| ------------------ | ------ | ------------------- |
| `id`               | string | Comment ID          |
| `body`             | string | Content             |
| `parentEntityType` | string | `Event` or `Series` |
| `parentEntityID`   | number | Parent ID           |
| `parentCommentID`  | string | Parent comment ID   |
| `userAddress`      | string | User address        |
| `replyAddress`     | string | Reply user address  |
| `createdAt`        | string | Created timestamp   |
| `updatedAt`        | string | Updated timestamp   |

#### Reaction

| Name           | Type   | Description       |
| -------------- | ------ | ----------------- |
| `id`           | string | Reaction ID       |
| `commentID`    | number | Comment ID        |
| `reactionType` | string | Reaction type     |
| `icon`         | string | Reaction icon     |
| `userAddress`  | string | User address      |
| `createdAt`    | string | Created timestamp |

### RFQ

#### Request

| Name           | Type   | Description                 |
| -------------- | ------ | --------------------------- |
| `requestId`    | string | Request ID                  |
| `proxyAddress` | string | User proxy                  |
| `market`       | string | Market/CTF condition ID     |
| `token`        | string | ERC1155 token ID            |
| `complement`   | string | Complement ERC1155 token ID |
| `state`        | string | Current state               |
| `side`         | string | Buy/Sell                    |
| `sizeIn`       | number | Input size                  |
| `sizeOut`      | number | Output size                 |
| `price`        | number | Implied price               |
| `expiry`       | number | UNIX expiry                 |

#### Quote

| Name           | Type   | Description                 |
| -------------- | ------ | --------------------------- |
| `quoteId`      | string | Quote ID                    |
| `requestId`    | string | Linked request ID           |
| `proxyAddress` | string | User proxy                  |
| `token`        | string | ERC1155 token ID            |
| `state`        | string | Current state               |
| `side`         | string | Buy/Sell                    |
| `sizeIn`       | number | Input size                  |
| `sizeOut`      | number | Output size                 |
| `condition`    | string | Market/CTF condition ID     |
| `complement`   | string | Complement ERC1155 token ID |
| `expiry`       | number | UNIX expiry                 |

### CryptoPrice

| Name        | Type   | Description    |
| ----------- | ------ | -------------- |
| `symbol`    | string | Asset symbol   |
| `timestamp` | number | ms since epoch |
| `value`     | number | Price value    |

**Filters:** `{"symbol":"btcusdt"}`, `{"symbol":"ethusdt"}`, `{"symbol":"xrpusdt"}`, `{"symbol":"solusdt"}`

#### Initial data dump

On connection with a filter, server sends a snapshot:

* `symbol: string`
* `data: Array<{ timestamp: number; value: number }>`
  (See also: used by `crypto_prices` and `crypto_prices_chainlink`.)

### CLOB User

#### Order

| Name            | Type               | Description                           |
| --------------- | ------------------ | ------------------------------------- |
| `asset_id`      | string             | ERC1155 token ID                      |
| `created_at`    | string (timestamp) | UNIX creation                         |
| `expiration`    | string (timestamp) | UNIX expiration                       |
| `id`            | string             | Order hash                            |
| `maker_address` | string             | Funder address                        |
| `market`        | string             | Condition/market ID                   |
| `order_type`    | string             | `GTC` `GTD` `FOK` `FAK`               |
| `original_size` | string             | Size at placement                     |
| `outcome`       | string             | `YES` / `NO`                          |
| `owner`         | string             | Owner UUID                            |
| `price`         | string             | Decimal price                         |
| `side`          | string             | `BUY` / `SELL`                        |
| `size_matched`  | string             | Matched amount                        |
| `status`        | string             | e.g., `MATCHED`                       |
| `type`          | string             | `PLACEMENT` `CANCELLATION` `FILL` ... |

#### Trade (CLOB User)

| Name               | Type               | Description             |
| ------------------ | ------------------ | ----------------------- |
| `asset_id`         | string             | ERC1155 token ID        |
| `fee_rate_bps`     | string             | Fee rate (bps)          |
| `id`               | string             | Match ID                |
| `last_update`      | string (timestamp) | UNIX last update        |
| `maker_address`    | string             | Maker address           |
| `maker_orders`     | array              | See below               |
| `market`           | string             | Condition/market ID     |
| `match_time`       | string (timestamp) | UNIX execution          |
| `outcome`          | string             | `YES` / `NO`            |
| `owner`            | string             | Taker UUID              |
| `price`            | string             | Decimal price           |
| `side`             | string             | Taker side `BUY`/`SELL` |
| `size`             | string             | Total matched size      |
| `status`           | string             | e.g., `MINED`           |
| `taker_order_id`   | string             | Taker order ID          |
| `transaction_hash` | string             | Settlement tx           |

**`maker_orders` (array items)**

| Name             | Type   | Description    |
| ---------------- | ------ | -------------- |
| `asset_id`       | string | Maker token ID |
| `fee_rate_bps`   | string | Maker fee bps  |
| `maker_address`  | string | Maker address  |
| `matched_amount` | string | Amount matched |
| `order_id`       | string | Maker order ID |
| `outcome`        | string | `YES` / `NO`   |
| `owner`          | string | Maker UUID     |
| `price`          | string | Order price    |
| `side`           | string | `BUY` / `SELL` |

### CLOB Market

#### PriceChanges

| Name | Type               | Description           |
| ---- | ------------------ | --------------------- |
| `m`  | string             | Condition ID          |
| `pc` | array              | Price changes by book |
| `t`  | string (timestamp) | ms since epoch        |

**PriceChange (elements of `pc`)**

| Name | Type   | Description         |
| ---- | ------ | ------------------- |
| `a`  | string | `asset_id`          |
| `h`  | string | book snapshot hash  |
| `p`  | string | price (e.g., `0.5`) |
| `s`  | string | side `BUY`/`SELL`   |
| `si` | string | size at price       |
| `ba` | string | best ask            |
| `bb` | string | best bid            |

> **Filters required:** `["100","200",...]` (asset IDs).

#### AggOrderbook

| Name             | Type               | Description                    |
| ---------------- | ------------------ | ------------------------------ |
| `asks`           | array              | Aggregated asks `{price,size}` |
| `asset_id`       | string             | Asset ID                       |
| `bids`           | array              | Aggregated bids `{price,size}` |
| `hash`           | string             | Snapshot hash                  |
| `market`         | string             | Condition ID                   |
| `min_order_size` | string             | Min order size                 |
| `neg_risk`       | boolean            | NegRisk flag                   |
| `tick_size`      | string             | Min price increment            |
| `timestamp`      | string (timestamp) | ms since epoch                 |

**`asks`/`bids` item**
| `price`: string | `size`: string |

**Initial data dump:** on connection when filters used.

#### LastTradePrice

| Name           | Type   | Description    |
| -------------- | ------ | -------------- |
| `asset_id`     | string | Asset ID       |
| `fee_rate_bps` | string | Fee bps        |
| `market`       | string | Condition ID   |
| `price`        | string | Trade price    |
| `side`         | string | `BUY` / `SELL` |
| `size`         | string | Trade size     |

#### TickSizeChange

| Name            | Type   | Description              |
| --------------- | ------ | ------------------------ |
| `market`        | string | Condition ID             |
| `asset_id`      | string | Array of two ERC1155 IDs |
| `old_tick_size` | string | Previous tick            |
| `new_tick_size` | string | Updated tick             |

#### ClobMarket

| Name             | Type      | Description           |
| ---------------- | --------- | --------------------- |
| `market`         | string    | Condition ID          |
| `asset_ids`      | [2]string | Two ERC1155 asset IDs |
| `min_order_size` | string    | Min order size        |
| `tick_size`      | string    | Min price increment   |
| `neg_risk`       | boolean   | Negative risk         |

]]>
</file>
<file path=".dev/docs/manual-rate-limits.md">
<![CDATA[
POLYMARKET RATE LIMITS

API Rate Limits
​
How Rate Limiting Works
All rate limits are enforced using Cloudflare’s throttling system. When you exceed the maximum configured rate for any endpoint, requests are throttled rather than immediately rejected. This means:
Throttling: Requests over the limit are delayed/queued rather than dropped
Burst Allowances: Some endpoints allow short bursts above the sustained rate
Time Windows: Limits reset based on sliding time windows (e.g., per 10 seconds, per minute)
​
General Rate Limits
Endpoint	Limit	Notes
General Rate Limiting	5000 requests / 10s	Throttle requests over the maximum configured rate
”OK” Endpoint	50 requests / 10s	Throttle requests over the maximum configured rate
​
Data API Rate Limits
Endpoint	Limit	Notes
Data API (General)	100 requests / 10s	Throttle requests over the maximum configured rate
Data API (Alternative)	600 requests / 1 minute	1 hour block on violation
Data API /trades	30 requests / 10s	Throttle requests over the maximum configured rate
Data API “OK” Endpoint	10 requests / 10s	Throttle requests over the maximum configured rate
​
GAMMA API Rate Limits
Endpoint	Limit	Notes
GAMMA (General)	750 requests / 10s	Throttle requests over the maximum configured rate
GAMMA Get Comments	100 requests / 10s	Throttle requests over the maximum configured rate
GAMMA /events	100 requests / 10s	Throttle requests over the maximum configured rate
GAMMA /markets	100 requests / 10s	Throttle requests over the maximum configured rate
GAMMA /markets /events listing	100 requests / 10s	Throttle requests over the maximum configured rate
GAMMA Tags	100 requests / 10s	Throttle requests over the maximum configured rate
GAMMA Search	300 requests / 10s	Throttle requests over the maximum configured rate
​
CLOB API Rate Limits
​
General CLOB Endpoints
Endpoint	Limit	Notes
CLOB (General)	5000 requests / 10s	Throttle requests over the maximum configured rate
CLOB GET Balance Allowance	125 requests / 10s	Throttle requests over the maximum configured rate
CLOB UPDATE Balance Allowance	20 requests / 10s	Throttle requests over the maximum configured rate
​
CLOB Market Data
Endpoint	Limit	Notes
CLOB /book	200 requests / 10s	Throttle requests over the maximum configured rate
CLOB /books (website)	300 requests / 10s	Throttle requests over the maximum configured rate
CLOB /books	80 requests / 10s	Throttle requests over the maximum configured rate
CLOB /price	200 requests / 10s	Throttle requests over the maximum configured rate
CLOB /prices	80 requests / 10s	Throttle requests over the maximum configured rate
CLOB /midprice	200 requests / 10s	Throttle requests over the maximum configured rate
CLOB /midprices	80 requests / 10s	Throttle requests over the maximum configured rate
​
CLOB Ledger Endpoints
Endpoint	Limit	Notes
CLOB Ledger (/trades /orders /notifications /order)	300 requests / 10s	Throttle requests over the maximum configured rate
CLOB Ledger /data/orders	150 requests / 10s	Throttle requests over the maximum configured rate
CLOB Ledger /data/trades	150 requests / 10s	Throttle requests over the maximum configured rate
CLOB /notifications	125 requests / 10s	Throttle requests over the maximum configured rate
​
CLOB Markets & Pricing
Endpoint	Limit	Notes
CLOB Price History	100 requests / 10s	Throttle requests over the maximum configured rate
CLOB Markets	250 requests / 10s	Throttle requests over the maximum configured rate
CLOB Market Tick Size	50 requests / 10s	Throttle requests over the maximum configured rate
CLOB markets/0x	50 requests / 10s	Throttle requests over the maximum configured rate
CLOB /markets listing	100 requests / 10s	Throttle requests over the maximum configured rate
​
CLOB Authentication
Endpoint	Limit	Notes
CLOB API Keys	50 requests / 10s	Throttle requests over the maximum configured rate
​
CLOB Trading Endpoints
Endpoint	Limit	Notes
CLOB POST /order	2400 requests / 10s (240/s)	BURST - Throttle requests over the maximum configured rate
CLOB POST /order	24000 requests / 10 minutes (40/s)	Throttle requests over the maximum configured rate
CLOB POST /order (by token id)	800 requests / 10s (80/s)	BURST - Throttle requests over the maximum configured rate
CLOB POST /order (by token id)	12000 requests / 10 minutes (20/s)	Throttle requests over the maximum configured rate
CLOB DELETE /order	2400 requests / 10s (240/s)	BURST - Throttle requests over the maximum configured rate
CLOB DELETE /order	24000 requests / 10 minutes (40/s)	Throttle requests over the maximum configured rate
CLOB POST /orders	800 requests / 10s (80/s)	BURST - Throttle requests over the maximum configured rate
CLOB POST /orders	12000 requests / 10 minutes (20/s)	Throttle requests over the maximum configured rate
CLOB DELETE /orders	800 requests / 10s (80/s)	BURST - Throttle requests over the maximum configured rate
CLOB DELETE /orders	12000 requests / 10 minutes (20/s)	Throttle requests over the maximum configured rate
CLOB DELETE /cancel-all	200 requests / 10s (20/s)	BURST - Throttle requests over the maximum configured rate
CLOB DELETE /cancel-all	3000 requests / 10 minutes (5/s)	Throttle requests over the maximum configured rate
CLOB DELETE /cancel-market-orders	800 requests / 10s (80/s)	BURST - Throttle requests over the maximum configured rate
CLOB DELETE /cancel-market-orders	12000 requests / 10 minutes (20/s)	Throttle requests over the maximum configured rate
​
Other API Rate Limits
Endpoint	Limit	Notes
RELAYER /submit	15 requests / 1 minute	Throttle requests over the maximum configured rate
User PNL API	100 requests / 10s	Throttle requests over the maximum configured rate
Glossary

]]>
</file>
<file path=".dev/md/plans/2025/10/07/13-09-13_discord-bot-slash-commands.md">
<![CDATA[
## Plan: Discord Bot with Slash Commands (+Autocomplete) for Status, Logs, Portfolio, Positions, Position, Close, Close-All

## Proposed Plan

### ❌ Critical Information Needed

- Do you prefer commands registered as guild-only during development (`DISCORD_GUILD_ID`) or global? Guild scope updates instantly; global can take up to 1 hour to propagate. If not provided, we will use guild scope by default for faster DX.
- Do you already have a Discord Application and Bot set up with the correct OAuth2 scopes? Required: `bot` and `applications.commands`. If not, we will include setup steps.

### ⚠️ Initial Best Assumptions to Address Ambiguities

1. MODERATE: Command scope -> We will register commands to a single guild (via `DISCORD_GUILD_ID`) for immediate availability; we can add a `--global` flag later. Rationale: Faster iteration and safer testing.
2. MODERATE: Bot runtime -> We will run the bot in the same process as the app, started from `main-loop`, non-blocking. Rationale: Simpler deployment and resource sharing.
4. MODERATE: Autocomplete dataset size -> Position counts are small enough to compute suggestions on-demand via DB queries within Discord’s 3s initial response limit.
The Discord Bot is in COMPLETELY PRIVATE server where only owner has access. No need to implement allowlisting.

### ☁️ Current State

1. Node.js ≥20, TypeScript strict, pnpm. See `package.json`.
2. App runs as a long-lived process: entrypoint `src/index.ts` calls `run()` in `src/core/app/main-loop.ts`.
3. DB: PostgreSQL via Drizzle; key tables `position`, `copy_order`, `leader_trade`, etc. Helpers in `src/utils/external-helpers.ts` expose portfolio summary and formatting.
4. Event bus emits lifecycle and trading events (`src/core/domain/event.ts`). Discord notifications currently via webhook only (`src/notify/discord-webhook.ts`).
5. RTDS stream in `src/core/data-ingestion/polymarket-rtds.ts` exposes `lastRtdsMessageTimeMs` for connectivity telemetry.
6. No Discord Bot runtime yet (`src/rpc/discord-bot.ts` is empty).

### 🌟 Desired Goal State

1. A Discord Bot connected via Gateway with slash commands visible in the configured guild.
2. Slash commands:
   - `/status`: RTDS/WS connectivity, open positions count, current unrealized PnL, lifetime realized PnL.
   - `/logs [n]`: Return last N lines of humanized logs.
   - `/portfolio`: Portfolio summary (reuse existing formatting).
   - `/positions`: Table of current open positions with columns: ID, UPNL.
   - `/position [id]`: Detailed position view with extra fields (tokenId, Entry Price (Avg), Current Price, Unrealized PnL).
   - `/close [id]`: Force close a specific position by ID.
   - `/close-all`: Force close all running positions.
3. Autocomplete for commands needing IDs (e.g., `/position` and `/close`), suggesting open position IDs.
4. All responses ephemeral by default (for private UX), with emojis and clear formatting.
5. DRY, typed, and non-intrusive to the main trading flow (sub-50ms overhead preserved for critical paths).

Traceability: Each bullet maps to the user requirements list (status/logs/portfolio/positions/position/close/close-all, with autocomplete and emojis).

### 🛣️ Brainstorm Implementation Approaches

- Approach 1: Gateway bot using `discord.js` v14
  - Pros: No public HTTP ingress needed; interactions and autocompletes handled via Gateway. Rich typing and utilities.
  - Cons: Adds a runtime dependency and a background connection.
- Approach 2: HTTP-only Interactions (Outgoing Webhook)
  - Pros: No Gateway connection.
  - Cons: Requires public HTTPS endpoint and signature verification; more infra.
- Approach 3: Hybrid (Gateway for commands, Webhook for followups)
  - Pros: Flexibility.
  - Cons: Unnecessary complexity for this private, single-user bot.

Chosen Approach: 1 (Gateway + discord.js)
- Reasons: No server needed; straightforward slash command + autocomplete handling; quick iteration in a private project.

Rollback Strategy
- The bot starts only if `DISCORD_BOT_TOKEN` is present. No token → no bot runtime. Command registration is an explicit script; revert by deleting commands and removing token.

### 🗺️ Very Detailed Plan

1) Dependencies and Env
- Add deps: `discord.js`, `@discordjs/rest`, `discord-api-types`.
- Add env vars to `.env.*`:
  - `DISCORD_BOT_TOKEN`: Bot token
  - `DISCORD_APP_ID`: Application (client) ID
  - `DISCORD_GUILD_ID`: Guild ID (dev scope)

2) Command Definitions (single source of truth)
- Create `src/rpc/discord/commands.ts` exporting a typed array of command definitions and helpers for registration + runtime handling.
- Commands list:
  - `status` (no options)
  - `logs` options: integer `n` (1–500, default 100)
  - `portfolio` (no options)
  - `positions` (no options)
  - `position` options: integer `id` (required, with autocomplete)
  - `close` options: integer `id` (required, with autocomplete, guarded)
  - `close-all` (no options, guarded)

3) Registration Script
- Add `scripts/register-discord-commands.ts` using `@discordjs/rest` to upsert commands to the configured guild.
- CLI script in `package.json`: `pnpm discord:register:guild` (and optional `discord:register:global`).
- Reference: Application Commands API [Discord Application Commands](https://discord.com/developers/docs/interactions/application-commands).

4) Bot Runtime
- Implement `startDiscordBot(params)` in `src/rpc/discord-bot.ts`:
  - Construct a `Client` with `GatewayIntentBits.Guilds` only.
  - On `ready`, log success.
  - Handle `interactionCreate`:
    - If `isChatInputCommand()` → route by command name.
    - If `isAutocomplete()` → return suggestions for `position`/`close`.
  - Ephemeral initial responses (defer reply within 3s if needed). Reference: 3s initial response rule and ephemeral flags [Receiving and Responding](https://discord.com/developers/docs/interactions/receiving-and-responding).

5) Data Access & DRY helpers
- Reuse existing helpers from `src/utils/external-helpers.ts`:
  - `getPortfolioSummary(mode)` to compute Unrealized/Realized PnL and last-closed items.
  - `buildClosedPositionsSummaryMessage()` for `/portfolio` rendering.
- Logs: use `getLogTailSnapshot()` from `src/utils/logger.ts`; trim to last `n` lines (server-side split) and wrap in a code block.
- Status: compute RTDS status by checking `lastRtdsMessageTimeMs` staleness (e.g., idle > 60s = disconnected). Use DB counts for open positions and reuse `getPortfolioSummary` for PnL.
- Positions: query open positions, compute UPNL from `unrealizedPnlUsd`, and render a compact table (code block). Keep small width; show up to 100 rows; paginate later if needed.
- Position detail: join via `loadMetaForPosition(id)`; include tokenId, entry price avg, current price, unrealized PnL, leader and event link; add emojis.

6) Guarded Mutations
- Thread-safety: use the existing `IExecutionProvider` instance from `main-loop` by injecting it into `startDiscordBot`. Close operations call `executionProvider.closePosition({ positionId, reason: 'MANUAL', source: 'manual', ingestSource: 'manual' })`.
- Non-blocking: acknowledge with an ephemeral reply, then perform close; send follow-up ephemeral result (success/fail). Interaction token validity is 15 minutes—sufficient for follow-ups [Receiving and Responding](https://discord.com/developers/docs/interactions/receiving-and-responding).

7) Wire-up in Main Loop
- In `src/core/app/main-loop.ts`, after provider is ready and notifier/listeners registered, call `startDiscordBot({ executionProvider: provider, env, notifier })`. Ensure failures don’t crash the bot.

8) Metrics & Logging
- Log each command execution with timing and principal (Discord user). Keep logs concise.
- Emit counters via `incrementCounter('discord.command', { name: cmd })`.

9) Emojis & UX
- Use emojis for headings/status: ✅/🟥 for ok/fail, 📊 for stats, 🧮 for PnL, 📜 for logs, 🔧 for actions.
- Ephemeral replies by default to avoid channel noise. Offer a `public` boolean option later if needed.

10) Rate limits + Perf
- Autocomplete queries: limit to 20 suggestions and short labels (`"#123 · UPNL +1.23 USDC"`). Discord overall command content must stay under 8000 chars [Slash command limits](https://discord.com/developers/docs/interactions/application-commands#slash-commands).
- Defer initial replies when DB queries might exceed ~500ms; edit the reply when ready.

### 💻 Specs

Models / Schemas (no DB migrations needed)
- We reuse existing tables. Optionally, add a covering index later if `/positions` proves slow.

Classes
- `DiscordCommandRegistrar`
  - Purpose: Register commands to guild or global.
  - Methods:
    - `registerGuildCommands(appId: string, guildId: string, token: string, defs: RESTPostAPIApplicationCommandsJSONBody[]): Promise<void>`
    - `registerGlobalCommands(appId: string, token: string, defs: RESTPostAPIApplicationCommandsJSONBody[]): Promise<void>`

Functions (typed)
```ts
// src/rpc/discord/commands.ts
export type CommandName = 'status' | 'logs' | 'portfolio' | 'positions' | 'position' | 'close' | 'close-all';

export interface CommandContext {
    mode: import('@/core/domain/execution').ExecutionMode;
    executionProvider: import('@/core/domain/execution').IExecutionProvider;
}

export interface AutocompleteItem { name: string; value: number; }

export function buildSlashCommandDefs(): import('discord-api-types/v10').RESTPostAPIApplicationCommandsJSONBody[];
export function handleCommand(name: CommandName, options: Record<string, unknown>, ctx: CommandContext): Promise<{ content: string; ephemeral?: boolean }>;
export function handleAutocomplete(name: CommandName, focused: string, ctx: CommandContext): Promise<AutocompleteItem[]>;
```

Library Calls (Discord)
```ts
// Client runtime
import { Client, GatewayIntentBits, Partials, Interaction, AutocompleteInteraction, ChatInputCommandInteraction } from 'discord.js';

const client = new Client({ intents: [GatewayIntentBits.Guilds] });
client.on('ready', () => logger.success({ tag: 'discord-bot' }, 'Discord bot ready'));
client.on('interactionCreate', async (interaction: Interaction) => { /* route */ });
await client.login(process.env.DISCORD_BOT_TOKEN!);
```

```ts
// Registration via REST
import { REST, Routes } from 'discord.js';
const rest = new REST({ version: '10' }).setToken(token);
await rest.put(Routes.applicationGuildCommands(appId, guildId), { body: defs });
// For global:
await rest.put(Routes.applicationCommands(appId), { body: defs });
```

API Contracts (Discord)
- Slash commands and interactions per official docs: [Application Commands](https://discord.com/developers/docs/interactions/application-commands), [Receiving & Responding](https://discord.com/developers/docs/interactions/receiving-and-responding), [Autocomplete](https://discord.com/developers/docs/interactions/application-commands#autocomplete).
- Timeouts: initial response within 3s; tokens valid 15m for follow-ups.

Config & Feature Flags
- `DISCORD_BOT_TOKEN` (string, required to start bot). Example: `"Bot x.y.z"` token.
- `DISCORD_APP_ID` (string, required for registration).
- `DISCORD_GUILD_ID` (string, recommended for fast dev updates).

Observability
- Counters: `discord.command` { name }, `discord.autocomplete` { name }, `discord.error` { name }.
- Logs include latency and rows returned for DB-heavy calls.

Security
- Validate `n` for `/logs` (1–500). Validate `id` is numeric and belongs to current `mode` when acting.

Perf
- Autocomplete limited to 20 results; DB queries indexed fields.
- Use deferred replies for long ops.

### 📂 Files Involved

🟦 TO READ AND UNDERSTAND FIRST
- `/home/probi/swe/repo/polymarket-copy-bot/src/core/app/main-loop.ts` — wiring point to start the bot.
- `/home/probi/swe/repo/polymarket-copy-bot/src/utils/logger.ts` — getLogTailSnapshot.
- `/home/probi/swe/repo/polymarket-copy-bot/src/utils/external-helpers.ts` — portfolio summary helpers.
- `/home/probi/swe/repo/polymarket-copy-bot/src/core/data-ingestion/polymarket-rtds.ts` — `lastRtdsMessageTimeMs` for RTDS status.
- `/home/probi/swe/repo/polymarket-copy-bot/src/core/store/schema.ts` — position and related tables.

🟨 MODIFY
- `/home/probi/swe/repo/polymarket-copy-bot/package.json` — add deps and scripts (register commands).
- `/home/probi/swe/repo/polymarket-copy-bot/src/core/app/main-loop.ts` — call `startDiscordBot(...)` after provider ready.
- `/home/probi/swe/repo/polymarket-copy-bot/.env.*` — add new envs.

🟩 CREATE
- `/home/probi/swe/repo/polymarket-copy-bot/src/rpc/discord/commands.ts` — command defs/handlers.
- `/home/probi/swe/repo/polymarket-copy-bot/src/rpc/discord-bot.ts` — gateway client and router.
- `/home/probi/swe/repo/polymarket-copy-bot/scripts/register-discord-commands.ts` — one-off command registrar.

🟥 DELETE
- None.

### 🧭 Optional Visuals

```mermaid
sequenceDiagram
  participant User
  participant Discord
  participant Bot
  participant DB
  User->>Discord: /position id:123
  Discord->>Bot: InteractionCreate (3s window)
  Bot->>Discord: deferReply(ephemeral)
  Bot->>DB: select position + meta + current price
  DB-->>Bot: rows
  Bot->>Discord: editReply(details)
```

### 🌐 Helpful Tool Results (as tool’s session_id)
- Discord docs fetch: `smart_fetch_url_multiple/we_need_authoritative_details_for_discord_slash_commands_responses_and_autocomplete_to_write_an_accurate_plan_with_citations/z8ykatabeo`

### 📚 References
- Discord Application Commands (Slash Commands): https://discord.com/developers/docs/interactions/application-commands
- Receiving and Responding to Interactions (timeouts, ephemeral, followups): https://discord.com/developers/docs/interactions/receiving-and-responding
- Autocomplete: https://discord.com/developers/docs/interactions/application-commands#autocomplete

Why these: Official Discord developer docs ensure correct, current contracts and limits.

### ▶️ Plan Summary

1. Add `discord.js` + REST deps and env vars; register commands to guild.
2. Implement typed command defs, autocomplete, and handlers (DRY helpers reused).
3. Wire `startDiscordBot` into `main-loop` with injected `executionProvider` and `mode` context.
4. Implement guarded `/close` and `/close-all`; make replies ephemeral with emojis and tables.
5. Log/metrics for observability; keep all operations non-blocking and within 3s initial response.

### 🔴 IMPORTANT REMINDERS
- Initial reply within 3 seconds; use deferral if needed.
- Keep autocomplete to ≤20 items and concise labels.
- Protect close commands via user allowlist; default deny if not configured.
- Don’t block execution critical paths; bot runs independently and uses short DB queries.

]]>
</file>
<file path=".dev/md/plans/2025/10/07/do not change.md">
<![CDATA[
<|PLAN_FORMAT_START|>
# Plan: Discord Bot with Slash Commands, Autocomplete, and Portfolio Controls

## 👤 User's Original Message
Original User Message:
```txt
/PLAN_X 

- [ ]  Add Discord Bot (Important: Include emojis for UI and UX | Ensure you use the Discord Slash Commands API that has autocompletes for UX - not manual slash commands | Ensure DRY in code)
    - [ ]  /status - Returns bot states such as essential statuses like RTDS status (is connected/disconnected), WS statuses, Num Current Open Positions, Current Unrealized PnL, Lifetime Realized PnL
    - [ ]  /logs [n] - Returns last n lines of human logs
    - [ ]  /portfolio - Same as portfolio summary
    - [ ]  /positions - Returns all current running positions, table formatted
        - [ ]  Cols: ID, UPNL
    - [ ]  /position [id] - Returns position details. Format is same as Position Opened from Discord Webhook, but include token id/asset id below Market Link, and include Entry Price (Avg) below Entry Price, and include Current Price below Entry Price (Avg), and include Unrealized PNL below Current Price
    - [ ]  /close [id] - Force close pos by id
    - [ ]  /close-all - Force close all running pos
```

## Proposed Plan

### ❌ Critical Information Needed
None blocking. We can safely proceed with guild-scoped commands first to avoid global propagation delays.

### ⚠️ Initial Best Assumptions to Address Ambiguities
1. MODERATE: Discord bot token and application (client) ID will be provided via env. -> We'll add validated env vars and guard startup.
2. MODERATE: Commands will be registered per-guild in `local/test` envs and optionally globally for production. -> Provide scripts for both.
3. MODERATE: Max log lines `n` default to 50 if omitted; cap to 500 for safety. -> Prevent spam and meet UX.

### ☁️ Current State
1. TypeScript Node service with strict typing; pnpm; dotenvx; Drizzle PostgreSQL; main entry `src/index.ts` -> `run()` in `src/core/app/main-loop.ts`.
2. Discord Webhook notifications already exist in `src/notify/discord-webhook.ts` and listeners in `src/notify/listeners.ts`.
3. Utilities available:
   - `getLogTailSnapshot()` in `src/utils/logger.ts` for logs
   - Portfolio helpers in `src/utils/external-helpers.ts`: `getPortfolioSummary`, `buildClosedPositionsSummaryMessage`, `loadMetaForPosition`
4. Placeholder file `src/rpc/discord-bot.ts` (empty) ready for bot implementation.

### 🌟 Desired Goal State
1. Slash-command Discord bot running inside the same process as the main app (optional toggle), exposing:
   - `/status`, `/logs`, `/portfolio`, `/positions`, `/position`, `/close`, `/close-all`
2. Autocomplete UX for `/position` (id argument) and for `/logs n` numeric helper.
3. Responses use embeds, emojis, ephemeral responses where appropriate, and follow DRY helpers.
4. Commands registered per-guild in dev; script available for global production registration.

### 🛣️ Brainstorm Implementation Approaches
* Approach 1: Use discord.js v14 Client + REST registerer in-process.
  - Pros: Mature, typed, great docs; easy Autocomplete; resilient.
  - Cons: Adds dependency; needs gateway connection.
* Approach 2: Raw Discord REST/websocket implementation.
  - Pros: Minimal deps.
  - Cons: Reinventing client; higher maintenance.
* Approach 3: Separate microservice.
  - Pros: Isolation.
  - Cons: Extra infra, complexity.

Chosen Approach: 1 — discord.js v14 in-process for fastest delivery, rich features, and typings.

Rollback: Feature flag to disable the Discord bot without code removal; no DB migrations.

### 🗺️ Very Detailed Plan
1. Dependencies and env
   - Add `discord.js` and `@discordjs/rest`, `discord-api-types` to deps.
   - Env vars (validated in `src/core/config/env.ts`):
     - `DISCORD_BOT_TOKEN` (string, required when ENABLE_DISCORD_BOT=true)
     - `DISCORD_APP_ID` (string)
     - `DISCORD_GUILD_IDS` (comma-separated list for dev registration)
     - `ENABLE_DISCORD_BOT` (boolean; default false)
   - Rationale: Required to login a gateway client and register commands.

2. Command registration script (non-interactive CLI)
   - Create `scripts/discord-register-commands.ts`:
     - Reads commands built in `src/rpc/discord-bot.ts` (export JSON defs)
     - Uses REST `PUT` routes for guild(s) during local; global for production
     - Per docs: Register via HTTP; upsert behavior [Application Commands](https://discord.com/developers/docs/interactions/application-commands#registering-a-command). Limit: 25 options per command.

3. Bot runtime integration
   - Implement `src/rpc/discord-bot.ts`:
     - Export `startDiscordBot(env, deps): { stop(): Promise<void> }`
     - Inside: create `Client` with intents `Guilds` only; hook `interactionCreate`.
       - Autocomplete: detect `interaction.isAutocomplete()` and return suggestions.
       - Commands: detect `interaction.isChatInputCommand()` and route.
       - Use `interaction.reply({ embeds, flags: MessageFlags.Ephemeral })` for ephemeral where useful. `ephemeral` is deprecated; use `flags` [InteractionReplyOptions](https://discord.js.org/docs/packages/discord.js/stable/InteractionReplyOptions:Interface).

4. DRY helper layer for embeds and formatting
   - Create `src/rpc/discord/ui.ts`:
     - `embed(title, fields, color)` returning APIEmbed
     - Emoji constants; table builder for monospaced columns
     - `formatPositionDetails()` reusing `loadMetaForPosition` and helpers from `utils/external-helpers`

5. Implement commands
   - `/status`
     - Show: RTDS status (connected/disconnected) via `lastRtdsMessageTimeMs` age from `src/core/data-ingestion/polymarket-rtds.ts`, open positions count (DB), unrealized/realized via `getPortfolioSummary`.
   - `/logs n?`
     - Optional integer with autocomplete (suggest 25, 50, 100, 200, 500). Use `getLogTailSnapshot(maxChars)` and slice to n lines; return as code block. Cap n to 500.
   - `/portfolio`
     - Use `getPortfolioSummary` + `buildClosedPositionsSummaryMessage`, post embed.
   - `/positions`
     - Query open positions for current mode; render table with columns: ID, UPNL (current unrealized per position), include emojis.
   - `/position id`
     - Autocomplete id from recent open/closed positions; show embed: Market Link, Token/Asset ID, Entry Price, Entry Price (Avg), Current Price, Unrealized PnL.
   - `/close id`
     - Calls provider.closePosition with reason `MANUAL`, source `manual`.
   - `/close-all`
     - Iterate open positions; call closePosition with reason `MANUAL`.
   - All DB access via existing schema; mode aware (dry_run/live).

6. Autocomplete behavior
   - Use Discord Autocomplete per spec (focused option true; choices cannot co-exist) [Autocomplete](https://discord.com/developers/docs/interactions/application-commands#autocomplete).
   - `/position id` -> suggest top 25 open position IDs by recency; `/logs n` -> suggest list [25,50,100,200,500].

7. Safety, limits, and UX
   - Ephemeral responses for `/logs` and `/close*`; non-ephemeral for portfolio summaries.
   - Guard long outputs with truncation; log dev-only warnings when truncating.
   - Emojis: ✅/🟥/✳️/📈/📉/🧮/🧰 for sections.

8. Wire into main-loop
   - In `src/core/app/main-loop.ts`, after bot started event, conditionally start Discord bot if `ENABLE_DISCORD_BOT` true. Reuse notifier fields in logs, but keep separate.

9. Scripts
   - Add pnpm scripts:
     - `discord:register:guild` (per env GUILD_IDS)
     - `discord:register:global`
     - `discord:dev` (run bot with app)

10. Rollback
   - Set `ENABLE_DISCORD_BOT=false` to disable. Commands can remain registered; no runtime impact.

Traceability bullets:
- Slash commands + autocomplete → steps 2–6
- Status/logs/portfolio/positions/position/close/close-all → step 5
- Emojis, embeds, UX → steps 4–5,7
- DRY → step 4

### 💻 Specs

Models / Schemas: no DB schema changes.

Classes
```ts
// src/rpc/discord-bot.ts
export interface DiscordBotDeps {
    getMode(): 'dry_run' | 'live';
    closePosition(args: { positionId: number }): Promise<void>;
}
export function startDiscordBot(env: Env, deps: DiscordBotDeps): Promise<{ stop(): Promise<void> }>; // starts client, registers handlers
```

Functions
```ts
// src/rpc/discord/ui.ts
export function buildEmbed(params: { title: string; description?: string; fields?: { name: string; value: string; inline?: boolean }[]; color?: number }): APIEmbed;
export function table(columns: string[], rows: string[][]): string; // returns monospaced table inside ```
export function positionDetailEmbed(positionId: number): Promise<APIEmbed>; // uses loadMetaForPosition, DB reads
```

Libraries Involved
- discord.js v14 — Client, events, embed building, interaction replies [(Client)](https://discord.js.org/docs/packages/discord.js/stable/Client:Class)
- Discord Dev Portal — command registration/Autocomplete [(Application Commands)](https://discord.com/developers/docs/interactions/application-commands), [(Autocomplete)](https://discord.com/developers/docs/interactions/application-commands#autocomplete)

API Call Snippets
```ts
// Register per-guild
await rest.put(
  Routes.applicationGuildCommands(appId, guildId),
  { body: commands }
);

// Global
await rest.put(
  Routes.applicationCommands(appId),
  { body: commands }
);
```

Reply Options
```ts
// Ephemeral reply in v14: prefer flags
await interaction.reply({
  content: 'Done',
  flags: MessageFlags.Ephemeral,
});
```

Config & Feature Flags
```ts
// src/core/config/env.ts additions
DISCORD_BOT_TOKEN: z.string().optional(),
DISCORD_APP_ID: z.string().optional(),
DISCORD_GUILD_IDS: z.string().optional(), // comma list
ENABLE_DISCORD_BOT: z.string().optional().transform(v => v ? v.toLowerCase() === 'true' : false),
```

Observability
- Counters: `discord.commands.invoked`, `discord.commands.error`
- Logs around registration and interaction handling.

### 📂 Files Involved

🟦 TO READ FIRST
- `/home/probi/swe/repo/polymarket-copy-bot/src/utils/logger.ts` — logs snapshot helper
- `/home/probi/swe/repo/polymarket-copy-bot/src/utils/external-helpers.ts` — portfolio and meta helpers
- `/home/probi/swe/repo/polymarket-copy-bot/src/core/app/main-loop.ts` — startup wiring

🟨 MODIFY
- `/home/probi/swe/repo/polymarket-copy-bot/src/core/config/env.ts` — add envs
- `/home/probi/swe/repo/polymarket-copy-bot/src/core/app/main-loop.ts` — start bot when enabled
- `/home/probi/swe/repo/polymarket-copy-bot/package.json` — add scripts and deps

🟩 CREATE
- `/home/probi/swe/repo/polymarket-copy-bot/src/rpc/discord-bot.ts` — bot runtime
- `/home/probi/swe/repo/polymarket-copy-bot/src/rpc/discord/ui.ts` — embeds/tables DRY
- `/home/probi/swe/repo/polymarket-copy-bot/scripts/discord-register-commands.ts` — registration CLI

🟥 DELETE
- None

### 🧭 Optional Visuals

```mermaid
sequenceDiagram
    participant User
    participant Discord
    participant Bot
    participant DB
    User->>Discord: /position 123
    Discord->>Bot: interactionCreate (ChatInput)
    Bot->>DB: loadMetaForPosition(123)
    DB-->>Bot: meta, prices, pnl
    Bot-->>Discord: reply embed (non-ephemeral)
```

### 🌐 Helpful Tool Results (as tool’s session_id)
- Docs: smart_fetch_url_multiple/fetch_official_docs_pages_to_cite_and_ensure_correct_apis_for_discord_slash_commands_deployment_and_autocomplete/mp69lsskz8
- Docs: smart_fetch_url_multiple/collect_official_docs_citations_for_implementing_discord_slash_commands_autocomplete_and_reply_flags_in_discord_js_v14_and_discord_dev_portal/j5yw1fqqgx
- Repo scan: codebase_search/find_existing_placeholders_or_integration_points_for_discord_bot/gvmpzsdxt4
- Repo scan: codebase_search/locate_functions_for_logs_and_portfolio_summary/94tytxcxjo

### 📚 References
- Discord Application Commands (Slash, Autocomplete, Limits): https://discord.com/developers/docs/interactions/application-commands
- discord.js InteractionReplyOptions (ephemeral flags): https://discord.js.org/docs/packages/discord.js/stable/InteractionReplyOptions:Interface
- discord.js Client interactionCreate event: https://discord.js.org/docs/packages/discord.js/stable/Client:Class

### ▶️ Plan Summary
1. Add envs + dependencies; create registration script.
2. Implement `startDiscordBot` with handlers for ChatInput and Autocomplete.
3. Build DRY UI helpers and all requested commands.
4. Wire the bot under a feature flag; add pnpm scripts for registration.
5. Deploy guild-scoped in dev; optional global in prod.

### 🔴 IMPORTANT REMINDERS
- Don’t mix `choices` with `autocomplete` on the same option (Discord spec).
- Use `flags: MessageFlags.Ephemeral` in replies, not deprecated `ephemeral`.
- Cap outputs and use ephemeral for sensitive responses.
<|PLAN_FORMAT_END|>

]]>
</file>
<file path="scripts/register-discord-commands.ts">
<![CDATA[
import { loadDiscordEnv } from '@/core/config/env-discord';
import { buildSlashCommandDefs } from '@/rpc/discord/discord-commands';
import { createLogger } from '@/utils/telemetry/logger';

const logger = createLogger({ tag: 'discord.register' });

async function sleep(ms: number): Promise<void> {
    await new Promise((resolve) => setTimeout(resolve, ms));
}

async function putRawJson(url: string, token: string, payloadJson: string, label: string): Promise<void> {
    let attempts = 0;
    while (true) {
        const res = await fetch(url, {
            method: 'PUT',
            headers: {
                'Content-Type': 'application/json',
                Authorization: `Bot ${token}`,
            },
            body: payloadJson,
        });
        if (res.status === 429) {
            const h1 = res.headers.get('retry-after');
            const h2 = res.headers.get('x-ratelimit-reset-after');
            const retryMs = Math.max(0, Math.ceil(parseFloat(h1 ?? h2 ?? '1') * 1000));
            attempts += 1;
            logger.warn({ label, attempts, retryMs }, 'rate_limited_retry');
            if (attempts > 5) {
                throw new Error(`Discord rate limit: exceeded retries for ${label}`);
            }
            await sleep(retryMs);
            continue;
        }
        if (!res.ok) {
            const body = await res.text();
            throw new Error(`Discord API error (${label}): ${res.status} ${body}`);
        }
        return;
    }
}

async function main(): Promise<void> {
    const env = loadDiscordEnv();
    const scopeArg = process.argv.find((a) => a.startsWith('--scope=')) ?? '--scope=guild';
    const scope = scopeArg.split('=')[1] ?? 'guild';

    const token = env.DISCORD_BOT_TOKEN;
    const appId = env.DISCORD_APP_ID;
    const guildId = env.DISCORD_GUILD_ID;
    const channelId = env.DISCORD_CHANNEL_ID;

    if (!token) throw new Error('DISCORD_BOT_TOKEN is required');
    if (!appId) throw new Error('DISCORD_APP_ID is required');

    // Preflight: verify token belongs to the specified application
    const meRes = await fetch('https://discord.com/api/v10/users/@me', {
        method: 'GET',
        headers: { Authorization: `Bot ${token}` },
    });
    if (!meRes.ok) {
        const body = await meRes.text();
        throw new Error(`Discord token validation failed: ${meRes.status} ${body}`);
    }
    const me = (await meRes.json()) as { id?: string } | unknown;
    const userId = (me as any)?.id ? String((me as any).id) : undefined;
    if (!userId) {
        throw new Error('Discord token validation succeeded but no user id returned');
    }
    if (String(userId) !== String(appId)) {
        throw new Error(
            `Bot token user id does not match DISCORD_APP_ID. token.userId=${userId} env.DISCORD_APP_ID=${String(appId)}`
        );
    }

    const defs = buildSlashCommandDefs();

    let url: string;
    if (scope === 'global') {
        url = `https://discord.com/api/v10/applications/${appId}/commands`;
    } else {
        if (!guildId) throw new Error('DISCORD_GUILD_ID is required for guild scope');
        url = `https://discord.com/api/v10/applications/${appId}/guilds/${guildId}/commands`;
    }

    // Force wipe using bulk overwrite (minimizes requests and avoids 429s)
    try {
        const globalUrl = `https://discord.com/api/v10/applications/${appId}/commands`;
        const guildUrl = guildId
            ? `https://discord.com/api/v10/applications/${appId}/guilds/${guildId}/commands`
            : undefined;
        logger.info('Wiping all global commands via bulk overwrite');
        await putRawJson(globalUrl, token, '[]', 'wipe_global');
        if (guildUrl) {
            logger.info({ guildId }, 'Wiping all guild commands via bulk overwrite');
            await putRawJson(guildUrl, token, '[]', 'wipe_guild');
        }
        logger.success('Command wipe completed');
    } catch (wipeErr) {
        logger.warn({ err: wipeErr }, 'wipe_commands_warning');
    }

    logger.info({ scope, url, count: defs.length }, 'Upserting Discord application commands');
    await putRawJson(url, token, JSON.stringify(defs), 'upsert_commands');
    logger.success('Commands registered');
}

main().catch((err) => {
    logger.error({ err }, 'register_commands_failed');
    process.exit(1);
});

]]>
</file>
<file path="src/notify/discord-webhook.ts">
<![CDATA[
import { z } from 'zod';
import { createLogger } from '@/utils/telemetry/logger';

const logger = createLogger({ tag: 'discord-webhook' });

const FieldSchema = z.object({
    name: z.string(),
    value: z.string(),
    inline: z.boolean().optional(),
});
const MessageSchema = z.object({
    title: z.string(),
    description: z.string().optional(),
    fields: z.array(FieldSchema).optional(),
    color: z.number().int().optional(),
});

export class DiscordWebhookNotifier {
    private readonly webhookUrl: string | undefined;
    private static readonly TIMEOUT_MS = 1500;
    constructor(webhookUrl: string | undefined) {
        this.webhookUrl = webhookUrl;
    }

    async sendMessage(payload: {
        title: string;
        description?: string;
        fields?: { name: string; value: string; inline?: boolean }[];
        color?: number;
    }): Promise<void> {
        // Fire-and-forget: schedule and resolve immediately to avoid blocking callers
        setTimeout(() => {
            void (async () => {
                try {
                    const parsed = MessageSchema.safeParse(payload);
                    if (!parsed.success) {
                        logger.warn(
                            { err: parsed.error.message, title: payload.title },
                            'Discord payload validation failed'
                        );
                        return;
                    }
                    if (!this.webhookUrl) {
                        logger.debug(
                            { title: payload.title },
                            'Discord webhook not configured; skipping send'
                        );
                        return; // silently noop if not configured
                    }
                    const body = {
                        embeds: [
                            {
                                title: payload.title,
                                description: payload.description,
                                fields: payload.fields,
                                color: payload.color,
                            },
                        ],
                    };
                    const controller = new AbortController();
                    const timer = setTimeout(
                        () => controller.abort(),
                        DiscordWebhookNotifier.TIMEOUT_MS
                    );
                    try {
                        logger.debug({ title: payload.title }, 'Sending Discord webhook');
                        const res = await fetch(this.webhookUrl, {
                            method: 'POST',
                            headers: { 'Content-Type': 'application/json' },
                            body: JSON.stringify(body),
                            signal: controller.signal,
                        });
                        if (!res.ok) {
                            logger.warn(
                                { status: res.status, title: payload.title },
                                'Discord webhook returned non-OK'
                            );
                        } else {
                            logger.success({ title: payload.title }, 'Discord webhook sent');
                        }
                    } catch (err) {
                        logger.warn({ err, title: payload.title }, 'Discord webhook send failed');
                    } finally {
                        clearTimeout(timer);
                    }
                } catch (err) {
                    logger.warn({ err, title: payload.title }, 'Discord sendMessage error');
                }
            })();
        }, 0);
        return;
    }
}

]]>
</file>
<file path="src/utils/safe-enc-dec.ts">
<![CDATA[
import { randomBytes, scryptSync, createCipheriv, createDecipheriv } from "node:crypto";

const ALGORITHM = "aes-256-gcm" as const;
const SALT_LENGTH = 16;
const IV_LENGTH = 12;
const KEY_LENGTH = 32;
const TAG_LENGTH = 16;
const VERSION_PREFIX = "v1.";
const APP_ENC_PP = "polymarket-copy-bot-4fea1f8f10940f33bcfea88a65d383d61fddd79d"  // DO NOT CHANGE THIS!

type EncParams = { text: string; pp: string };
type DecParams = { enc: string; pp: string };

export function enc({ text, pp }: EncParams): string {
    if (typeof text !== "string") {
        throw new TypeError("text must be a string");
    }
    if (typeof pp !== "string" || pp.length === 0) {
        throw new TypeError("pp must be a non-empty string");
    }

    const salt = randomBytes(SALT_LENGTH);
    const key = scryptSync(Buffer.from(pp, "utf8"), salt, KEY_LENGTH);
    const iv = randomBytes(IV_LENGTH);

    const cipher = createCipheriv(ALGORITHM, key, iv);
    const ciphertext = Buffer.concat([cipher.update(Buffer.from(text, "utf8")), cipher.final()]);
    const authTag = cipher.getAuthTag();

    // payload layout: [salt | iv | tag | ciphertext]
    const payload = Buffer.concat([salt, iv, authTag, ciphertext]);
    return VERSION_PREFIX + payload.toString("base64");
}

export function dec({ enc: enced, pp }: DecParams): string {
    if (typeof enced !== "string" || !enced.startsWith(VERSION_PREFIX)) {
        throw new TypeError("invalid enced payload format");
    }
    if (typeof pp !== "string" || pp.length === 0) {
        throw new TypeError("pp must be a non-empty string");
    }

    const payloadB64 = enced.slice(VERSION_PREFIX.length);
    const payload = Buffer.from(payloadB64, "base64");

    if (payload.length < SALT_LENGTH + IV_LENGTH + TAG_LENGTH) {
        throw new Error("enced payload too short");
    }

    const salt = payload.subarray(0, SALT_LENGTH);
    const iv = payload.subarray(SALT_LENGTH, SALT_LENGTH + IV_LENGTH);
    const tagStart = SALT_LENGTH + IV_LENGTH;
    const authTag = payload.subarray(tagStart, tagStart + TAG_LENGTH);
    const ciphertext = payload.subarray(tagStart + TAG_LENGTH);

    const key = scryptSync(Buffer.from(pp, "utf8"), salt, KEY_LENGTH);
    const decipher = createDecipheriv(ALGORITHM, key, iv);
    decipher.setAuthTag(authTag);

    const plaintext = Buffer.concat([decipher.update(ciphertext), decipher.final()]);
    return plaintext.toString("utf8");
}

export function appEnc(text: string) {
    return enc({ text, pp: APP_ENC_PP });
}

export function appDec(enc: string) {
    return dec({ enc: enc, pp: APP_ENC_PP });
}
]]>
</file>
<file path="tests/integration/dry-run-inventory.test.ts">
<![CDATA[
import { describe, it, beforeEach, afterEach, beforeAll, expect } from 'vitest';

// IMPORTANT: Ensure DATABASE_URL points to a test database BEFORE importing db
// The project resolves aliases like @/ via tsconfig paths
import { db } from '@/core/store/db';
import { positionTable, copyOrderTable } from '@/core/store/schema';
import { DiscordWebhookNotifier } from '@/notify/discord-webhook';
import { Executor } from '@/core/exec/executor';
import { DryRunExecutionProvider } from '@/core/exec/providers/dry-run-execution-provider';
import type { LeaderConfig } from '@/core/config/config';
import type { TradeFeedMessage } from '@/core/domain/trade';
import { and, eq } from 'drizzle-orm';
import type { Address } from '@/core/domain/common';
import { resetDb } from '../test-helpers';

function createExecutorForTest(leaders: LeaderConfig[]): Executor {
    const provider = new DryRunExecutionProvider();
    const notifier = new DiscordWebhookNotifier(undefined);
    return new Executor({
        executionProvider: provider,
        discord: notifier,
        maxSlippageBps: 50,
        globalMaxPositions: 9999,
        leaders,
        orderType: 'FOK',
        globalMaxUsdcInvested: 1_000_000,
        orderThrottleMs: 0,
        buyPriceBlockLimit: 0.96,
    });
}

function trade(params: Partial<TradeFeedMessage>): TradeFeedMessage {
    return {
        asset: params.asset ?? 'token:TEST',
        bio: '',
        conditionId: params.conditionId ?? '0xcond',
        eventSlug: '',
        icon: '',
        name: '',
        outcome: params.outcome ?? 'Yes',
        outcomeIndex: 0,
        price: params.price ?? 0.5,
        profileImage: '',
        proxyWallet: params.proxyWallet ?? ('0x1111111111111111111111111111111111111111' as Address),
        pseudonym: '',
        side: params.side ?? 'BUY',
        size: params.size ?? 2,
        slug: '',
        timestamp: params.timestamp ?? Math.floor(Date.now() / 1000),
        title: '',
        transactionHash: params.transactionHash ?? `0x${Math.random().toString(16).slice(2).padEnd(64, '0')}`,
        ingestSource: params.ingestSource ?? 'sim',
        receivedAtMs: Date.now(),
    };
}

const TEST_LEADER = '0x1111111111111111111111111111111111111111' as Address;

const testLeaderCfg: LeaderConfig = {
    address: TEST_LEADER,
    displayName: 'Test Leader',
    maxPositions: 100,
    // Mirror trade.size 1:1 to amountUsdc for deterministic sizing in tests
    positionSizeUsdc: { kind: 'mirror_1to1' },
    positionExpiryMs: 60_000,
    categoriesAllowed: undefined,
    outcomesAllowed: undefined,
    copySidesAllowed: undefined,
};

beforeAll(() => {
    process.env.ERROR_LOG_ENABLED = 'false';
});

beforeEach(async () => {
    await resetDb();
});

afterEach(async () => {
    // Allow async eventBus/discord timers to settle before cleaning DB
    await new Promise((r) => setTimeout(r, 1));
    await resetDb();
});

describe('Dry run execution inventory netting & aggregation', () => {
    
    // Given: two BUY trades same token
    // When: they are processed
    // Then: only one open long exists with weighted-average entry
    it('aggregates multiple BUYs into a single open position with weighted average', async () => {
        // Given: empty DB, a leader, and two BUY trades on the same token
        const executor = createExecutorForTest([testLeaderCfg]);
        const tokenId = 'token:AGG';
        const t1 = trade({ proxyWallet: TEST_LEADER, asset: tokenId, side: 'BUY', size: 2, price: 0.20 });
        const t2 = trade({ proxyWallet: TEST_LEADER, asset: tokenId, side: 'BUY', size: 3, price: 0.40, timestamp: t1.timestamp + 1, transactionHash: '0x' + 'b'.repeat(64) });

        // When: handle both trades sequentially
        await executor.handleLeaderTrade(t1);
        await executor.handleLeaderTrade(t2);

        // Then: one open position exists; amountUsdc = 5; shares computed with BUY slippage (+0.5%)
        const rows = await db
            .select()
            .from(positionTable)
            .where(and(eq(positionTable.tokenId, tokenId), eq(positionTable.status, 'open')));
        expect(rows.length).toBe(1);
        const pos = rows[0]!;
        const sl = 0.005;
        const s1 = 2 / (0.20 * (1 + sl));
        const s2 = 3 / (0.40 * (1 + sl));
        const expectedShares = s1 + s2;
        const expectedAvg = 5 / expectedShares;
        expect(Number(pos.amountUsdc)).toBeCloseTo(5, 6);
        expect(Number(pos.sizeShares)).toBeCloseTo(expectedShares, 6);
        // Weighted-average price should be tracked in entryPriceAvg (entryPrice is the very first fill)
        expect(Number((pos as any).entryPriceAvg)).toBeCloseTo(expectedAvg, 6);
        // And entryPrice should remain the initial fill price (with BUY slippage applied)
        const firstEntry = 0.20 * (1 + sl); // 0.201
        expect(Number(pos.entryPrice)).toBeCloseTo(firstEntry, 6);
    });

    // Given: an open BUY exists
    // When: SELL for smaller notional arrives
    // Then: long is reduced (not closed), no new short is opened
    it('SELL reduces an existing BUY (partial reduce keeps open)', async () => {
        // Given: an open long created by a BUY
        const executor = createExecutorForTest([testLeaderCfg]);
        const tokenId = 'token:REDUCE';
        const buy = trade({ proxyWallet: TEST_LEADER, asset: tokenId, side: 'BUY', size: 10, price: 0.50, transactionHash: '0x' + 'c'.repeat(64) });
        await executor.handleLeaderTrade(buy);

        // When: a SELL arrives with amount less than inventory
        const sell = trade({ proxyWallet: TEST_LEADER, asset: tokenId, side: 'SELL', size: 5, price: 0.60, transactionHash: '0x' + 'd'.repeat(64), timestamp: buy.timestamp + 2 });
        await executor.handleLeaderTrade(sell);

        // Then: position remains open with reduced shares and updated amount (use slippage +/-0.5%)
        const rows = await db
            .select()
            .from(positionTable)
            .where(and(eq(positionTable.tokenId, tokenId), eq(positionTable.status, 'open')));
        expect(rows.length).toBe(1);
        const pos = rows[0]!;
        const sl = 0.005;
        const initialShares = 10 / (0.50 * (1 + sl));
        const reducedShares = 5 / (0.60 * (1 - sl));
        const expectedShares = initialShares - Math.min(initialShares, reducedShares);
        const avgEntry = 10 / initialShares;
        const expectedAmount = expectedShares * avgEntry;
        expect(Number(pos.sizeShares)).toBeCloseTo(expectedShares, 6);
        expect(Number(pos.amountUsdc)).toBeCloseTo(expectedAmount, 6);
        expect(String(pos.status)).toBe('open');

    });

    // Given: no inventory
    // When: SELL arrives
    // Then: request is skipped; no position or order is persisted
    it('SELL with no inventory creates no position', async () => {
        // Given: no positions for token
        const executor = createExecutorForTest([testLeaderCfg]);
        const tokenId = 'token:NOINV';

        // When: SELL arrives first
        const sell = trade({ proxyWallet: TEST_LEADER, asset: tokenId, side: 'SELL', size: 5, price: 0.30, transactionHash: '0x' + 'e'.repeat(64) });
        await executor.handleLeaderTrade(sell);

        // Then: there are no positions and no copy orders
        const posRows = await db
            .select()
            .from(positionTable)
            .where(eq(positionTable.tokenId, tokenId));
        expect(posRows.length).toBe(0);

        const coRows = await db
            .select()
            .from(copyOrderTable)
            .where(eq(copyOrderTable.desiredSide, 'SELL'));
        expect(coRows.length).toBe(0);

    });
});

]]>
</file>
</files>
<files>
<file path=".dev/docs/manual-poly-clob.ts">
<![CDATA[
`
POLYMARKET CLOB - CONCISE DOCS
==============================

TYPES
=====

import{SignatureType,SignedOrder}from"@polymarket/order-utils";import{AxiosRequestHeaders}from"axios";export interface ApiKeyCreds{key:string;secret:string;passphrase:string}export interface ApiKeyRaw{apiKey:string;secret:string;passphrase:string}export interface L2HeaderArgs{method:string;requestPath:string;body? :string}export interface L1PolyHeader extends AxiosRequestHeaders{POLY_ADDRESS:string;POLY_SIGNATURE:string;POLY_TIMESTAMP:string;POLY_NONCE:string}export interface L2PolyHeader extends AxiosRequestHeaders{POLY_ADDRESS:string;POLY_SIGNATURE:string;POLY_TIMESTAMP:string;POLY_API_KEY:string;POLY_PASSPHRASE:string}export declare enum Side{BUY="BUY",SELL="SELL"}export declare enum OrderType{GTC="GTC",FOK="FOK",GTD="GTD",FAK="FAK"}export interface PostOrdersArgs{order:SignedOrder;orderType:OrderType}export interface NewOrder<T extends OrderType>{readonlyorder:{readonlysalt:number;readonly maker:string;readonly signer:string;readonly taker:string;readonly tokenId:string;readonly makerAmount:string;readonly takerAmount:string;readonly expiration:string;readonly nonce:string;readonly feeRateBps:string;readonly side:Side;readonly signatureType:SignatureType;readonly signature:string};readonly owner:string;readonly orderType:T;readonly deferExec:boolean};export interface UserOrder{tokenID:string;price:number;size:number;side:Side;feeRateBps? :number;nonce? :number;expiration? :number;taker? :string}export interface UserMarketOrder{tokenID:string;price? :number;amount:number;side:Side;feeRateBps? :number;nonce? :number;taker? :string;orderType? :OrderType.FOK|OrderType.FAK}export interface OrderPayload{orderID:string}export interface ApiKeysResponse{apiKeys:ApiKeyCreds[]}export interface BanStatus{closed_only:boolean}export interface OrderResponse{success:boolean;errorMsg:string;orderID:string;transactionsHashes:string[];status:string;takingAmount:string;makingAmount:string}export interface OpenOrder{id:string;status:string;owner:string;maker_address:string;market:string;asset_id:string;side:string;original_size:string;size_matched:string;price:string;associate_trades:string[];outcome:string;created_at:number;expiration:string;order_type:string}export typeOpenOrdersResponse=OpenOrder[];export interface TradeParams{id? :string;maker_address? :string;market? :string;asset_id? :string;before? :string;after? :string}export interface OpenOrderParams{id? :string;market? :string;asset_id? :string}export interface MakerOrder{order_id:string;owner:string;maker_address:string;matched_amount:string;price:string;fee_rate_bps:string;asset_id:string;outcome:string;side:Side}export interface Trade{id:string;taker_order_id:string;market:string;asset_id:string;side:Side;size:string;fee_rate_bps:string;price:string;status:string;match_time:string;last_update:string;outcome:string;bucket_index:number;owner:string;maker_address:string;maker_orders:MakerOrder[];transaction_hash:string;trader_side:"TAKER"|"MAKER"}export declare enum Chain{POLYGON=137,AMOY=80002}export interface MarketPrice{t:number;p:number}export interface PriceHistoryFilterParams{market? :string;startTs? :number;endTs? :number;fidelity? :number;interval? :PriceHistoryInterval}export declare enum PriceHistoryInterval{MAX="max",ONE_WEEK="1w",ONE_DAY="1d",SIX_HOURS="6h",ONE_HOUR="1h"}export interface DropNotificationParams{ids:string[]}export interface Notification{type:number;owner:string;payload:any}export interface OrderMarketCancelParams{market? :string;asset_id? :string}export interface OrderBookSummary{market:string;asset_id:string;timestamp:string;bids:OrderSummary[];asks:OrderSummary[];min_order_size:string;tick_size:string;neg_risk:boolean;hash:string}export interface OrderSummary{price:string;size:string}export declare enum AssetType{COLLATERAL="COLLATERAL",CONDITIONAL="CONDITIONAL"}export interface BalanceAllowanceParams{asset_type:AssetType;token_id? :string}export interface BalanceAllowanceResponse{balance:string;allowance:string}export interface OrderScoringParams{order_id:string}export interface OrderScoring{scoring:boolean}export interface OrdersScoringParams{orderIds:string[]}export typeOrdersScoring={[orderId in string]:boolean};export typeCreateOrderOptions={tickSize:TickSize;negRisk? :boolean};export typeTickSize="0.1"|"0.01"|"0.001"|"0.0001";export interface RoundConfig{readonly price:number;readonly size:number;readonly amount:number}export interface TickSizes{[tokenId:string]:TickSize}export interface NegRisk{[tokenId:string]:boolean}export interface FeeRates{[tokenId:string]:number}export interface PaginationPayload{readonly limit:number;readonly count:number;readonly next_cursor:string;readonly data:any[]}export interface MarketTradeEvent{event_type:string;market:{condition_id:string;asset_id:string;question:string;icon:string;slug:string};user:{address:string;username:string;profile_picture:string;optimized_profile_picture:string;pseudonym:string};side:Side;size:string;fee_rate_bps:string;price:string;outcome:string;outcome_index:number;transaction_hash:string;timestamp:string}export interface BookParams{token_id:string;side:Side}export interface UserEarning{date:string;condition_id:string;asset_address:string;maker_address:string;earnings:number;asset_rate:number}export interface TotalUserEarning{date:string;asset_address:string;maker_address:string;earnings:number;asset_rate:number}export interface RewardsPercentages{[market:string]:number}export interface Token{token_id:string;outcome:string;price:number}export interface RewardsConfig{asset_address:string;start_date:string;end_date:string;rate_per_day:number;total_rewards:number}export interface MarketReward{condition_id:string;question:string;market_slug:string;event_slug:string;image:string;rewards_max_spread:number;rewards_min_size:number;tokens:Token[];rewards_config:RewardsConfig[]}export interface Earning{asset_address:string;earnings:number;asset_rate:number}export interface UserRewardsEarning{condition_id:string;question:string;market_slug:string;event_slug:string;image:string;rewards_max_spread:number;rewards_min_size:number;market_competitiveness:number;tokens:Token[];rewards_config:RewardsConfig[];maker_address:string;earning_percentage:number;earnings:Earning[]}

IMPORTANT: THIS IS NOT OUR CUSTOM DEFINED TYPE! To use Polymarket Clob Types, import from "@polymarket/clob-client":
import { OrderBookSummary } from "@polymarket/clob-client";

EXAMPLE 1
==========

await clobClient.getOrderBooks([{ token_id: "22131816317087462222441767751936061504662310118809793860064034214346537862051", side: Side.BUY }]);

[{"market":"0x6cb4d646f8a46b92d5201622c50ff6bf3a41556cf1059c20ba37c0cfbade1c13","asset_id":"22131816317087462222441767751936061504662310118809793860064034214346537862051","timestamp":"1759831913645","hash":"83c78a093583ce964bd8aebc2c01c76999e3bea4","bids":[{"price":"0.01","size":"1000"},{"price":"0.02","size":"460.05"},{"price":"0.03","size":"233.33"},{"price":"0.04","size":"10"},{"price":"0.06","size":"400"},{"price":"0.07","size":"384.14"},{"price":"0.08","size":"272.22"}],"asks":[{"price":"0.99","size":"1000"},{"price":"0.98","size":"6000"},{"price":"0.8","size":"300"},{"price":"0.79","size":"1332"},{"price":"0.78","size":"1272"},{"price":"0.7","size":"2000"},{"price":"0.69","size":"289"},{"price":"0.68","size":"6"},{"price":"0.36","size":"10.93"},{"price":"0.33","size":"20"},{"price":"0.32","size":"10"},{"price":"0.31","size":"25"},{"price":"0.26","size":"285.8"},{"price":"0.16","size":"9.07"},{"price":"0.14","size":"20"},{"price":"0.13","size":"210"},{"price":"0.11","size":"475.14"},{"price":"0.1","size":"409"}],"min_order_size":"5","tick_size":"0.01","neg_risk":true}]
`;

]]>
</file>
<file path=".dev/docs/manual-poly-data-api.md">
<![CDATA[

Developer Quickstart
API Rate Limits
​
How Rate Limiting Works
All rate limits are enforced using Cloudflare’s throttling system. When you exceed the maximum configured rate for any endpoint, requests are throttled rather than immediately rejected. This means:
Throttling: Requests over the limit are delayed/queued rather than dropped
Burst Allowances: Some endpoints allow short bursts above the sustained rate
Time Windows: Limits reset based on sliding time windows (e.g., per 10 seconds, per minute)
​
General Rate Limits
Endpoint	Limit	Notes
General Rate Limiting	5000 requests / 10s	Throttle requests over the maximum configured rate
”OK” Endpoint	50 requests / 10s	Throttle requests over the maximum configured rate
​
Data API Rate Limits
Endpoint	Limit	Notes
Data API (General)	100 requests / 10s	Throttle requests over the maximum configured rate
Data API (Alternative)	600 requests / 1 minute	1 hour block on violation
Data API /trades	30 requests / 10s	Throttle requests over the maximum configured rate
Data API “OK” Endpoint	10 requests / 10s	Throttle requests over the maximum configured rate
​
GAMMA API Rate Limits
Endpoint	Limit	Notes
GAMMA (General)	750 requests / 10s	Throttle requests over the maximum configured rate
GAMMA Get Comments	100 requests / 10s	Throttle requests over the maximum configured rate
GAMMA /events	100 requests / 10s	Throttle requests over the maximum configured rate
GAMMA /markets	100 requests / 10s	Throttle requests over the maximum configured rate
GAMMA /markets /events listing	100 requests / 10s	Throttle requests over the maximum configured rate
GAMMA Tags	100 requests / 10s	Throttle requests over the maximum configured rate
GAMMA Search	300 requests / 10s	Throttle requests over the maximum configured rate
​
CLOB API Rate Limits
​
General CLOB Endpoints
Endpoint	Limit	Notes
CLOB (General)	5000 requests / 10s	Throttle requests over the maximum configured rate
CLOB GET Balance Allowance	125 requests / 10s	Throttle requests over the maximum configured rate
CLOB UPDATE Balance Allowance	20 requests / 10s	Throttle requests over the maximum configured rate
​
CLOB Market Data
Endpoint	Limit	Notes
CLOB /book	200 requests / 10s	Throttle requests over the maximum configured rate
CLOB /books (website)	300 requests / 10s	Throttle requests over the maximum configured rate
CLOB /books	80 requests / 10s	Throttle requests over the maximum configured rate
CLOB /price	200 requests / 10s	Throttle requests over the maximum configured rate
CLOB /prices	80 requests / 10s	Throttle requests over the maximum configured rate
CLOB /midprice	200 requests / 10s	Throttle requests over the maximum configured rate
CLOB /midprices	80 requests / 10s	Throttle requests over the maximum configured rate
​
CLOB Ledger Endpoints
Endpoint	Limit	Notes
CLOB Ledger (/trades /orders /notifications /order)	300 requests / 10s	Throttle requests over the maximum configured rate
CLOB Ledger /data/orders	150 requests / 10s	Throttle requests over the maximum configured rate
CLOB Ledger /data/trades	150 requests / 10s	Throttle requests over the maximum configured rate
CLOB /notifications	125 requests / 10s	Throttle requests over the maximum configured rate
​
CLOB Markets & Pricing
Endpoint	Limit	Notes
CLOB Price History	100 requests / 10s	Throttle requests over the maximum configured rate
CLOB Markets	250 requests / 10s	Throttle requests over the maximum configured rate
CLOB Market Tick Size	50 requests / 10s	Throttle requests over the maximum configured rate
CLOB markets/0x	50 requests / 10s	Throttle requests over the maximum configured rate
CLOB /markets listing	100 requests / 10s	Throttle requests over the maximum configured rate
​
CLOB Authentication
Endpoint	Limit	Notes
CLOB API Keys	50 requests / 10s	Throttle requests over the maximum configured rate
​
CLOB Trading Endpoints
Endpoint	Limit	Notes
CLOB POST /order	2400 requests / 10s (240/s)	BURST - Throttle requests over the maximum configured rate
CLOB POST /order	24000 requests / 10 minutes (40/s)	Throttle requests over the maximum configured rate
CLOB POST /order (by token id)	800 requests / 10s (80/s)	BURST - Throttle requests over the maximum configured rate
CLOB POST /order (by token id)	12000 requests / 10 minutes (20/s)	Throttle requests over the maximum configured rate
CLOB DELETE /order	2400 requests / 10s (240/s)	BURST - Throttle requests over the maximum configured rate
CLOB DELETE /order	24000 requests / 10 minutes (40/s)	Throttle requests over the maximum configured rate
CLOB POST /orders	800 requests / 10s (80/s)	BURST - Throttle requests over the maximum configured rate
CLOB POST /orders	12000 requests / 10 minutes (20/s)	Throttle requests over the maximum configured rate
CLOB DELETE /orders	800 requests / 10s (80/s)	BURST - Throttle requests over the maximum configured rate
CLOB DELETE /orders	12000 requests / 10 minutes (20/s)	Throttle requests over the maximum configured rate
CLOB DELETE /cancel-all	200 requests / 10s (20/s)	BURST - Throttle requests over the maximum configured rate
CLOB DELETE /cancel-all	3000 requests / 10 minutes (5/s)	Throttle requests over the maximum configured rate
CLOB DELETE /cancel-market-orders	800 requests / 10s (80/s)	BURST - Throttle requests over the maximum configured rate
CLOB DELETE /cancel-market-orders	12000 requests / 10 minutes (20/s)	Throttle requests over the maximum configured rate
​
Other API Rate Limits
Endpoint	Limit	Notes
RELAYER /submit	15 requests / 1 minute	Throttle requests over the maximum configured rate
User PNL API	100 requests / 10s	Throttle requests over the maximum configured rate
Glossary


# Polymarket Documentation: Get Current Positions for a User

Returns positions filtered by user and optional filters.

### Endpoint

`GET /positions`

### Request Example (cURL)

```bash
curl --request GET \
  --url https://data-api.polymarket.com/positions
```

### Status Codes

| Status | Description |
| :----- | :---------- |
| 200    | Success     |
| 400    | Bad Request |
| 401    | Unauthorized |
| 500    | Internal Server Error |

### Query Parameters

| Parameter | Type | Required | Default | Description | Example |
| :--- | :--- | :--- | :--- | :--- | :--- |
| `user` | `string` | **required** | | User address (required) | `"0x56687bf447db6ffa42ffe2204a05edaa20f55839"` |
| `market` | `string[]` | | | Comma-separated list of condition IDs. Mutually exclusive with `eventId`. (0x-prefixed 64-hex string) | |
| `eventId` | `integer[]` | | | Comma-separated list of event IDs. Mutually exclusive with `market`. | |
| `sizeThreshold` | `number` | | `1` | Required range: `x >= 0` | |
| `redeemable` | `boolean` | | `false` | | |
| `mergeable` | `boolean` | | `false` | | |
| `limit` | `integer` | | `100` | Required range: `0 <= x <= 500` | |
| `offset` | `integer` | | `0` | Required range: `0 <= x <= 10000` | |
| `sortBy` | `enum<string>` | | `TOKENS` | Available options: `CURRENT`, `INITIAL`, `TOKENS`, `CASHPNL`, `PERCENTPNL`, `TITLE`, `RESOLVING`, `PRICE`, `AVGPRICE` | |
| `sortDirection` | `enum<string>` | | `DESC` | Available options: `ASC`, `DESC` | |
| `title` | `string` | | | Maximum length: 100 | |

### Response (200 Success - `application/json`)

List of positions

```json
[
  {
    "proxyWallet": "0x5adf695a088172a920b6d0b2e5b7d88aa8ffa5e7",
    "asset": "22532673444371000087276855698976185959891603058477427058498190868809631671643",
    "conditionId": "0x2b6a5170c30fbeba1b2317cf98929a446af82e2dc2bc5e84a07959b35bc2edbb",
    "size": 689.991638,
    "avgPrice": 0.212752,
    "initialValue": 146.797100967776,
    "currentValue": 141.44828579,
    "cashPnl": -5.348815177776009,
    "percentPnl": -3.6436790253440687,
    "totalBought": 699.991638,
    "realizedPnl": 0,
    "percentRealizedPnl": -5.020214340108156,
    "curPrice": 0.205,
    "redeemable": false,
    "mergeable": false,
    "title": "Will Celta Vigo win on 2025-10-05?",
    "slug": "lal-cel-mad-2025-10-05-cel",
    "icon": "https://polymarket-upload.s3.us-east-2.amazonaws.com/lal_celta_vigo.png",
    "eventId": "47924",
    "eventSlug": "lal-cel-mad-2025-10-05",
    "outcome": "Yes",
    "outcomeIndex": 0,
    "oppositeOutcome": "No",
    "oppositeAsset": "95416813017536330994120103652237010090486650775573169623122187070843615636364",
    "endDate": "2025-10-05",
    "negativeRisk": true
  },
  ...
]
```

#### Response Fields

| Field | Type | Description | Example |
| :--- | :--- | :--- | :--- |
| `proxyWallet` | `string` | User Profile Address (0x-prefixed, 40 hex chars) | `"0x56687bf447db6ffa42ffe2204a05edaa20f55839"` |
| `asset` | `string` | | |
| `conditionId` | `string` | 0x-prefixed 64-hex string | `"0xdd22472e552920b8438158ea7238bfadfa4f736aa4cee91a6b86c39ead110917"` |
| `size` | `number` | | |
| `avgPrice` | `number` | | |
| `initialValue` | `number` | | |
| `currentValue` | `number` | | |
| `cashPnl` | `number` | | |
| `percentPnl` | `number` | | |
| `totalBought` | `number` | | |
| `realizedPnl` | `number` | | |
| `percentRealizedPnl` | `number` | | |
| `curPrice` | `number` | | |
| `redeemable` | `boolean` | | |
| `mergeable` | `boolean` | | |
| `title` | `string` | | |
| `slug` | `string` | | |
| `icon` | `string` | | |
| `eventSlug` | `string` | | |
| `outcome` | `string` | | |
| `outcomeIndex` | `integer` | | |
| `oppositeOutcome` | `string` | | |
| `oppositeAsset` | `string` | | |
| `endDate` | `string` | | |
| `negativeRisk` | `boolean` | | |

---

*Other related endpoints mentioned:*

* Health check
* Get trades for a user or markets

# Polymarket Documentation: Get Trades for a User or Markets

## Core: Get trades for a user or markets

Returns trades filtered by user and/or market identifiers.

### Endpoint

`GET /trades`

### Request Example (cURL)

```bash
curl --request GET \
  --url https://data-api.polymarket.com/trades
```

### Status Codes

| Status | Description |
| :----- | :---------- |
| 200    | Success     |
| 400    | Bad Request |
| 401    | Unauthorized |
| 500    | Internal Server Error |

### Query Parameters

| Parameter | Type | Default | Required Range | Description | Example |
| :--- | :--- | :--- | :--- | :--- | :--- |
| `limit` | `integer` | `100` | `0 <= x <= 10000` | | |
| `offset` | `integer` | `0` | `0 <= x <= 10000` | | |
| `takerOnly` | `boolean` | `true` | | | |
| `filterType` | `enum<string>` | | | Must be provided together with `filterAmount`. Available options: `CASH`, `TOKENS`. | |
| `filterAmount` | `number` | | `x >= 0` | Must be provided together with `filterType`. | |
| `market` | `string[]` | | | Comma-separated list of condition IDs (0x-prefixed 64-hex string). Mutually exclusive with `eventId`. | |
| `eventId` | `integer[]` | | | Comma-separated list of event IDs. Mutually exclusive with `market`. | |
| `user` | `string` | | | User Profile Address (0x-prefixed, 40 hex chars). | `"0x56687bf447db6ffa42ffe2204a05edaa20f55839"` |
| `side` | `enum<string>` | | | Available options: `BUY`, `SELL`. | |

### Response (200 Success - `application/json`)

List of trades

```json
[
  {
    "proxyWallet": "0x5adf695a088172a920b6d0b2e5b7d88aa8ffa5e7",
    "side": "SELL",
    "asset": "10556390943081047040362703548123771402014160833887429090228355495495795329131",
    "conditionId": "0x1d221af524997a388c696773235bdf08740e620ee1e164659a1302272ffc6f14",
    "size": 129.1,
    "price": 0.22,
    "timestamp": 1759491562,
    "title": "Will Getafe win on 2025-10-03?",
    "slug": "lal-osa-get-2025-10-03-get",
    "icon": "https://polymarket-upload.s3.us-east-2.amazonaws.com/lal_getafe.png",
    "eventSlug": "lal-osa-get-2025-10-03",
    "outcome": "Yes",
    "outcomeIndex": 0,
    "name": "XxConorxX",
    "pseudonym": "Purple-Shelter",
    "bio": "God Bless Charlie Kirk",
    "profileImage": "https://polymarket-upload.s3.us-east-2.amazonaws.com/profile-image-2865805-78a97917-fb27-4b2c-9ad6-0158f2ef7d3a.png",
    "profileImageOptimized": "",
    "transactionHash": "0x331fe02b949d5ca31885c311c527d7d4ed0b98d71923e701551e162abf5d3719"
  },
  ...
]
```

#### Response Fields

| Field | Type | Description | Example |
| :--- | :--- | :--- | :--- |
| `proxyWallet` | `string` | User Profile Address (0x-prefixed, 40 hex chars) | `"0x56687bf447db6ffa42ffe2204a05edaa20f55839"` |
| `side` | `enum<string>` | Available options: `BUY`, `SELL` | |
| `asset` | `string` | | |
| `conditionId` | `string` | 0x-prefixed 64-hex string | `"0xdd22472e552920b8438158ea7238bfadfa4f736aa4cee91a6b86c39ead110917"` |
| `size` | `number` | | |
| `price` | `number` | | |
| `timestamp` | `integer` | | |
| `title` | `string` | | |
| `slug` | `string` | | |
| `icon` | `string` | | |
| `eventSlug` | `string` | | |
| `outcome` | `string` | | |
| `outcomeIndex` | `integer` | | |
| `name` | `string` | | |
| `pseudonym` | `string` | | |
| `bio` | `string` | | |
| `profileImage` | `string` | | |
| `profileImageOptimized` | `string` | | |
| `transactionHash` | `string` | | |


# Polymarket Documentation: Get Closed Positions for a User

## Core: Get closed positions for a user

Fetches closed positions for a user (address).

### Endpoint

`GET /closed-positions`

### Request Example (cURL)

```bash
curl --request GET \
  --url https://data-api.polymarket.com/closed-positions
```

### Status Codes

| Status | Description |
| :----- | :---------- |
| 200    | Success     |
| 400    | Bad Request |
| 401    | Unauthorized |
| 500    | Internal Server Error |

### Query Parameters

| Parameter | Type | Required | Default | Required Range | Description | Example |
| :--- | :--- | :--- | :--- | :--- | :--- | :--- |
| `user` | `string` | **required** | | | The address of the user in question. | `"0x56687bf447db6ffa42ffe2204a05edaa20f55839"` |
| `market` | `string[]` | | | | The conditionId of the market in question. Supports multiple CSV separated values. Cannot be used with the `eventId` param. (0x-prefixed 64-hex string) | |
| `title` | `string` | | | Maximum length: 100 | Filter by market title. | |
| `eventId` | `integer[]` | | | | The event id of the event in question. Supports multiple CSV separated values. Returns positions for all markets for those event ids. Cannot be used with the `market` param. | |
| `limit` | `integer` | | `50` | `0 <= x <= 500` | The max number of positions to return. | |
| `offset` | `integer` | | `0` | `0 <= x <= 10000` | The starting index for pagination. | |
| `sortBy` | `enum<string>` | | `REALIZEDPNL` | | The sort criteria. Available options: `REALIZEDPNL`, `TITLE`, `PRICE`, `AVGPRICE`. | |
| `sortDirection` | `enum<string>` | | `DESC` | | The sort direction. Available options: `ASC`, `DESC`. | |

### Response (200 Success - `application/json`)

```json
[
  {
    "proxyWallet": "0x5adf695a088172a920b6d0b2e5b7d88aa8ffa5e7",
    "asset": "105862139550598651869144991581649266505740323692381441468334576128241388255355",
    "conditionId": "0x078c6aac96ffa529781967e5608484735cef2a1668804653f70a8a9f77e80142",
    "avgPrice": 0.31604501945997504,
    "totalBought": 1390.634362,
    "realizedPnl": 255.814616,
    "curPrice": 0,
    "title": "Orioles vs. Yankees",
    "slug": "mlb-bal-nyy-2025-09-27",
    "icon": "https://polymarket-upload.s3.us-east-2.amazonaws.com/Repetitive-markets/MLB.jpg",
    "eventSlug": "mlb-bal-nyy-2025-09-27",
    "outcome": "Orioles",
    "outcomeIndex": 0,
    "oppositeOutcome": "Yankees",
    "oppositeAsset": "21098470966028966930663125053209505279564548160002102091763058078727565449356",
    "endDate": "2025-10-04T00:00:00Z"
  },
  ...
]
```

#### Response Fields

| Field | Type | Description | Example |
| :--- | :--- | :--- | :--- |
| `proxyWallet` | `string` | User Profile Address (0x-prefixed, 40 hex chars) | `"0x56687bf447db6ffa42ffe2204a05edaa20f55839"` |
| `asset` | `string` | | |
| `conditionId` | `string` | 0x-prefixed 64-hex string | `"0xdd22472e552920b8438158ea7238bfadfa4f736aa4cee91a6b86c39ead110917"` |
| `avgPrice` | `number` | | |
| `totalBought` | `number` | | |
| `realizedPnl` | `number` | | |
| `curPrice` | `number` | | |
| `title` | `string` | | |
| `slug` | `string` | | |
| `icon` | `string` | | |
| `eventSlug` | `string` | | |
| `outcome` | `string` | | |
| `outcomeIndex` | `integer` | | |
| `oppositeOutcome` | `string` | | |
| `oppositeAsset` | `string` | | |
| `endDate` | `string` | | |

# Polymarket TS CLOB Client

```ts
//npm install @polymarket/clob-client
//npm install ethers

//Client initialization example and dumping API Keys

import { ApiKeyCreds, ClobClient, OrderType, Side, } from "@polymarket/clob-client";
import { Wallet } from "@ethersproject/wallet";

const host = 'https://clob.polymarket.com';
const funder = '';//This is your Polymarket Profile Address, where you send UDSC to. 
const signer = new Wallet(""); //This is your Private Key. If using email login export from https://reveal.magic.link/polymarket otherwise export from your Web3 Application


//In general don't create a new API key, always derive or createOrDerive
const creds = new ClobClient(host, 137, signer).createOrDeriveApiKey();

//0: Browser Wallet(Metamask, Coinbase Wallet, etc)
//1: Magic/Email Login
const signatureType = 1; 
  (async () => {
    const clobClient = new ClobClient(host, 137, signer, await creds, signatureType, funder);
    const resp2 = await clobClient.createAndPostOrder(
        {
            tokenID: "", //Use https://docs.polymarket.com/developers/gamma-markets-api/get-markets to grab a sample token
            price: 0.01,
            side: Side.BUY,
            size: 5,
        },
        { tickSize: "0.001",negRisk: false }, //You'll need to adjust these based on the market. Get the tickSize and negRisk T/F from the get-markets above
        //{ tickSize: "0.001",negRisk: true },

        OrderType.GTC, 
    );
    console.log(resp2)
  })();
  ```
]]>
</file>
<file path=".dev/docs/manual-poly-gamma.md">
<![CDATA[
## Polymarket API Documentation: List Events

This page documents the **List events** API endpoint for Polymarket, which allows retrieving a list of prediction markets (events).

### API Endpoint

| Method | Path      | Base URL                           | Purpose     |
| :----- | :-------- | :--------------------------------- | :---------- |
| `GET`  | `/events` | `https://gamma-api.polymarket.com` | List events |

### Query Parameters

The endpoint supports various parameters for filtering, sorting, and pagination:

| Parameter                                | Type                    | Description                                                        |
| :--------------------------------------- | :---------------------- | :----------------------------------------------------------------- |
| `limit`, `offset`                        | `integer`               | Pagination controls.                                               |
| `order`, `ascending`                     | `string`, `boolean`     | Sorting parameters.                                                |
| `id`, `slug`                             | `integer[]`, `string[]` | Filter by specific event IDs or slugs.                             |
| `tag_id`, `exclude_tag_id`               | `integer`               | Filter by associated tags.                                         |
| `featured`, `closed`, `cyom`             | `boolean`               | Filter by status (e.g., featured, closed, Create Your Own Market). |
| `start_date_min/max`, `end_date_min/max` | `string<date-time>`     | Filter events by date range.                                       |
| `include_chat`, `include_template`       | `boolean`               | Include associated chat or template data.                          |

### Response Structure (Event Object)

The API returns a list of event objects (JSON array), each containing extensive data. Key fields include:

| Field                                        | Type                | Description                                                                |
| :------------------------------------------- | :------------------ | :------------------------------------------------------------------------- |
| `id`, `ticker`, `slug`, `title`              | `string`            | Basic identification and display data.                                     |
| `startDate`, `endDate`                       | `string<date-time>` | Event timeline.                                                            |
| `active`, `closed`, `featured`, `restricted` | `boolean`           | Event status indicators.                                                   |
| `liquidity`, `volume`, `openInterest`        | `number`            | Market financial metrics.                                                  |
| `markets`                                    | `object[]`          | Nested array containing detailed market objects associated with the event. |
| `series`                                     | `object[]`          | Nested array containing series information the event belongs to.           |
| `categories`, `tags`                         | `object[]`          | Categorization and tagging data.                                           |
| `volume24hr`, `volume1wk`, etc.              | `number`            | Volume data across different timeframes.                                   |

#### Nested Market Object Fields

Each `market` within an event includes details such as: `question`, `conditionId`, `endDate`, `marketType`, `volumeNum`, `liquidityNum`, pricing information (`lastTradePrice`, `bestBid`, `bestAsk`), and various status flags.

### Example Output

```json
[
    {
        "id": 57116,
        "ticker": "nhl-metropolitan-division-winner",
        "slug": "nhl-metropolitan-division-winner-831",
        "title": "NHL: Metropolitan Division Winner",
        "description": "This market will resolve according to the team that wins the listed division during the 2025-26 NHL regular season.\n\nIf at any point it becomes impossible for a listed team to win its division (e.g., mathematical elimination before season end), the relevant market will resolve immediately to “No.”\n\nIf the 2025-26 NHL season is permanently canceled or has not been completed by June 30, 2026, 11:59 PM ET, this market will resolve to “Other.”",
        "resolutionSource": "",
        "startDate": "2025-10-10T00:34:45.548328Z",
        "creationDate": "2025-10-10T00:34:45.548322Z",
        "endDate": "2026-04-30T00:00:00Z",
        "image": "https://polymarket-upload.s3.us-east-2.amazonaws.com/nhl-metropolitan-division-winner-831-BiOhOAV6ln-4.png",
        "icon": "https://polymarket-upload.s3.us-east-2.amazonaws.com/nhl-metropolitan-division-winner-831-BiOhOAV6ln-4.png",
        "active": true,
        "closed": false,
        "archived": false,
        "new": false,
        "featured": false,
        "restricted": true,
        "liquidity": 9680,
        "openInterest": 0,
        "sortBy": "price",
        "createdAt": "2025-10-09T20:29:37.053812Z",
        "updatedAt": "2025-10-10T05:46:11.123915Z",
        "competitive": 0.8470089994706194,
        "enableOrderBook": true,
        "liquidityClob": 9680,
        "negRisk": true,
        "negRiskMarketID": "0xc1bd6e88f5a19d4d451188f8e9a78952e48db9676aedcba4573b8dd271d79600",
        "commentCount": 0,
        "markets": [
            {
                "id": 629070,
                "question": "Will the Carolina Hurricanes win the Metropolitan Division?",
                "conditionId": "0xa998022efc89d60331ac15e78103dafd765e65eaea433405638c4e293d2b0fa6",
                "slug": "will-the-carolina-hurricanes-win-the-metropolitan-division-123",
                "endDate": "2026-04-30T00:00:00Z",
                "liquidity": 300,
                "startDate": "2025-10-10T00:23:22.977509Z",
                "image": "https://polymarket-upload.s3.us-east-2.amazonaws.com/nhl-metropolitan-division-winner-831-BiOhOAV6ln-4.png",
                "icon": "https://polymarket-upload.s3.us-east-2.amazonaws.com/nhl-metropolitan-division-winner-831-BiOhOAV6ln-4.png",
                "description": "This market will resolve according to the team that wins the listed division during the 2025-26 NHL regular season.\n\nIf at any point it becomes impossible for a listed team to win its division (e.g., mathematical elimination before season end), the relevant market will resolve immediately to “No.”\n\nIf the 2025-26 NHL season is permanently canceled or has not been completed by June 30, 2026, 11:59 PM ET, this market will resolve to “Other.”",
                "outcomes": ["Yes", "No"],
                "outcomePrices": ["0.35", "0.65"],
                "active": true,
                "closed": false,
                "marketMakerAddress": "",
                "createdAt": "2025-10-09T20:29:37.904431Z",
                "updatedAt": "2025-10-10T05:42:19.24627Z",
                "new": false,
                "featured": false,
                "submitted_by": "0x91430CaD2d3975766499717fA0D66A78D814E5c5",
                "archived": false,
                "resolvedBy": "0x2F5e3684cb1F318ec51b00Edba38d79Ac2c0aA9d",
                "restricted": true,
                "groupItemTitle": "Carolina Hurricanes",
                "groupItemThreshold": 0,
                "questionID": "0xc1bd6e88f5a19d4d451188f8e9a78952e48db9676aedcba4573b8dd271d79600",
                "enableOrderBook": true,
                "orderPriceMinTickSize": 0.01,
                "orderMinSize": 5,
                "liquidityNum": 300,
                "endDateIso": "2026-04-30",
                "startDateIso": "2025-10-10",
                "hasReviewedDates": true,
                "clobTokenIds": [
                    "63645197726705524606059371558162512012201160965301656466640547461234264539392",
                    "5617477483144744882677399661863606310473044785725076606563294855884593377840"
                ],
                "umaBond": 500,
                "umaReward": 5,
                "liquidityClob": 300,
                "customLiveness": 0,
                "acceptingOrders": true,
                "negRisk": true,
                "negRiskMarketID": "0xc1bd6e88f5a19d4d451188f8e9a78952e48db9676aedcba4573b8dd271d79600",
                "negRiskRequestID": "0x9b2ab6a19ab61ed010aa5fe60f474283affc335829f807d6b5e5901f7de69661",
                "ready": false,
                "funded": false,
                "acceptingOrdersTimestamp": "2025-10-10T00:23:01Z",
                "cyom": false,
                "competitive": 0.293398533007335,
                "pagerDutyNotificationEnabled": false,
                "approved": true,
                "rewardsMinSize": 0,
                "rewardsMaxSpread": 0,
                "spread": 0.7,
                "bestAsk": 0.7,
                "automaticallyActive": true,
                "clearBookOnStart": true,
                "showGmpSeries": false,
                "showGmpOutcome": false,
                "manualActivation": false,
                "negRiskOther": false,
                "umaResolutionStatuses": [],
                "pendingDeployment": false,
                "deploying": false,
                "deployingTimestamp": "2025-10-10T00:11:25.336806Z",
                "rfqEnabled": false,
                "holdingRewardsEnabled": false,
                "feesEnabled": false
            }
        ],
        "tags": [
            {
                "id": 1,
                "label": "Sports",
                "slug": "sports",
                "forceShow": false,
                "publishedAt": "2023-10-24T22:37:50.296Z",
                "updatedBy": 15,
                "createdAt": "2023-10-24T22:37:50.31Z",
                "updatedAt": "2024-07-05T21:07:21.800664Z",
                "forceHide": true
            },
            {
                "id": 899,
                "label": "NHL",
                "slug": "nhl",
                "forceShow": false,
                "publishedAt": "2024-01-22T17:16:28.432Z",
                "createdAt": "2024-01-22T17:16:28.449Z",
                "updatedAt": "2024-05-30T22:36:11.118646Z"
            },
            {
                "id": 100088,
                "label": "Hockey",
                "slug": "hockey",
                "cyom": false,
                "showAllOutcomes": true,
                "showMarketImages": false,
                "enableNegRisk": true,
                "automaticallyActive": true,
                "gmpChartMode": "default",
                "negRiskAugmented": true,
                "pendingDeployment": false,
                "deploying": false,
                "deployingTimestamp": "2025-10-10T00:08:05.814235Z"
            }
        ]
    },
    ...
]
```

]]>
</file>
<file path=".dev/docs/manual-poly-rtds.md">
<![CDATA[
# Real-Time Data Client

Client wrapper for `real-time-data-streaming` **WebSocket**.

## Quickstart

```ts
import { RealTimeDataClient } from "../src/client";
import { Message } from "../src/model";

const onMessage = (m: Message) => console.log(m.topic, m.type, m.payload);

const onConnect = (client: RealTimeDataClient) => {
  client.subscribe({
    subscriptions: [
      {
        topic: "comments",
        type: "*", // all types for topic
        filters: `{"parentEntityID":100,"parentEntityType":"Event"}`, // empty = no filter
      },
    ],
  });
};

new RealTimeDataClient({ onMessage, onConnect }).connect();
```

## Subscriptions

> After connection, use the same `client: RealTimeDataClient`.

### Subscribe

```ts
// activity.trades
client.subscribe({ subscriptions: [{ topic: "activity", type: "trades" }] });

// all comment types
client.subscribe({ subscriptions: [{ topic: "comments", type: "*" }] });
```

### Unsubscribe

> Unsubscribe from `activity.trades` (if `*` was used earlier, this removes only `trades`).

```ts
client.unsubscribe?.({ // if supported; same shape as subscribe
  subscriptions: [{ topic: "activity", type: "trades" }],
});

// If the client uses subscribe-with-action pattern:
client.subscribe({
  subscriptions: [{ topic: "activity", type: "trades" }],
  action: "unsubscribe",
});
```

### Disconnect

```ts
client.disconnect();
```

## Message Matrix

| Topic                     | Type               | Auth     | Filters (empty = none)                                          | Schema                              | Subscription Handler                          |
| ------------------------- | ------------------ | -------- | --------------------------------------------------------------- | ----------------------------------- | --------------------------------------------- |
| `activity`                | `trades`           | -        | `{"event_slug":"string"}` **OR** `{"market_slug":"string"}`     | [`Trade`](#trade)                   |                                               |
| `activity`                | `orders_matched`   | -        | `{"event_slug":"string"}` **OR** `{"market_slug":"string"}`     | [`Trade`](#trade)                   |                                               |
| `comments`                | `comment_created`  | -        | `{"parentEntityID":number,"parentEntityType":"Event / Series"}` | [`Comment`](#comment)               |                                               |
| `comments`                | `comment_removed`  | -        | same as above                                                   | [`Comment`](#comment)               |                                               |
| `comments`                | `reaction_created` | -        | same as above                                                   | [`Reaction`](#reaction)             |                                               |
| `comments`                | `reaction_removed` | -        | same as above                                                   | [`Reaction`](#reaction)             |                                               |
| `rfq`                     | `request_created`  | -        | -                                                               | [`Request`](#request)               |                                               |
| `rfq`                     | `request_edited`   | -        | -                                                               | [`Request`](#request)               |                                               |
| `rfq`                     | `request_canceled` | -        | -                                                               | [`Request`](#request)               |                                               |
| `rfq`                     | `request_expired`  | -        | -                                                               | [`Request`](#request)               |                                               |
| `rfq`                     | `quote_created`    | -        | -                                                               | [`Quote`](#quote)                   |                                               |
| `rfq`                     | `quote_edited`     | -        | -                                                               | [`Quote`](#quote)                   |                                               |
| `rfq`                     | `quote_canceled`   | -        | -                                                               | [`Quote`](#quote)                   |                                               |
| `rfq`                     | `quote_expired`    | -        | -                                                               | [`Quote`](#quote)                   |                                               |
| `crypto_prices`           | `update`           | -        | `{"symbol":string}`                                             | [`CryptoPrice`](#cryptoprice)       | [`CryptoPriceHistorical`](#initial-data-dump) |
| `crypto_prices_chainlink` | `update`           | -        | `{"symbol":string}`                                             | [`CryptoPrice`](#cryptoprice)       | [`CryptoPriceHistorical`](#initial-data-dump) |
| `clob_user`               | `order`            | ClobAuth | -                                                               | [`Order`](#order)                   |                                               |
| `clob_user`               | `trade`            | ClobAuth | -                                                               | [`Trade (CLOB User)`](#trade-1)     |                                               |
| `clob_market`             | `price_change`     | -        | `["100","200",...]` **(mandatory)**                             | [`PriceChanges`](#pricechanges)     |                                               |
| `clob_market`             | `agg_orderbook`    | -        | `["100","200",...]`                                             | [`AggOrderbook`](#aggorderbook)     | [`AggOrderbook`](#aggorderbook)               |
| `clob_market`             | `last_trade_price` | -        | `["100","200",...]`                                             | [`LastTradePrice`](#lasttradeprice) |                                               |
| `clob_market`             | `tick_size_change` | -        | `["100","200",...]`                                             | [`TickSizeChange`](#ticksizechange) |                                               |
| `clob_market`             | `market_created`   | -        | -                                                               | [`ClobMarket`](#clobmarket)         |                                               |
| `clob_market`             | `market_resolved`  | -        | -                                                               | [`ClobMarket`](#clobmarket)         |                                               |

## Auth

### ClobAuth

```ts
export interface ClobApiKeyCreds {
  key: string;        // API key
  secret: string;     // API secret
  passphrase: string; // Passphrase
}
```

```ts
client.subscribe({
  subscriptions: [
    {
      topic: "clob_user",
      type: "*",
      clob_auth: {
        key: "xxxxxx-xxxx-xxxxx-xxxx-xxxxxx",
        secret: "xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx",
        passphrase: "xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx",
      },
    },
  ],
});
```

## Schemas

### Activity

#### Trade

| Name              | Type    | Description                   |
| ----------------- | ------- | ----------------------------- |
| `asset`           | string  | ERC1155 token ID traded       |
| `bio`             | string  | Trader’s bio                  |
| `conditionId`     | string  | Market/CTF condition ID       |
| `eventSlug`       | string  | Event slug                    |
| `icon`            | string  | Market icon URL               |
| `name`            | string  | Trader’s name                 |
| `outcome`         | string  | Human-readable market outcome |
| `outcomeIndex`    | integer | Outcome index                 |
| `price`           | float   | Trade price                   |
| `profileImage`    | string  | Trader profile image URL      |
| `proxyWallet`     | string  | Trader proxy wallet           |
| `pseudonym`       | string  | Trader pseudonym              |
| `side`            | string  | `BUY` / `SELL`                |
| `size`            | integer | Trade size                    |
| `slug`            | string  | Market slug                   |
| `timestamp`       | integer | Trade timestamp               |
| `title`           | string  | Event title                   |
| `transactionHash` | string  | Tx hash                       |

### Comments

#### Comment

| Name               | Type   | Description         |
| ------------------ | ------ | ------------------- |
| `id`               | string | Comment ID          |
| `body`             | string | Content             |
| `parentEntityType` | string | `Event` or `Series` |
| `parentEntityID`   | number | Parent ID           |
| `parentCommentID`  | string | Parent comment ID   |
| `userAddress`      | string | User address        |
| `replyAddress`     | string | Reply user address  |
| `createdAt`        | string | Created timestamp   |
| `updatedAt`        | string | Updated timestamp   |

#### Reaction

| Name           | Type   | Description       |
| -------------- | ------ | ----------------- |
| `id`           | string | Reaction ID       |
| `commentID`    | number | Comment ID        |
| `reactionType` | string | Reaction type     |
| `icon`         | string | Reaction icon     |
| `userAddress`  | string | User address      |
| `createdAt`    | string | Created timestamp |

### RFQ

#### Request

| Name           | Type   | Description                 |
| -------------- | ------ | --------------------------- |
| `requestId`    | string | Request ID                  |
| `proxyAddress` | string | User proxy                  |
| `market`       | string | Market/CTF condition ID     |
| `token`        | string | ERC1155 token ID            |
| `complement`   | string | Complement ERC1155 token ID |
| `state`        | string | Current state               |
| `side`         | string | Buy/Sell                    |
| `sizeIn`       | number | Input size                  |
| `sizeOut`      | number | Output size                 |
| `price`        | number | Implied price               |
| `expiry`       | number | UNIX expiry                 |

#### Quote

| Name           | Type   | Description                 |
| -------------- | ------ | --------------------------- |
| `quoteId`      | string | Quote ID                    |
| `requestId`    | string | Linked request ID           |
| `proxyAddress` | string | User proxy                  |
| `token`        | string | ERC1155 token ID            |
| `state`        | string | Current state               |
| `side`         | string | Buy/Sell                    |
| `sizeIn`       | number | Input size                  |
| `sizeOut`      | number | Output size                 |
| `condition`    | string | Market/CTF condition ID     |
| `complement`   | string | Complement ERC1155 token ID |
| `expiry`       | number | UNIX expiry                 |

### CryptoPrice

| Name        | Type   | Description    |
| ----------- | ------ | -------------- |
| `symbol`    | string | Asset symbol   |
| `timestamp` | number | ms since epoch |
| `value`     | number | Price value    |

**Filters:** `{"symbol":"btcusdt"}`, `{"symbol":"ethusdt"}`, `{"symbol":"xrpusdt"}`, `{"symbol":"solusdt"}`

#### Initial data dump

On connection with a filter, server sends a snapshot:

* `symbol: string`
* `data: Array<{ timestamp: number; value: number }>`
  (See also: used by `crypto_prices` and `crypto_prices_chainlink`.)

### CLOB User

#### Order

| Name            | Type               | Description                           |
| --------------- | ------------------ | ------------------------------------- |
| `asset_id`      | string             | ERC1155 token ID                      |
| `created_at`    | string (timestamp) | UNIX creation                         |
| `expiration`    | string (timestamp) | UNIX expiration                       |
| `id`            | string             | Order hash                            |
| `maker_address` | string             | Funder address                        |
| `market`        | string             | Condition/market ID                   |
| `order_type`    | string             | `GTC` `GTD` `FOK` `FAK`               |
| `original_size` | string             | Size at placement                     |
| `outcome`       | string             | `YES` / `NO`                          |
| `owner`         | string             | Owner UUID                            |
| `price`         | string             | Decimal price                         |
| `side`          | string             | `BUY` / `SELL`                        |
| `size_matched`  | string             | Matched amount                        |
| `status`        | string             | e.g., `MATCHED`                       |
| `type`          | string             | `PLACEMENT` `CANCELLATION` `FILL` ... |

#### Trade (CLOB User)

| Name               | Type               | Description             |
| ------------------ | ------------------ | ----------------------- |
| `asset_id`         | string             | ERC1155 token ID        |
| `fee_rate_bps`     | string             | Fee rate (bps)          |
| `id`               | string             | Match ID                |
| `last_update`      | string (timestamp) | UNIX last update        |
| `maker_address`    | string             | Maker address           |
| `maker_orders`     | array              | See below               |
| `market`           | string             | Condition/market ID     |
| `match_time`       | string (timestamp) | UNIX execution          |
| `outcome`          | string             | `YES` / `NO`            |
| `owner`            | string             | Taker UUID              |
| `price`            | string             | Decimal price           |
| `side`             | string             | Taker side `BUY`/`SELL` |
| `size`             | string             | Total matched size      |
| `status`           | string             | e.g., `MINED`           |
| `taker_order_id`   | string             | Taker order ID          |
| `transaction_hash` | string             | Settlement tx           |

**`maker_orders` (array items)**

| Name             | Type   | Description    |
| ---------------- | ------ | -------------- |
| `asset_id`       | string | Maker token ID |
| `fee_rate_bps`   | string | Maker fee bps  |
| `maker_address`  | string | Maker address  |
| `matched_amount` | string | Amount matched |
| `order_id`       | string | Maker order ID |
| `outcome`        | string | `YES` / `NO`   |
| `owner`          | string | Maker UUID     |
| `price`          | string | Order price    |
| `side`           | string | `BUY` / `SELL` |

### CLOB Market

#### PriceChanges

| Name | Type               | Description           |
| ---- | ------------------ | --------------------- |
| `m`  | string             | Condition ID          |
| `pc` | array              | Price changes by book |
| `t`  | string (timestamp) | ms since epoch        |

**PriceChange (elements of `pc`)**

| Name | Type   | Description         |
| ---- | ------ | ------------------- |
| `a`  | string | `asset_id`          |
| `h`  | string | book snapshot hash  |
| `p`  | string | price (e.g., `0.5`) |
| `s`  | string | side `BUY`/`SELL`   |
| `si` | string | size at price       |
| `ba` | string | best ask            |
| `bb` | string | best bid            |

> **Filters required:** `["100","200",...]` (asset IDs).

#### AggOrderbook

| Name             | Type               | Description                    |
| ---------------- | ------------------ | ------------------------------ |
| `asks`           | array              | Aggregated asks `{price,size}` |
| `asset_id`       | string             | Asset ID                       |
| `bids`           | array              | Aggregated bids `{price,size}` |
| `hash`           | string             | Snapshot hash                  |
| `market`         | string             | Condition ID                   |
| `min_order_size` | string             | Min order size                 |
| `neg_risk`       | boolean            | NegRisk flag                   |
| `tick_size`      | string             | Min price increment            |
| `timestamp`      | string (timestamp) | ms since epoch                 |

**`asks`/`bids` item**
| `price`: string | `size`: string |

**Initial data dump:** on connection when filters used.

#### LastTradePrice

| Name           | Type   | Description    |
| -------------- | ------ | -------------- |
| `asset_id`     | string | Asset ID       |
| `fee_rate_bps` | string | Fee bps        |
| `market`       | string | Condition ID   |
| `price`        | string | Trade price    |
| `side`         | string | `BUY` / `SELL` |
| `size`         | string | Trade size     |

#### TickSizeChange

| Name            | Type   | Description              |
| --------------- | ------ | ------------------------ |
| `market`        | string | Condition ID             |
| `asset_id`      | string | Array of two ERC1155 IDs |
| `old_tick_size` | string | Previous tick            |
| `new_tick_size` | string | Updated tick             |

#### ClobMarket

| Name             | Type      | Description           |
| ---------------- | --------- | --------------------- |
| `market`         | string    | Condition ID          |
| `asset_ids`      | [2]string | Two ERC1155 asset IDs |
| `min_order_size` | string    | Min order size        |
| `tick_size`      | string    | Min price increment   |
| `neg_risk`       | boolean   | Negative risk         |

]]>
</file>
<file path=".dev/docs/manual-rate-limits.md">
<![CDATA[
POLYMARKET RATE LIMITS

API Rate Limits
​
How Rate Limiting Works
All rate limits are enforced using Cloudflare’s throttling system. When you exceed the maximum configured rate for any endpoint, requests are throttled rather than immediately rejected. This means:
Throttling: Requests over the limit are delayed/queued rather than dropped
Burst Allowances: Some endpoints allow short bursts above the sustained rate
Time Windows: Limits reset based on sliding time windows (e.g., per 10 seconds, per minute)
​
General Rate Limits
Endpoint	Limit	Notes
General Rate Limiting	5000 requests / 10s	Throttle requests over the maximum configured rate
”OK” Endpoint	50 requests / 10s	Throttle requests over the maximum configured rate
​
Data API Rate Limits
Endpoint	Limit	Notes
Data API (General)	100 requests / 10s	Throttle requests over the maximum configured rate
Data API (Alternative)	600 requests / 1 minute	1 hour block on violation
Data API /trades	30 requests / 10s	Throttle requests over the maximum configured rate
Data API “OK” Endpoint	10 requests / 10s	Throttle requests over the maximum configured rate
​
GAMMA API Rate Limits
Endpoint	Limit	Notes
GAMMA (General)	750 requests / 10s	Throttle requests over the maximum configured rate
GAMMA Get Comments	100 requests / 10s	Throttle requests over the maximum configured rate
GAMMA /events	100 requests / 10s	Throttle requests over the maximum configured rate
GAMMA /markets	100 requests / 10s	Throttle requests over the maximum configured rate
GAMMA /markets /events listing	100 requests / 10s	Throttle requests over the maximum configured rate
GAMMA Tags	100 requests / 10s	Throttle requests over the maximum configured rate
GAMMA Search	300 requests / 10s	Throttle requests over the maximum configured rate
​
CLOB API Rate Limits
​
General CLOB Endpoints
Endpoint	Limit	Notes
CLOB (General)	5000 requests / 10s	Throttle requests over the maximum configured rate
CLOB GET Balance Allowance	125 requests / 10s	Throttle requests over the maximum configured rate
CLOB UPDATE Balance Allowance	20 requests / 10s	Throttle requests over the maximum configured rate
​
CLOB Market Data
Endpoint	Limit	Notes
CLOB /book	200 requests / 10s	Throttle requests over the maximum configured rate
CLOB /books (website)	300 requests / 10s	Throttle requests over the maximum configured rate
CLOB /books	80 requests / 10s	Throttle requests over the maximum configured rate
CLOB /price	200 requests / 10s	Throttle requests over the maximum configured rate
CLOB /prices	80 requests / 10s	Throttle requests over the maximum configured rate
CLOB /midprice	200 requests / 10s	Throttle requests over the maximum configured rate
CLOB /midprices	80 requests / 10s	Throttle requests over the maximum configured rate
​
CLOB Ledger Endpoints
Endpoint	Limit	Notes
CLOB Ledger (/trades /orders /notifications /order)	300 requests / 10s	Throttle requests over the maximum configured rate
CLOB Ledger /data/orders	150 requests / 10s	Throttle requests over the maximum configured rate
CLOB Ledger /data/trades	150 requests / 10s	Throttle requests over the maximum configured rate
CLOB /notifications	125 requests / 10s	Throttle requests over the maximum configured rate
​
CLOB Markets & Pricing
Endpoint	Limit	Notes
CLOB Price History	100 requests / 10s	Throttle requests over the maximum configured rate
CLOB Markets	250 requests / 10s	Throttle requests over the maximum configured rate
CLOB Market Tick Size	50 requests / 10s	Throttle requests over the maximum configured rate
CLOB markets/0x	50 requests / 10s	Throttle requests over the maximum configured rate
CLOB /markets listing	100 requests / 10s	Throttle requests over the maximum configured rate
​
CLOB Authentication
Endpoint	Limit	Notes
CLOB API Keys	50 requests / 10s	Throttle requests over the maximum configured rate
​
CLOB Trading Endpoints
Endpoint	Limit	Notes
CLOB POST /order	2400 requests / 10s (240/s)	BURST - Throttle requests over the maximum configured rate
CLOB POST /order	24000 requests / 10 minutes (40/s)	Throttle requests over the maximum configured rate
CLOB POST /order (by token id)	800 requests / 10s (80/s)	BURST - Throttle requests over the maximum configured rate
CLOB POST /order (by token id)	12000 requests / 10 minutes (20/s)	Throttle requests over the maximum configured rate
CLOB DELETE /order	2400 requests / 10s (240/s)	BURST - Throttle requests over the maximum configured rate
CLOB DELETE /order	24000 requests / 10 minutes (40/s)	Throttle requests over the maximum configured rate
CLOB POST /orders	800 requests / 10s (80/s)	BURST - Throttle requests over the maximum configured rate
CLOB POST /orders	12000 requests / 10 minutes (20/s)	Throttle requests over the maximum configured rate
CLOB DELETE /orders	800 requests / 10s (80/s)	BURST - Throttle requests over the maximum configured rate
CLOB DELETE /orders	12000 requests / 10 minutes (20/s)	Throttle requests over the maximum configured rate
CLOB DELETE /cancel-all	200 requests / 10s (20/s)	BURST - Throttle requests over the maximum configured rate
CLOB DELETE /cancel-all	3000 requests / 10 minutes (5/s)	Throttle requests over the maximum configured rate
CLOB DELETE /cancel-market-orders	800 requests / 10s (80/s)	BURST - Throttle requests over the maximum configured rate
CLOB DELETE /cancel-market-orders	12000 requests / 10 minutes (20/s)	Throttle requests over the maximum configured rate
​
Other API Rate Limits
Endpoint	Limit	Notes
RELAYER /submit	15 requests / 1 minute	Throttle requests over the maximum configured rate
User PNL API	100 requests / 10s	Throttle requests over the maximum configured rate
Glossary

]]>
</file>
<file path=".dev/md/plans/2025/10/07/13-09-13_discord-bot-slash-commands.md">
<![CDATA[
## Plan: Discord Bot with Slash Commands (+Autocomplete) for Status, Logs, Portfolio, Positions, Position, Close, Close-All

## Proposed Plan

### ❌ Critical Information Needed

- Do you prefer commands registered as guild-only during development (`DISCORD_GUILD_ID`) or global? Guild scope updates instantly; global can take up to 1 hour to propagate. If not provided, we will use guild scope by default for faster DX.
- Do you already have a Discord Application and Bot set up with the correct OAuth2 scopes? Required: `bot` and `applications.commands`. If not, we will include setup steps.

### ⚠️ Initial Best Assumptions to Address Ambiguities

1. MODERATE: Command scope -> We will register commands to a single guild (via `DISCORD_GUILD_ID`) for immediate availability; we can add a `--global` flag later. Rationale: Faster iteration and safer testing.
2. MODERATE: Bot runtime -> We will run the bot in the same process as the app, started from `main-loop`, non-blocking. Rationale: Simpler deployment and resource sharing.
4. MODERATE: Autocomplete dataset size -> Position counts are small enough to compute suggestions on-demand via DB queries within Discord’s 3s initial response limit.
The Discord Bot is in COMPLETELY PRIVATE server where only owner has access. No need to implement allowlisting.

### ☁️ Current State

1. Node.js ≥20, TypeScript strict, pnpm. See `package.json`.
2. App runs as a long-lived process: entrypoint `src/index.ts` calls `run()` in `src/core/app/main-loop.ts`.
3. DB: PostgreSQL via Drizzle; key tables `position`, `copy_order`, `leader_trade`, etc. Helpers in `src/utils/external-helpers.ts` expose portfolio summary and formatting.
4. Event bus emits lifecycle and trading events (`src/core/domain/event.ts`). Discord notifications currently via webhook only (`src/notify/discord-webhook.ts`).
5. RTDS stream in `src/core/data-ingestion/polymarket-rtds.ts` exposes `lastRtdsMessageTimeMs` for connectivity telemetry.
6. No Discord Bot runtime yet (`src/rpc/discord-bot.ts` is empty).

### 🌟 Desired Goal State

1. A Discord Bot connected via Gateway with slash commands visible in the configured guild.
2. Slash commands:
   - `/status`: RTDS/WS connectivity, open positions count, current unrealized PnL, lifetime realized PnL.
   - `/logs [n]`: Return last N lines of humanized logs.
   - `/portfolio`: Portfolio summary (reuse existing formatting).
   - `/positions`: Table of current open positions with columns: ID, UPNL.
   - `/position [id]`: Detailed position view with extra fields (tokenId, Entry Price (Avg), Current Price, Unrealized PnL).
   - `/close [id]`: Force close a specific position by ID.
   - `/close-all`: Force close all running positions.
3. Autocomplete for commands needing IDs (e.g., `/position` and `/close`), suggesting open position IDs.
4. All responses ephemeral by default (for private UX), with emojis and clear formatting.
5. DRY, typed, and non-intrusive to the main trading flow (sub-50ms overhead preserved for critical paths).

Traceability: Each bullet maps to the user requirements list (status/logs/portfolio/positions/position/close/close-all, with autocomplete and emojis).

### 🛣️ Brainstorm Implementation Approaches

- Approach 1: Gateway bot using `discord.js` v14
  - Pros: No public HTTP ingress needed; interactions and autocompletes handled via Gateway. Rich typing and utilities.
  - Cons: Adds a runtime dependency and a background connection.
- Approach 2: HTTP-only Interactions (Outgoing Webhook)
  - Pros: No Gateway connection.
  - Cons: Requires public HTTPS endpoint and signature verification; more infra.
- Approach 3: Hybrid (Gateway for commands, Webhook for followups)
  - Pros: Flexibility.
  - Cons: Unnecessary complexity for this private, single-user bot.

Chosen Approach: 1 (Gateway + discord.js)
- Reasons: No server needed; straightforward slash command + autocomplete handling; quick iteration in a private project.

Rollback Strategy
- The bot starts only if `DISCORD_BOT_TOKEN` is present. No token → no bot runtime. Command registration is an explicit script; revert by deleting commands and removing token.

### 🗺️ Very Detailed Plan

1) Dependencies and Env
- Add deps: `discord.js`, `@discordjs/rest`, `discord-api-types`.
- Add env vars to `.env.*`:
  - `DISCORD_BOT_TOKEN`: Bot token
  - `DISCORD_APP_ID`: Application (client) ID
  - `DISCORD_GUILD_ID`: Guild ID (dev scope)

2) Command Definitions (single source of truth)
- Create `src/rpc/discord/commands.ts` exporting a typed array of command definitions and helpers for registration + runtime handling.
- Commands list:
  - `status` (no options)
  - `logs` options: integer `n` (1–500, default 100)
  - `portfolio` (no options)
  - `positions` (no options)
  - `position` options: integer `id` (required, with autocomplete)
  - `close` options: integer `id` (required, with autocomplete, guarded)
  - `close-all` (no options, guarded)

3) Registration Script
- Add `scripts/register-discord-commands.ts` using `@discordjs/rest` to upsert commands to the configured guild.
- CLI script in `package.json`: `pnpm discord:register:guild` (and optional `discord:register:global`).
- Reference: Application Commands API [Discord Application Commands](https://discord.com/developers/docs/interactions/application-commands).

4) Bot Runtime
- Implement `startDiscordBot(params)` in `src/rpc/discord-bot.ts`:
  - Construct a `Client` with `GatewayIntentBits.Guilds` only.
  - On `ready`, log success.
  - Handle `interactionCreate`:
    - If `isChatInputCommand()` → route by command name.
    - If `isAutocomplete()` → return suggestions for `position`/`close`.
  - Ephemeral initial responses (defer reply within 3s if needed). Reference: 3s initial response rule and ephemeral flags [Receiving and Responding](https://discord.com/developers/docs/interactions/receiving-and-responding).

5) Data Access & DRY helpers
- Reuse existing helpers from `src/utils/external-helpers.ts`:
  - `getPortfolioSummary(mode)` to compute Unrealized/Realized PnL and last-closed items.
  - `buildClosedPositionsSummaryMessage()` for `/portfolio` rendering.
- Logs: use `getLogTailSnapshot()` from `src/utils/logger.ts`; trim to last `n` lines (server-side split) and wrap in a code block.
- Status: compute RTDS status by checking `lastRtdsMessageTimeMs` staleness (e.g., idle > 60s = disconnected). Use DB counts for open positions and reuse `getPortfolioSummary` for PnL.
- Positions: query open positions, compute UPNL from `unrealizedPnlUsd`, and render a compact table (code block). Keep small width; show up to 100 rows; paginate later if needed.
- Position detail: join via `loadMetaForPosition(id)`; include tokenId, entry price avg, current price, unrealized PnL, leader and event link; add emojis.

6) Guarded Mutations
- Thread-safety: use the existing `IExecutionProvider` instance from `main-loop` by injecting it into `startDiscordBot`. Close operations call `executionProvider.closePosition({ positionId, reason: 'MANUAL', source: 'manual', ingestSource: 'manual' })`.
- Non-blocking: acknowledge with an ephemeral reply, then perform close; send follow-up ephemeral result (success/fail). Interaction token validity is 15 minutes—sufficient for follow-ups [Receiving and Responding](https://discord.com/developers/docs/interactions/receiving-and-responding).

7) Wire-up in Main Loop
- In `src/core/app/main-loop.ts`, after provider is ready and notifier/listeners registered, call `startDiscordBot({ executionProvider: provider, env, notifier })`. Ensure failures don’t crash the bot.

8) Metrics & Logging
- Log each command execution with timing and principal (Discord user). Keep logs concise.
- Emit counters via `incrementCounter('discord.command', { name: cmd })`.

9) Emojis & UX
- Use emojis for headings/status: ✅/🟥 for ok/fail, 📊 for stats, 🧮 for PnL, 📜 for logs, 🔧 for actions.
- Ephemeral replies by default to avoid channel noise. Offer a `public` boolean option later if needed.

10) Rate limits + Perf
- Autocomplete queries: limit to 20 suggestions and short labels (`"#123 · UPNL +1.23 USDC"`). Discord overall command content must stay under 8000 chars [Slash command limits](https://discord.com/developers/docs/interactions/application-commands#slash-commands).
- Defer initial replies when DB queries might exceed ~500ms; edit the reply when ready.

### 💻 Specs

Models / Schemas (no DB migrations needed)
- We reuse existing tables. Optionally, add a covering index later if `/positions` proves slow.

Classes
- `DiscordCommandRegistrar`
  - Purpose: Register commands to guild or global.
  - Methods:
    - `registerGuildCommands(appId: string, guildId: string, token: string, defs: RESTPostAPIApplicationCommandsJSONBody[]): Promise<void>`
    - `registerGlobalCommands(appId: string, token: string, defs: RESTPostAPIApplicationCommandsJSONBody[]): Promise<void>`

Functions (typed)
```ts
// src/rpc/discord/commands.ts
export type CommandName = 'status' | 'logs' | 'portfolio' | 'positions' | 'position' | 'close' | 'close-all';

export interface CommandContext {
    mode: import('@/core/domain/execution').ExecutionMode;
    executionProvider: import('@/core/domain/execution').IExecutionProvider;
}

export interface AutocompleteItem { name: string; value: number; }

export function buildSlashCommandDefs(): import('discord-api-types/v10').RESTPostAPIApplicationCommandsJSONBody[];
export function handleCommand(name: CommandName, options: Record<string, unknown>, ctx: CommandContext): Promise<{ content: string; ephemeral?: boolean }>;
export function handleAutocomplete(name: CommandName, focused: string, ctx: CommandContext): Promise<AutocompleteItem[]>;
```

Library Calls (Discord)
```ts
// Client runtime
import { Client, GatewayIntentBits, Partials, Interaction, AutocompleteInteraction, ChatInputCommandInteraction } from 'discord.js';

const client = new Client({ intents: [GatewayIntentBits.Guilds] });
client.on('ready', () => logger.success({ tag: 'discord-bot' }, 'Discord bot ready'));
client.on('interactionCreate', async (interaction: Interaction) => { /* route */ });
await client.login(process.env.DISCORD_BOT_TOKEN!);
```

```ts
// Registration via REST
import { REST, Routes } from 'discord.js';
const rest = new REST({ version: '10' }).setToken(token);
await rest.put(Routes.applicationGuildCommands(appId, guildId), { body: defs });
// For global:
await rest.put(Routes.applicationCommands(appId), { body: defs });
```

API Contracts (Discord)
- Slash commands and interactions per official docs: [Application Commands](https://discord.com/developers/docs/interactions/application-commands), [Receiving & Responding](https://discord.com/developers/docs/interactions/receiving-and-responding), [Autocomplete](https://discord.com/developers/docs/interactions/application-commands#autocomplete).
- Timeouts: initial response within 3s; tokens valid 15m for follow-ups.

Config & Feature Flags
- `DISCORD_BOT_TOKEN` (string, required to start bot). Example: `"Bot x.y.z"` token.
- `DISCORD_APP_ID` (string, required for registration).
- `DISCORD_GUILD_ID` (string, recommended for fast dev updates).

Observability
- Counters: `discord.command` { name }, `discord.autocomplete` { name }, `discord.error` { name }.
- Logs include latency and rows returned for DB-heavy calls.

Security
- Validate `n` for `/logs` (1–500). Validate `id` is numeric and belongs to current `mode` when acting.

Perf
- Autocomplete limited to 20 results; DB queries indexed fields.
- Use deferred replies for long ops.

### 📂 Files Involved

🟦 TO READ AND UNDERSTAND FIRST
- `/home/probi/swe/repo/polymarket-copy-bot/src/core/app/main-loop.ts` — wiring point to start the bot.
- `/home/probi/swe/repo/polymarket-copy-bot/src/utils/logger.ts` — getLogTailSnapshot.
- `/home/probi/swe/repo/polymarket-copy-bot/src/utils/external-helpers.ts` — portfolio summary helpers.
- `/home/probi/swe/repo/polymarket-copy-bot/src/core/data-ingestion/polymarket-rtds.ts` — `lastRtdsMessageTimeMs` for RTDS status.
- `/home/probi/swe/repo/polymarket-copy-bot/src/core/store/schema.ts` — position and related tables.

🟨 MODIFY
- `/home/probi/swe/repo/polymarket-copy-bot/package.json` — add deps and scripts (register commands).
- `/home/probi/swe/repo/polymarket-copy-bot/src/core/app/main-loop.ts` — call `startDiscordBot(...)` after provider ready.
- `/home/probi/swe/repo/polymarket-copy-bot/.env.*` — add new envs.

🟩 CREATE
- `/home/probi/swe/repo/polymarket-copy-bot/src/rpc/discord/commands.ts` — command defs/handlers.
- `/home/probi/swe/repo/polymarket-copy-bot/src/rpc/discord-bot.ts` — gateway client and router.
- `/home/probi/swe/repo/polymarket-copy-bot/scripts/register-discord-commands.ts` — one-off command registrar.

🟥 DELETE
- None.

### 🧭 Optional Visuals

```mermaid
sequenceDiagram
  participant User
  participant Discord
  participant Bot
  participant DB
  User->>Discord: /position id:123
  Discord->>Bot: InteractionCreate (3s window)
  Bot->>Discord: deferReply(ephemeral)
  Bot->>DB: select position + meta + current price
  DB-->>Bot: rows
  Bot->>Discord: editReply(details)
```

### 🌐 Helpful Tool Results (as tool’s session_id)
- Discord docs fetch: `smart_fetch_url_multiple/we_need_authoritative_details_for_discord_slash_commands_responses_and_autocomplete_to_write_an_accurate_plan_with_citations/z8ykatabeo`

### 📚 References
- Discord Application Commands (Slash Commands): https://discord.com/developers/docs/interactions/application-commands
- Receiving and Responding to Interactions (timeouts, ephemeral, followups): https://discord.com/developers/docs/interactions/receiving-and-responding
- Autocomplete: https://discord.com/developers/docs/interactions/application-commands#autocomplete

Why these: Official Discord developer docs ensure correct, current contracts and limits.

### ▶️ Plan Summary

1. Add `discord.js` + REST deps and env vars; register commands to guild.
2. Implement typed command defs, autocomplete, and handlers (DRY helpers reused).
3. Wire `startDiscordBot` into `main-loop` with injected `executionProvider` and `mode` context.
4. Implement guarded `/close` and `/close-all`; make replies ephemeral with emojis and tables.
5. Log/metrics for observability; keep all operations non-blocking and within 3s initial response.

### 🔴 IMPORTANT REMINDERS
- Initial reply within 3 seconds; use deferral if needed.
- Keep autocomplete to ≤20 items and concise labels.
- Protect close commands via user allowlist; default deny if not configured.
- Don’t block execution critical paths; bot runs independently and uses short DB queries.

]]>
</file>
<file path=".dev/md/plans/2025/10/07/do not change.md">
<![CDATA[
<|PLAN_FORMAT_START|>
# Plan: Discord Bot with Slash Commands, Autocomplete, and Portfolio Controls

## 👤 User's Original Message
Original User Message:
```txt
/PLAN_X 

- [ ]  Add Discord Bot (Important: Include emojis for UI and UX | Ensure you use the Discord Slash Commands API that has autocompletes for UX - not manual slash commands | Ensure DRY in code)
    - [ ]  /status - Returns bot states such as essential statuses like RTDS status (is connected/disconnected), WS statuses, Num Current Open Positions, Current Unrealized PnL, Lifetime Realized PnL
    - [ ]  /logs [n] - Returns last n lines of human logs
    - [ ]  /portfolio - Same as portfolio summary
    - [ ]  /positions - Returns all current running positions, table formatted
        - [ ]  Cols: ID, UPNL
    - [ ]  /position [id] - Returns position details. Format is same as Position Opened from Discord Webhook, but include token id/asset id below Market Link, and include Entry Price (Avg) below Entry Price, and include Current Price below Entry Price (Avg), and include Unrealized PNL below Current Price
    - [ ]  /close [id] - Force close pos by id
    - [ ]  /close-all - Force close all running pos
```

## Proposed Plan

### ❌ Critical Information Needed
None blocking. We can safely proceed with guild-scoped commands first to avoid global propagation delays.

### ⚠️ Initial Best Assumptions to Address Ambiguities
1. MODERATE: Discord bot token and application (client) ID will be provided via env. -> We'll add validated env vars and guard startup.
2. MODERATE: Commands will be registered per-guild in `local/test` envs and optionally globally for production. -> Provide scripts for both.
3. MODERATE: Max log lines `n` default to 50 if omitted; cap to 500 for safety. -> Prevent spam and meet UX.

### ☁️ Current State
1. TypeScript Node service with strict typing; pnpm; dotenvx; Drizzle PostgreSQL; main entry `src/index.ts` -> `run()` in `src/core/app/main-loop.ts`.
2. Discord Webhook notifications already exist in `src/notify/discord-webhook.ts` and listeners in `src/notify/listeners.ts`.
3. Utilities available:
   - `getLogTailSnapshot()` in `src/utils/logger.ts` for logs
   - Portfolio helpers in `src/utils/external-helpers.ts`: `getPortfolioSummary`, `buildClosedPositionsSummaryMessage`, `loadMetaForPosition`
4. Placeholder file `src/rpc/discord-bot.ts` (empty) ready for bot implementation.

### 🌟 Desired Goal State
1. Slash-command Discord bot running inside the same process as the main app (optional toggle), exposing:
   - `/status`, `/logs`, `/portfolio`, `/positions`, `/position`, `/close`, `/close-all`
2. Autocomplete UX for `/position` (id argument) and for `/logs n` numeric helper.
3. Responses use embeds, emojis, ephemeral responses where appropriate, and follow DRY helpers.
4. Commands registered per-guild in dev; script available for global production registration.

### 🛣️ Brainstorm Implementation Approaches
* Approach 1: Use discord.js v14 Client + REST registerer in-process.
  - Pros: Mature, typed, great docs; easy Autocomplete; resilient.
  - Cons: Adds dependency; needs gateway connection.
* Approach 2: Raw Discord REST/websocket implementation.
  - Pros: Minimal deps.
  - Cons: Reinventing client; higher maintenance.
* Approach 3: Separate microservice.
  - Pros: Isolation.
  - Cons: Extra infra, complexity.

Chosen Approach: 1 — discord.js v14 in-process for fastest delivery, rich features, and typings.

Rollback: Feature flag to disable the Discord bot without code removal; no DB migrations.

### 🗺️ Very Detailed Plan
1. Dependencies and env
   - Add `discord.js` and `@discordjs/rest`, `discord-api-types` to deps.
   - Env vars (validated in `src/core/config/env.ts`):
     - `DISCORD_BOT_TOKEN` (string, required when ENABLE_DISCORD_BOT=true)
     - `DISCORD_APP_ID` (string)
     - `DISCORD_GUILD_IDS` (comma-separated list for dev registration)
     - `ENABLE_DISCORD_BOT` (boolean; default false)
   - Rationale: Required to login a gateway client and register commands.

2. Command registration script (non-interactive CLI)
   - Create `scripts/discord-register-commands.ts`:
     - Reads commands built in `src/rpc/discord-bot.ts` (export JSON defs)
     - Uses REST `PUT` routes for guild(s) during local; global for production
     - Per docs: Register via HTTP; upsert behavior [Application Commands](https://discord.com/developers/docs/interactions/application-commands#registering-a-command). Limit: 25 options per command.

3. Bot runtime integration
   - Implement `src/rpc/discord-bot.ts`:
     - Export `startDiscordBot(env, deps): { stop(): Promise<void> }`
     - Inside: create `Client` with intents `Guilds` only; hook `interactionCreate`.
       - Autocomplete: detect `interaction.isAutocomplete()` and return suggestions.
       - Commands: detect `interaction.isChatInputCommand()` and route.
       - Use `interaction.reply({ embeds, flags: MessageFlags.Ephemeral })` for ephemeral where useful. `ephemeral` is deprecated; use `flags` [InteractionReplyOptions](https://discord.js.org/docs/packages/discord.js/stable/InteractionReplyOptions:Interface).

4. DRY helper layer for embeds and formatting
   - Create `src/rpc/discord/ui.ts`:
     - `embed(title, fields, color)` returning APIEmbed
     - Emoji constants; table builder for monospaced columns
     - `formatPositionDetails()` reusing `loadMetaForPosition` and helpers from `utils/external-helpers`

5. Implement commands
   - `/status`
     - Show: RTDS status (connected/disconnected) via `lastRtdsMessageTimeMs` age from `src/core/data-ingestion/polymarket-rtds.ts`, open positions count (DB), unrealized/realized via `getPortfolioSummary`.
   - `/logs n?`
     - Optional integer with autocomplete (suggest 25, 50, 100, 200, 500). Use `getLogTailSnapshot(maxChars)` and slice to n lines; return as code block. Cap n to 500.
   - `/portfolio`
     - Use `getPortfolioSummary` + `buildClosedPositionsSummaryMessage`, post embed.
   - `/positions`
     - Query open positions for current mode; render table with columns: ID, UPNL (current unrealized per position), include emojis.
   - `/position id`
     - Autocomplete id from recent open/closed positions; show embed: Market Link, Token/Asset ID, Entry Price, Entry Price (Avg), Current Price, Unrealized PnL.
   - `/close id`
     - Calls provider.closePosition with reason `MANUAL`, source `manual`.
   - `/close-all`
     - Iterate open positions; call closePosition with reason `MANUAL`.
   - All DB access via existing schema; mode aware (dry_run/live).

6. Autocomplete behavior
   - Use Discord Autocomplete per spec (focused option true; choices cannot co-exist) [Autocomplete](https://discord.com/developers/docs/interactions/application-commands#autocomplete).
   - `/position id` -> suggest top 25 open position IDs by recency; `/logs n` -> suggest list [25,50,100,200,500].

7. Safety, limits, and UX
   - Ephemeral responses for `/logs` and `/close*`; non-ephemeral for portfolio summaries.
   - Guard long outputs with truncation; log dev-only warnings when truncating.
   - Emojis: ✅/🟥/✳️/📈/📉/🧮/🧰 for sections.

8. Wire into main-loop
   - In `src/core/app/main-loop.ts`, after bot started event, conditionally start Discord bot if `ENABLE_DISCORD_BOT` true. Reuse notifier fields in logs, but keep separate.

9. Scripts
   - Add pnpm scripts:
     - `discord:register:guild` (per env GUILD_IDS)
     - `discord:register:global`
     - `discord:dev` (run bot with app)

10. Rollback
   - Set `ENABLE_DISCORD_BOT=false` to disable. Commands can remain registered; no runtime impact.

Traceability bullets:
- Slash commands + autocomplete → steps 2–6
- Status/logs/portfolio/positions/position/close/close-all → step 5
- Emojis, embeds, UX → steps 4–5,7
- DRY → step 4

### 💻 Specs

Models / Schemas: no DB schema changes.

Classes
```ts
// src/rpc/discord-bot.ts
export interface DiscordBotDeps {
    getMode(): 'dry_run' | 'live';
    closePosition(args: { positionId: number }): Promise<void>;
}
export function startDiscordBot(env: Env, deps: DiscordBotDeps): Promise<{ stop(): Promise<void> }>; // starts client, registers handlers
```

Functions
```ts
// src/rpc/discord/ui.ts
export function buildEmbed(params: { title: string; description?: string; fields?: { name: string; value: string; inline?: boolean }[]; color?: number }): APIEmbed;
export function table(columns: string[], rows: string[][]): string; // returns monospaced table inside ```
export function positionDetailEmbed(positionId: number): Promise<APIEmbed>; // uses loadMetaForPosition, DB reads
```

Libraries Involved
- discord.js v14 — Client, events, embed building, interaction replies [(Client)](https://discord.js.org/docs/packages/discord.js/stable/Client:Class)
- Discord Dev Portal — command registration/Autocomplete [(Application Commands)](https://discord.com/developers/docs/interactions/application-commands), [(Autocomplete)](https://discord.com/developers/docs/interactions/application-commands#autocomplete)

API Call Snippets
```ts
// Register per-guild
await rest.put(
  Routes.applicationGuildCommands(appId, guildId),
  { body: commands }
);

// Global
await rest.put(
  Routes.applicationCommands(appId),
  { body: commands }
);
```

Reply Options
```ts
// Ephemeral reply in v14: prefer flags
await interaction.reply({
  content: 'Done',
  flags: MessageFlags.Ephemeral,
});
```

Config & Feature Flags
```ts
// src/core/config/env.ts additions
DISCORD_BOT_TOKEN: z.string().optional(),
DISCORD_APP_ID: z.string().optional(),
DISCORD_GUILD_IDS: z.string().optional(), // comma list
ENABLE_DISCORD_BOT: z.string().optional().transform(v => v ? v.toLowerCase() === 'true' : false),
```

Observability
- Counters: `discord.commands.invoked`, `discord.commands.error`
- Logs around registration and interaction handling.

### 📂 Files Involved

🟦 TO READ FIRST
- `/home/probi/swe/repo/polymarket-copy-bot/src/utils/logger.ts` — logs snapshot helper
- `/home/probi/swe/repo/polymarket-copy-bot/src/utils/external-helpers.ts` — portfolio and meta helpers
- `/home/probi/swe/repo/polymarket-copy-bot/src/core/app/main-loop.ts` — startup wiring

🟨 MODIFY
- `/home/probi/swe/repo/polymarket-copy-bot/src/core/config/env.ts` — add envs
- `/home/probi/swe/repo/polymarket-copy-bot/src/core/app/main-loop.ts` — start bot when enabled
- `/home/probi/swe/repo/polymarket-copy-bot/package.json` — add scripts and deps

🟩 CREATE
- `/home/probi/swe/repo/polymarket-copy-bot/src/rpc/discord-bot.ts` — bot runtime
- `/home/probi/swe/repo/polymarket-copy-bot/src/rpc/discord/ui.ts` — embeds/tables DRY
- `/home/probi/swe/repo/polymarket-copy-bot/scripts/discord-register-commands.ts` — registration CLI

🟥 DELETE
- None

### 🧭 Optional Visuals

```mermaid
sequenceDiagram
    participant User
    participant Discord
    participant Bot
    participant DB
    User->>Discord: /position 123
    Discord->>Bot: interactionCreate (ChatInput)
    Bot->>DB: loadMetaForPosition(123)
    DB-->>Bot: meta, prices, pnl
    Bot-->>Discord: reply embed (non-ephemeral)
```

### 🌐 Helpful Tool Results (as tool’s session_id)
- Docs: smart_fetch_url_multiple/fetch_official_docs_pages_to_cite_and_ensure_correct_apis_for_discord_slash_commands_deployment_and_autocomplete/mp69lsskz8
- Docs: smart_fetch_url_multiple/collect_official_docs_citations_for_implementing_discord_slash_commands_autocomplete_and_reply_flags_in_discord_js_v14_and_discord_dev_portal/j5yw1fqqgx
- Repo scan: codebase_search/find_existing_placeholders_or_integration_points_for_discord_bot/gvmpzsdxt4
- Repo scan: codebase_search/locate_functions_for_logs_and_portfolio_summary/94tytxcxjo

### 📚 References
- Discord Application Commands (Slash, Autocomplete, Limits): https://discord.com/developers/docs/interactions/application-commands
- discord.js InteractionReplyOptions (ephemeral flags): https://discord.js.org/docs/packages/discord.js/stable/InteractionReplyOptions:Interface
- discord.js Client interactionCreate event: https://discord.js.org/docs/packages/discord.js/stable/Client:Class

### ▶️ Plan Summary
1. Add envs + dependencies; create registration script.
2. Implement `startDiscordBot` with handlers for ChatInput and Autocomplete.
3. Build DRY UI helpers and all requested commands.
4. Wire the bot under a feature flag; add pnpm scripts for registration.
5. Deploy guild-scoped in dev; optional global in prod.

### 🔴 IMPORTANT REMINDERS
- Don’t mix `choices` with `autocomplete` on the same option (Discord spec).
- Use `flags: MessageFlags.Ephemeral` in replies, not deprecated `ephemeral`.
- Cap outputs and use ephemeral for sensitive responses.
<|PLAN_FORMAT_END|>

]]>
</file>
<file path="scripts/register-discord-commands.ts">
<![CDATA[
import { loadDiscordEnv } from '@/core/config/env-discord';
import { buildSlashCommandDefs } from '@/rpc/discord/discord-commands';
import { createLogger } from '@/utils/telemetry/logger';

const logger = createLogger({ tag: 'discord.register' });

async function sleep(ms: number): Promise<void> {
    await new Promise((resolve) => setTimeout(resolve, ms));
}

async function putRawJson(url: string, token: string, payloadJson: string, label: string): Promise<void> {
    let attempts = 0;
    while (true) {
        const res = await fetch(url, {
            method: 'PUT',
            headers: {
                'Content-Type': 'application/json',
                Authorization: `Bot ${token}`,
            },
            body: payloadJson,
        });
        if (res.status === 429) {
            const h1 = res.headers.get('retry-after');
            const h2 = res.headers.get('x-ratelimit-reset-after');
            const retryMs = Math.max(0, Math.ceil(parseFloat(h1 ?? h2 ?? '1') * 1000));
            attempts += 1;
            logger.warn({ label, attempts, retryMs }, 'rate_limited_retry');
            if (attempts > 5) {
                throw new Error(`Discord rate limit: exceeded retries for ${label}`);
            }
            await sleep(retryMs);
            continue;
        }
        if (!res.ok) {
            const body = await res.text();
            throw new Error(`Discord API error (${label}): ${res.status} ${body}`);
        }
        return;
    }
}

async function main(): Promise<void> {
    const env = loadDiscordEnv();
    const scopeArg = process.argv.find((a) => a.startsWith('--scope=')) ?? '--scope=guild';
    const scope = scopeArg.split('=')[1] ?? 'guild';

    const token = env.DISCORD_BOT_TOKEN;
    const appId = env.DISCORD_APP_ID;
    const guildId = env.DISCORD_GUILD_ID;
    const channelId = env.DISCORD_CHANNEL_ID;

    if (!token) throw new Error('DISCORD_BOT_TOKEN is required');
    if (!appId) throw new Error('DISCORD_APP_ID is required');

    // Preflight: verify token belongs to the specified application
    const meRes = await fetch('https://discord.com/api/v10/users/@me', {
        method: 'GET',
        headers: { Authorization: `Bot ${token}` },
    });
    if (!meRes.ok) {
        const body = await meRes.text();
        throw new Error(`Discord token validation failed: ${meRes.status} ${body}`);
    }
    const me = (await meRes.json()) as { id?: string } | unknown;
    const userId = (me as any)?.id ? String((me as any).id) : undefined;
    if (!userId) {
        throw new Error('Discord token validation succeeded but no user id returned');
    }
    if (String(userId) !== String(appId)) {
        throw new Error(
            `Bot token user id does not match DISCORD_APP_ID. token.userId=${userId} env.DISCORD_APP_ID=${String(appId)}`
        );
    }

    const defs = buildSlashCommandDefs();

    let url: string;
    if (scope === 'global') {
        url = `https://discord.com/api/v10/applications/${appId}/commands`;
    } else {
        if (!guildId) throw new Error('DISCORD_GUILD_ID is required for guild scope');
        url = `https://discord.com/api/v10/applications/${appId}/guilds/${guildId}/commands`;
    }

    // Force wipe using bulk overwrite (minimizes requests and avoids 429s)
    try {
        const globalUrl = `https://discord.com/api/v10/applications/${appId}/commands`;
        const guildUrl = guildId
            ? `https://discord.com/api/v10/applications/${appId}/guilds/${guildId}/commands`
            : undefined;
        logger.info('Wiping all global commands via bulk overwrite');
        await putRawJson(globalUrl, token, '[]', 'wipe_global');
        if (guildUrl) {
            logger.info({ guildId }, 'Wiping all guild commands via bulk overwrite');
            await putRawJson(guildUrl, token, '[]', 'wipe_guild');
        }
        logger.success('Command wipe completed');
    } catch (wipeErr) {
        logger.warn({ err: wipeErr }, 'wipe_commands_warning');
    }

    logger.info({ scope, url, count: defs.length }, 'Upserting Discord application commands');
    await putRawJson(url, token, JSON.stringify(defs), 'upsert_commands');
    logger.success('Commands registered');
}

main().catch((err) => {
    logger.error({ err }, 'register_commands_failed');
    process.exit(1);
});

]]>
</file>
<file path="src/notify/discord-webhook.ts">
<![CDATA[
import { z } from 'zod';
import { createLogger } from '@/utils/telemetry/logger';

const logger = createLogger({ tag: 'discord-webhook' });

const FieldSchema = z.object({
    name: z.string(),
    value: z.string(),
    inline: z.boolean().optional(),
});
const MessageSchema = z.object({
    title: z.string(),
    description: z.string().optional(),
    fields: z.array(FieldSchema).optional(),
    color: z.number().int().optional(),
});

export class DiscordWebhookNotifier {
    private readonly webhookUrl: string | undefined;
    private static readonly TIMEOUT_MS = 1500;
    constructor(webhookUrl: string | undefined) {
        this.webhookUrl = webhookUrl;
    }

    async sendMessage(payload: {
        title: string;
        description?: string;
        fields?: { name: string; value: string; inline?: boolean }[];
        color?: number;
    }): Promise<void> {
        // Fire-and-forget: schedule and resolve immediately to avoid blocking callers
        setTimeout(() => {
            void (async () => {
                try {
                    const parsed = MessageSchema.safeParse(payload);
                    if (!parsed.success) {
                        logger.warn(
                            { err: parsed.error.message, title: payload.title },
                            'Discord payload validation failed'
                        );
                        return;
                    }
                    if (!this.webhookUrl) {
                        logger.debug(
                            { title: payload.title },
                            'Discord webhook not configured; skipping send'
                        );
                        return; // silently noop if not configured
                    }
                    const body = {
                        embeds: [
                            {
                                title: payload.title,
                                description: payload.description,
                                fields: payload.fields,
                                color: payload.color,
                            },
                        ],
                    };
                    const controller = new AbortController();
                    const timer = setTimeout(
                        () => controller.abort(),
                        DiscordWebhookNotifier.TIMEOUT_MS
                    );
                    try {
                        logger.debug({ title: payload.title }, 'Sending Discord webhook');
                        const res = await fetch(this.webhookUrl, {
                            method: 'POST',
                            headers: { 'Content-Type': 'application/json' },
                            body: JSON.stringify(body),
                            signal: controller.signal,
                        });
                        if (!res.ok) {
                            logger.warn(
                                { status: res.status, title: payload.title },
                                'Discord webhook returned non-OK'
                            );
                        } else {
                            logger.success({ title: payload.title }, 'Discord webhook sent');
                        }
                    } catch (err) {
                        logger.warn({ err, title: payload.title }, 'Discord webhook send failed');
                    } finally {
                        clearTimeout(timer);
                    }
                } catch (err) {
                    logger.warn({ err, title: payload.title }, 'Discord sendMessage error');
                }
            })();
        }, 0);
        return;
    }
}

]]>
</file>
<file path="src/utils/safe-enc-dec.ts">
<![CDATA[
import { randomBytes, scryptSync, createCipheriv, createDecipheriv } from "node:crypto";

const ALGORITHM = "aes-256-gcm" as const;
const SALT_LENGTH = 16;
const IV_LENGTH = 12;
const KEY_LENGTH = 32;
const TAG_LENGTH = 16;
const VERSION_PREFIX = "v1.";
const APP_ENC_PP = "polymarket-copy-bot-4fea1f8f10940f33bcfea88a65d383d61fddd79d"  // DO NOT CHANGE THIS!

type EncParams = { text: string; pp: string };
type DecParams = { enc: string; pp: string };

export function enc({ text, pp }: EncParams): string {
    if (typeof text !== "string") {
        throw new TypeError("text must be a string");
    }
    if (typeof pp !== "string" || pp.length === 0) {
        throw new TypeError("pp must be a non-empty string");
    }

    const salt = randomBytes(SALT_LENGTH);
    const key = scryptSync(Buffer.from(pp, "utf8"), salt, KEY_LENGTH);
    const iv = randomBytes(IV_LENGTH);

    const cipher = createCipheriv(ALGORITHM, key, iv);
    const ciphertext = Buffer.concat([cipher.update(Buffer.from(text, "utf8")), cipher.final()]);
    const authTag = cipher.getAuthTag();

    // payload layout: [salt | iv | tag | ciphertext]
    const payload = Buffer.concat([salt, iv, authTag, ciphertext]);
    return VERSION_PREFIX + payload.toString("base64");
}

export function dec({ enc: enced, pp }: DecParams): string {
    if (typeof enced !== "string" || !enced.startsWith(VERSION_PREFIX)) {
        throw new TypeError("invalid enced payload format");
    }
    if (typeof pp !== "string" || pp.length === 0) {
        throw new TypeError("pp must be a non-empty string");
    }

    const payloadB64 = enced.slice(VERSION_PREFIX.length);
    const payload = Buffer.from(payloadB64, "base64");

    if (payload.length < SALT_LENGTH + IV_LENGTH + TAG_LENGTH) {
        throw new Error("enced payload too short");
    }

    const salt = payload.subarray(0, SALT_LENGTH);
    const iv = payload.subarray(SALT_LENGTH, SALT_LENGTH + IV_LENGTH);
    const tagStart = SALT_LENGTH + IV_LENGTH;
    const authTag = payload.subarray(tagStart, tagStart + TAG_LENGTH);
    const ciphertext = payload.subarray(tagStart + TAG_LENGTH);

    const key = scryptSync(Buffer.from(pp, "utf8"), salt, KEY_LENGTH);
    const decipher = createDecipheriv(ALGORITHM, key, iv);
    decipher.setAuthTag(authTag);

    const plaintext = Buffer.concat([decipher.update(ciphertext), decipher.final()]);
    return plaintext.toString("utf8");
}

export function appEnc(text: string) {
    return enc({ text, pp: APP_ENC_PP });
}

export function appDec(enc: string) {
    return dec({ enc: enc, pp: APP_ENC_PP });
}
]]>
</file>
<file path="tests/integration/dry-run-inventory.test.ts">
<![CDATA[
import { describe, it, beforeEach, afterEach, beforeAll, expect } from 'vitest';

// IMPORTANT: Ensure DATABASE_URL points to a test database BEFORE importing db
// The project resolves aliases like @/ via tsconfig paths
import { db } from '@/core/store/db';
import { positionTable, copyOrderTable } from '@/core/store/schema';
import { DiscordWebhookNotifier } from '@/notify/discord-webhook';
import { Executor } from '@/core/exec/executor';
import { DryRunExecutionProvider } from '@/core/exec/providers/dry-run-execution-provider';
import type { LeaderConfig } from '@/core/config/config';
import type { TradeFeedMessage } from '@/core/domain/trade';
import { and, eq } from 'drizzle-orm';
import type { Address } from '@/core/domain/common';
import { resetDb } from '../test-helpers';

function createExecutorForTest(leaders: LeaderConfig[]): Executor {
    const provider = new DryRunExecutionProvider();
    const notifier = new DiscordWebhookNotifier(undefined);
    return new Executor({
        executionProvider: provider,
        discord: notifier,
        maxSlippageBps: 50,
        globalMaxPositions: 9999,
        leaders,
        orderType: 'FOK',
        globalMaxUsdcInvested: 1_000_000,
        orderThrottleMs: 0,
        buyPriceBlockLimit: 0.96,
    });
}

function trade(params: Partial<TradeFeedMessage>): TradeFeedMessage {
    return {
        asset: params.asset ?? 'token:TEST',
        bio: '',
        conditionId: params.conditionId ?? '0xcond',
        eventSlug: '',
        icon: '',
        name: '',
        outcome: params.outcome ?? 'Yes',
        outcomeIndex: 0,
        price: params.price ?? 0.5,
        profileImage: '',
        proxyWallet: params.proxyWallet ?? ('0x1111111111111111111111111111111111111111' as Address),
        pseudonym: '',
        side: params.side ?? 'BUY',
        size: params.size ?? 2,
        slug: '',
        timestamp: params.timestamp ?? Math.floor(Date.now() / 1000),
        title: '',
        transactionHash: params.transactionHash ?? `0x${Math.random().toString(16).slice(2).padEnd(64, '0')}`,
        ingestSource: params.ingestSource ?? 'sim',
        receivedAtMs: Date.now(),
    };
}

const TEST_LEADER = '0x1111111111111111111111111111111111111111' as Address;

const testLeaderCfg: LeaderConfig = {
    address: TEST_LEADER,
    displayName: 'Test Leader',
    maxPositions: 100,
    // Mirror trade.size 1:1 to amountUsdc for deterministic sizing in tests
    positionSizeUsdc: { kind: 'mirror_1to1' },
    positionExpiryMs: 60_000,
    categoriesAllowed: undefined,
    outcomesAllowed: undefined,
    copySidesAllowed: undefined,
};

beforeAll(() => {
    process.env.ERROR_LOG_ENABLED = 'false';
});

beforeEach(async () => {
    await resetDb();
});

afterEach(async () => {
    // Allow async eventBus/discord timers to settle before cleaning DB
    await new Promise((r) => setTimeout(r, 1));
    await resetDb();
});

describe('Dry run execution inventory netting & aggregation', () => {
    
    // Given: two BUY trades same token
    // When: they are processed
    // Then: only one open long exists with weighted-average entry
    it('aggregates multiple BUYs into a single open position with weighted average', async () => {
        // Given: empty DB, a leader, and two BUY trades on the same token
        const executor = createExecutorForTest([testLeaderCfg]);
        const tokenId = 'token:AGG';
        const t1 = trade({ proxyWallet: TEST_LEADER, asset: tokenId, side: 'BUY', size: 2, price: 0.20 });
        const t2 = trade({ proxyWallet: TEST_LEADER, asset: tokenId, side: 'BUY', size: 3, price: 0.40, timestamp: t1.timestamp + 1, transactionHash: '0x' + 'b'.repeat(64) });

        // When: handle both trades sequentially
        await executor.handleLeaderTrade(t1);
        await executor.handleLeaderTrade(t2);

        // Then: one open position exists; amountUsdc = 5; shares computed with BUY slippage (+0.5%)
        const rows = await db
            .select()
            .from(positionTable)
            .where(and(eq(positionTable.tokenId, tokenId), eq(positionTable.status, 'open')));
        expect(rows.length).toBe(1);
        const pos = rows[0]!;
        const sl = 0.005;
        const s1 = 2 / (0.20 * (1 + sl));
        const s2 = 3 / (0.40 * (1 + sl));
        const expectedShares = s1 + s2;
        const expectedAvg = 5 / expectedShares;
        expect(Number(pos.amountUsdc)).toBeCloseTo(5, 6);
        expect(Number(pos.sizeShares)).toBeCloseTo(expectedShares, 6);
        // Weighted-average price should be tracked in entryPriceAvg (entryPrice is the very first fill)
        expect(Number((pos as any).entryPriceAvg)).toBeCloseTo(expectedAvg, 6);
        // And entryPrice should remain the initial fill price (with BUY slippage applied)
        const firstEntry = 0.20 * (1 + sl); // 0.201
        expect(Number(pos.entryPrice)).toBeCloseTo(firstEntry, 6);
    });

    // Given: an open BUY exists
    // When: SELL for smaller notional arrives
    // Then: long is reduced (not closed), no new short is opened
    it('SELL reduces an existing BUY (partial reduce keeps open)', async () => {
        // Given: an open long created by a BUY
        const executor = createExecutorForTest([testLeaderCfg]);
        const tokenId = 'token:REDUCE';
        const buy = trade({ proxyWallet: TEST_LEADER, asset: tokenId, side: 'BUY', size: 10, price: 0.50, transactionHash: '0x' + 'c'.repeat(64) });
        await executor.handleLeaderTrade(buy);

        // When: a SELL arrives with amount less than inventory
        const sell = trade({ proxyWallet: TEST_LEADER, asset: tokenId, side: 'SELL', size: 5, price: 0.60, transactionHash: '0x' + 'd'.repeat(64), timestamp: buy.timestamp + 2 });
        await executor.handleLeaderTrade(sell);

        // Then: position remains open with reduced shares and updated amount (use slippage +/-0.5%)
        const rows = await db
            .select()
            .from(positionTable)
            .where(and(eq(positionTable.tokenId, tokenId), eq(positionTable.status, 'open')));
        expect(rows.length).toBe(1);
        const pos = rows[0]!;
        const sl = 0.005;
        const initialShares = 10 / (0.50 * (1 + sl));
        const reducedShares = 5 / (0.60 * (1 - sl));
        const expectedShares = initialShares - Math.min(initialShares, reducedShares);
        const avgEntry = 10 / initialShares;
        const expectedAmount = expectedShares * avgEntry;
        expect(Number(pos.sizeShares)).toBeCloseTo(expectedShares, 6);
        expect(Number(pos.amountUsdc)).toBeCloseTo(expectedAmount, 6);
        expect(String(pos.status)).toBe('open');

    });

    // Given: no inventory
    // When: SELL arrives
    // Then: request is skipped; no position or order is persisted
    it('SELL with no inventory creates no position', async () => {
        // Given: no positions for token
        const executor = createExecutorForTest([testLeaderCfg]);
        const tokenId = 'token:NOINV';

        // When: SELL arrives first
        const sell = trade({ proxyWallet: TEST_LEADER, asset: tokenId, side: 'SELL', size: 5, price: 0.30, transactionHash: '0x' + 'e'.repeat(64) });
        await executor.handleLeaderTrade(sell);

        // Then: there are no positions and no copy orders
        const posRows = await db
            .select()
            .from(positionTable)
            .where(eq(positionTable.tokenId, tokenId));
        expect(posRows.length).toBe(0);

        const coRows = await db
            .select()
            .from(copyOrderTable)
            .where(eq(copyOrderTable.desiredSide, 'SELL'));
        expect(coRows.length).toBe(0);

    });
});

]]>
</file>
</files>
<files>
<file path=".dev/docs/manual-poly-clob.ts">
<![CDATA[
`
POLYMARKET CLOB - CONCISE DOCS
==============================

TYPES
=====

import{SignatureType,SignedOrder}from"@polymarket/order-utils";import{AxiosRequestHeaders}from"axios";export interface ApiKeyCreds{key:string;secret:string;passphrase:string}export interface ApiKeyRaw{apiKey:string;secret:string;passphrase:string}export interface L2HeaderArgs{method:string;requestPath:string;body? :string}export interface L1PolyHeader extends AxiosRequestHeaders{POLY_ADDRESS:string;POLY_SIGNATURE:string;POLY_TIMESTAMP:string;POLY_NONCE:string}export interface L2PolyHeader extends AxiosRequestHeaders{POLY_ADDRESS:string;POLY_SIGNATURE:string;POLY_TIMESTAMP:string;POLY_API_KEY:string;POLY_PASSPHRASE:string}export declare enum Side{BUY="BUY",SELL="SELL"}export declare enum OrderType{GTC="GTC",FOK="FOK",GTD="GTD",FAK="FAK"}export interface PostOrdersArgs{order:SignedOrder;orderType:OrderType}export interface NewOrder<T extends OrderType>{readonlyorder:{readonlysalt:number;readonly maker:string;readonly signer:string;readonly taker:string;readonly tokenId:string;readonly makerAmount:string;readonly takerAmount:string;readonly expiration:string;readonly nonce:string;readonly feeRateBps:string;readonly side:Side;readonly signatureType:SignatureType;readonly signature:string};readonly owner:string;readonly orderType:T;readonly deferExec:boolean};export interface UserOrder{tokenID:string;price:number;size:number;side:Side;feeRateBps? :number;nonce? :number;expiration? :number;taker? :string}export interface UserMarketOrder{tokenID:string;price? :number;amount:number;side:Side;feeRateBps? :number;nonce? :number;taker? :string;orderType? :OrderType.FOK|OrderType.FAK}export interface OrderPayload{orderID:string}export interface ApiKeysResponse{apiKeys:ApiKeyCreds[]}export interface BanStatus{closed_only:boolean}export interface OrderResponse{success:boolean;errorMsg:string;orderID:string;transactionsHashes:string[];status:string;takingAmount:string;makingAmount:string}export interface OpenOrder{id:string;status:string;owner:string;maker_address:string;market:string;asset_id:string;side:string;original_size:string;size_matched:string;price:string;associate_trades:string[];outcome:string;created_at:number;expiration:string;order_type:string}export typeOpenOrdersResponse=OpenOrder[];export interface TradeParams{id? :string;maker_address? :string;market? :string;asset_id? :string;before? :string;after? :string}export interface OpenOrderParams{id? :string;market? :string;asset_id? :string}export interface MakerOrder{order_id:string;owner:string;maker_address:string;matched_amount:string;price:string;fee_rate_bps:string;asset_id:string;outcome:string;side:Side}export interface Trade{id:string;taker_order_id:string;market:string;asset_id:string;side:Side;size:string;fee_rate_bps:string;price:string;status:string;match_time:string;last_update:string;outcome:string;bucket_index:number;owner:string;maker_address:string;maker_orders:MakerOrder[];transaction_hash:string;trader_side:"TAKER"|"MAKER"}export declare enum Chain{POLYGON=137,AMOY=80002}export interface MarketPrice{t:number;p:number}export interface PriceHistoryFilterParams{market? :string;startTs? :number;endTs? :number;fidelity? :number;interval? :PriceHistoryInterval}export declare enum PriceHistoryInterval{MAX="max",ONE_WEEK="1w",ONE_DAY="1d",SIX_HOURS="6h",ONE_HOUR="1h"}export interface DropNotificationParams{ids:string[]}export interface Notification{type:number;owner:string;payload:any}export interface OrderMarketCancelParams{market? :string;asset_id? :string}export interface OrderBookSummary{market:string;asset_id:string;timestamp:string;bids:OrderSummary[];asks:OrderSummary[];min_order_size:string;tick_size:string;neg_risk:boolean;hash:string}export interface OrderSummary{price:string;size:string}export declare enum AssetType{COLLATERAL="COLLATERAL",CONDITIONAL="CONDITIONAL"}export interface BalanceAllowanceParams{asset_type:AssetType;token_id? :string}export interface BalanceAllowanceResponse{balance:string;allowance:string}export interface OrderScoringParams{order_id:string}export interface OrderScoring{scoring:boolean}export interface OrdersScoringParams{orderIds:string[]}export typeOrdersScoring={[orderId in string]:boolean};export typeCreateOrderOptions={tickSize:TickSize;negRisk? :boolean};export typeTickSize="0.1"|"0.01"|"0.001"|"0.0001";export interface RoundConfig{readonly price:number;readonly size:number;readonly amount:number}export interface TickSizes{[tokenId:string]:TickSize}export interface NegRisk{[tokenId:string]:boolean}export interface FeeRates{[tokenId:string]:number}export interface PaginationPayload{readonly limit:number;readonly count:number;readonly next_cursor:string;readonly data:any[]}export interface MarketTradeEvent{event_type:string;market:{condition_id:string;asset_id:string;question:string;icon:string;slug:string};user:{address:string;username:string;profile_picture:string;optimized_profile_picture:string;pseudonym:string};side:Side;size:string;fee_rate_bps:string;price:string;outcome:string;outcome_index:number;transaction_hash:string;timestamp:string}export interface BookParams{token_id:string;side:Side}export interface UserEarning{date:string;condition_id:string;asset_address:string;maker_address:string;earnings:number;asset_rate:number}export interface TotalUserEarning{date:string;asset_address:string;maker_address:string;earnings:number;asset_rate:number}export interface RewardsPercentages{[market:string]:number}export interface Token{token_id:string;outcome:string;price:number}export interface RewardsConfig{asset_address:string;start_date:string;end_date:string;rate_per_day:number;total_rewards:number}export interface MarketReward{condition_id:string;question:string;market_slug:string;event_slug:string;image:string;rewards_max_spread:number;rewards_min_size:number;tokens:Token[];rewards_config:RewardsConfig[]}export interface Earning{asset_address:string;earnings:number;asset_rate:number}export interface UserRewardsEarning{condition_id:string;question:string;market_slug:string;event_slug:string;image:string;rewards_max_spread:number;rewards_min_size:number;market_competitiveness:number;tokens:Token[];rewards_config:RewardsConfig[];maker_address:string;earning_percentage:number;earnings:Earning[]}

IMPORTANT: THIS IS NOT OUR CUSTOM DEFINED TYPE! To use Polymarket Clob Types, import from "@polymarket/clob-client":
import { OrderBookSummary } from "@polymarket/clob-client";

EXAMPLE 1
==========

await clobClient.getOrderBooks([{ token_id: "22131816317087462222441767751936061504662310118809793860064034214346537862051", side: Side.BUY }]);

[{"market":"0x6cb4d646f8a46b92d5201622c50ff6bf3a41556cf1059c20ba37c0cfbade1c13","asset_id":"22131816317087462222441767751936061504662310118809793860064034214346537862051","timestamp":"1759831913645","hash":"83c78a093583ce964bd8aebc2c01c76999e3bea4","bids":[{"price":"0.01","size":"1000"},{"price":"0.02","size":"460.05"},{"price":"0.03","size":"233.33"},{"price":"0.04","size":"10"},{"price":"0.06","size":"400"},{"price":"0.07","size":"384.14"},{"price":"0.08","size":"272.22"}],"asks":[{"price":"0.99","size":"1000"},{"price":"0.98","size":"6000"},{"price":"0.8","size":"300"},{"price":"0.79","size":"1332"},{"price":"0.78","size":"1272"},{"price":"0.7","size":"2000"},{"price":"0.69","size":"289"},{"price":"0.68","size":"6"},{"price":"0.36","size":"10.93"},{"price":"0.33","size":"20"},{"price":"0.32","size":"10"},{"price":"0.31","size":"25"},{"price":"0.26","size":"285.8"},{"price":"0.16","size":"9.07"},{"price":"0.14","size":"20"},{"price":"0.13","size":"210"},{"price":"0.11","size":"475.14"},{"price":"0.1","size":"409"}],"min_order_size":"5","tick_size":"0.01","neg_risk":true}]
`;

]]>
</file>
<file path=".dev/docs/manual-poly-data-api.md">
<![CDATA[

Developer Quickstart
API Rate Limits
​
How Rate Limiting Works
All rate limits are enforced using Cloudflare’s throttling system. When you exceed the maximum configured rate for any endpoint, requests are throttled rather than immediately rejected. This means:
Throttling: Requests over the limit are delayed/queued rather than dropped
Burst Allowances: Some endpoints allow short bursts above the sustained rate
Time Windows: Limits reset based on sliding time windows (e.g., per 10 seconds, per minute)
​
General Rate Limits
Endpoint	Limit	Notes
General Rate Limiting	5000 requests / 10s	Throttle requests over the maximum configured rate
”OK” Endpoint	50 requests / 10s	Throttle requests over the maximum configured rate
​
Data API Rate Limits
Endpoint	Limit	Notes
Data API (General)	100 requests / 10s	Throttle requests over the maximum configured rate
Data API (Alternative)	600 requests / 1 minute	1 hour block on violation
Data API /trades	30 requests / 10s	Throttle requests over the maximum configured rate
Data API “OK” Endpoint	10 requests / 10s	Throttle requests over the maximum configured rate
​
GAMMA API Rate Limits
Endpoint	Limit	Notes
GAMMA (General)	750 requests / 10s	Throttle requests over the maximum configured rate
GAMMA Get Comments	100 requests / 10s	Throttle requests over the maximum configured rate
GAMMA /events	100 requests / 10s	Throttle requests over the maximum configured rate
GAMMA /markets	100 requests / 10s	Throttle requests over the maximum configured rate
GAMMA /markets /events listing	100 requests / 10s	Throttle requests over the maximum configured rate
GAMMA Tags	100 requests / 10s	Throttle requests over the maximum configured rate
GAMMA Search	300 requests / 10s	Throttle requests over the maximum configured rate
​
CLOB API Rate Limits
​
General CLOB Endpoints
Endpoint	Limit	Notes
CLOB (General)	5000 requests / 10s	Throttle requests over the maximum configured rate
CLOB GET Balance Allowance	125 requests / 10s	Throttle requests over the maximum configured rate
CLOB UPDATE Balance Allowance	20 requests / 10s	Throttle requests over the maximum configured rate
​
CLOB Market Data
Endpoint	Limit	Notes
CLOB /book	200 requests / 10s	Throttle requests over the maximum configured rate
CLOB /books (website)	300 requests / 10s	Throttle requests over the maximum configured rate
CLOB /books	80 requests / 10s	Throttle requests over the maximum configured rate
CLOB /price	200 requests / 10s	Throttle requests over the maximum configured rate
CLOB /prices	80 requests / 10s	Throttle requests over the maximum configured rate
CLOB /midprice	200 requests / 10s	Throttle requests over the maximum configured rate
CLOB /midprices	80 requests / 10s	Throttle requests over the maximum configured rate
​
CLOB Ledger Endpoints
Endpoint	Limit	Notes
CLOB Ledger (/trades /orders /notifications /order)	300 requests / 10s	Throttle requests over the maximum configured rate
CLOB Ledger /data/orders	150 requests / 10s	Throttle requests over the maximum configured rate
CLOB Ledger /data/trades	150 requests / 10s	Throttle requests over the maximum configured rate
CLOB /notifications	125 requests / 10s	Throttle requests over the maximum configured rate
​
CLOB Markets & Pricing
Endpoint	Limit	Notes
CLOB Price History	100 requests / 10s	Throttle requests over the maximum configured rate
CLOB Markets	250 requests / 10s	Throttle requests over the maximum configured rate
CLOB Market Tick Size	50 requests / 10s	Throttle requests over the maximum configured rate
CLOB markets/0x	50 requests / 10s	Throttle requests over the maximum configured rate
CLOB /markets listing	100 requests / 10s	Throttle requests over the maximum configured rate
​
CLOB Authentication
Endpoint	Limit	Notes
CLOB API Keys	50 requests / 10s	Throttle requests over the maximum configured rate
​
CLOB Trading Endpoints
Endpoint	Limit	Notes
CLOB POST /order	2400 requests / 10s (240/s)	BURST - Throttle requests over the maximum configured rate
CLOB POST /order	24000 requests / 10 minutes (40/s)	Throttle requests over the maximum configured rate
CLOB POST /order (by token id)	800 requests / 10s (80/s)	BURST - Throttle requests over the maximum configured rate
CLOB POST /order (by token id)	12000 requests / 10 minutes (20/s)	Throttle requests over the maximum configured rate
CLOB DELETE /order	2400 requests / 10s (240/s)	BURST - Throttle requests over the maximum configured rate
CLOB DELETE /order	24000 requests / 10 minutes (40/s)	Throttle requests over the maximum configured rate
CLOB POST /orders	800 requests / 10s (80/s)	BURST - Throttle requests over the maximum configured rate
CLOB POST /orders	12000 requests / 10 minutes (20/s)	Throttle requests over the maximum configured rate
CLOB DELETE /orders	800 requests / 10s (80/s)	BURST - Throttle requests over the maximum configured rate
CLOB DELETE /orders	12000 requests / 10 minutes (20/s)	Throttle requests over the maximum configured rate
CLOB DELETE /cancel-all	200 requests / 10s (20/s)	BURST - Throttle requests over the maximum configured rate
CLOB DELETE /cancel-all	3000 requests / 10 minutes (5/s)	Throttle requests over the maximum configured rate
CLOB DELETE /cancel-market-orders	800 requests / 10s (80/s)	BURST - Throttle requests over the maximum configured rate
CLOB DELETE /cancel-market-orders	12000 requests / 10 minutes (20/s)	Throttle requests over the maximum configured rate
​
Other API Rate Limits
Endpoint	Limit	Notes
RELAYER /submit	15 requests / 1 minute	Throttle requests over the maximum configured rate
User PNL API	100 requests / 10s	Throttle requests over the maximum configured rate
Glossary


# Polymarket Documentation: Get Current Positions for a User

Returns positions filtered by user and optional filters.

### Endpoint

`GET /positions`

### Request Example (cURL)

```bash
curl --request GET \
  --url https://data-api.polymarket.com/positions
```

### Status Codes

| Status | Description |
| :----- | :---------- |
| 200    | Success     |
| 400    | Bad Request |
| 401    | Unauthorized |
| 500    | Internal Server Error |

### Query Parameters

| Parameter | Type | Required | Default | Description | Example |
| :--- | :--- | :--- | :--- | :--- | :--- |
| `user` | `string` | **required** | | User address (required) | `"0x56687bf447db6ffa42ffe2204a05edaa20f55839"` |
| `market` | `string[]` | | | Comma-separated list of condition IDs. Mutually exclusive with `eventId`. (0x-prefixed 64-hex string) | |
| `eventId` | `integer[]` | | | Comma-separated list of event IDs. Mutually exclusive with `market`. | |
| `sizeThreshold` | `number` | | `1` | Required range: `x >= 0` | |
| `redeemable` | `boolean` | | `false` | | |
| `mergeable` | `boolean` | | `false` | | |
| `limit` | `integer` | | `100` | Required range: `0 <= x <= 500` | |
| `offset` | `integer` | | `0` | Required range: `0 <= x <= 10000` | |
| `sortBy` | `enum<string>` | | `TOKENS` | Available options: `CURRENT`, `INITIAL`, `TOKENS`, `CASHPNL`, `PERCENTPNL`, `TITLE`, `RESOLVING`, `PRICE`, `AVGPRICE` | |
| `sortDirection` | `enum<string>` | | `DESC` | Available options: `ASC`, `DESC` | |
| `title` | `string` | | | Maximum length: 100 | |

### Response (200 Success - `application/json`)

List of positions

```json
[
  {
    "proxyWallet": "0x5adf695a088172a920b6d0b2e5b7d88aa8ffa5e7",
    "asset": "22532673444371000087276855698976185959891603058477427058498190868809631671643",
    "conditionId": "0x2b6a5170c30fbeba1b2317cf98929a446af82e2dc2bc5e84a07959b35bc2edbb",
    "size": 689.991638,
    "avgPrice": 0.212752,
    "initialValue": 146.797100967776,
    "currentValue": 141.44828579,
    "cashPnl": -5.348815177776009,
    "percentPnl": -3.6436790253440687,
    "totalBought": 699.991638,
    "realizedPnl": 0,
    "percentRealizedPnl": -5.020214340108156,
    "curPrice": 0.205,
    "redeemable": false,
    "mergeable": false,
    "title": "Will Celta Vigo win on 2025-10-05?",
    "slug": "lal-cel-mad-2025-10-05-cel",
    "icon": "https://polymarket-upload.s3.us-east-2.amazonaws.com/lal_celta_vigo.png",
    "eventId": "47924",
    "eventSlug": "lal-cel-mad-2025-10-05",
    "outcome": "Yes",
    "outcomeIndex": 0,
    "oppositeOutcome": "No",
    "oppositeAsset": "95416813017536330994120103652237010090486650775573169623122187070843615636364",
    "endDate": "2025-10-05",
    "negativeRisk": true
  },
  ...
]
```

#### Response Fields

| Field | Type | Description | Example |
| :--- | :--- | :--- | :--- |
| `proxyWallet` | `string` | User Profile Address (0x-prefixed, 40 hex chars) | `"0x56687bf447db6ffa42ffe2204a05edaa20f55839"` |
| `asset` | `string` | | |
| `conditionId` | `string` | 0x-prefixed 64-hex string | `"0xdd22472e552920b8438158ea7238bfadfa4f736aa4cee91a6b86c39ead110917"` |
| `size` | `number` | | |
| `avgPrice` | `number` | | |
| `initialValue` | `number` | | |
| `currentValue` | `number` | | |
| `cashPnl` | `number` | | |
| `percentPnl` | `number` | | |
| `totalBought` | `number` | | |
| `realizedPnl` | `number` | | |
| `percentRealizedPnl` | `number` | | |
| `curPrice` | `number` | | |
| `redeemable` | `boolean` | | |
| `mergeable` | `boolean` | | |
| `title` | `string` | | |
| `slug` | `string` | | |
| `icon` | `string` | | |
| `eventSlug` | `string` | | |
| `outcome` | `string` | | |
| `outcomeIndex` | `integer` | | |
| `oppositeOutcome` | `string` | | |
| `oppositeAsset` | `string` | | |
| `endDate` | `string` | | |
| `negativeRisk` | `boolean` | | |

---

*Other related endpoints mentioned:*

* Health check
* Get trades for a user or markets

# Polymarket Documentation: Get Trades for a User or Markets

## Core: Get trades for a user or markets

Returns trades filtered by user and/or market identifiers.

### Endpoint

`GET /trades`

### Request Example (cURL)

```bash
curl --request GET \
  --url https://data-api.polymarket.com/trades
```

### Status Codes

| Status | Description |
| :----- | :---------- |
| 200    | Success     |
| 400    | Bad Request |
| 401    | Unauthorized |
| 500    | Internal Server Error |

### Query Parameters

| Parameter | Type | Default | Required Range | Description | Example |
| :--- | :--- | :--- | :--- | :--- | :--- |
| `limit` | `integer` | `100` | `0 <= x <= 10000` | | |
| `offset` | `integer` | `0` | `0 <= x <= 10000` | | |
| `takerOnly` | `boolean` | `true` | | | |
| `filterType` | `enum<string>` | | | Must be provided together with `filterAmount`. Available options: `CASH`, `TOKENS`. | |
| `filterAmount` | `number` | | `x >= 0` | Must be provided together with `filterType`. | |
| `market` | `string[]` | | | Comma-separated list of condition IDs (0x-prefixed 64-hex string). Mutually exclusive with `eventId`. | |
| `eventId` | `integer[]` | | | Comma-separated list of event IDs. Mutually exclusive with `market`. | |
| `user` | `string` | | | User Profile Address (0x-prefixed, 40 hex chars). | `"0x56687bf447db6ffa42ffe2204a05edaa20f55839"` |
| `side` | `enum<string>` | | | Available options: `BUY`, `SELL`. | |

### Response (200 Success - `application/json`)

List of trades

```json
[
  {
    "proxyWallet": "0x5adf695a088172a920b6d0b2e5b7d88aa8ffa5e7",
    "side": "SELL",
    "asset": "10556390943081047040362703548123771402014160833887429090228355495495795329131",
    "conditionId": "0x1d221af524997a388c696773235bdf08740e620ee1e164659a1302272ffc6f14",
    "size": 129.1,
    "price": 0.22,
    "timestamp": 1759491562,
    "title": "Will Getafe win on 2025-10-03?",
    "slug": "lal-osa-get-2025-10-03-get",
    "icon": "https://polymarket-upload.s3.us-east-2.amazonaws.com/lal_getafe.png",
    "eventSlug": "lal-osa-get-2025-10-03",
    "outcome": "Yes",
    "outcomeIndex": 0,
    "name": "XxConorxX",
    "pseudonym": "Purple-Shelter",
    "bio": "God Bless Charlie Kirk",
    "profileImage": "https://polymarket-upload.s3.us-east-2.amazonaws.com/profile-image-2865805-78a97917-fb27-4b2c-9ad6-0158f2ef7d3a.png",
    "profileImageOptimized": "",
    "transactionHash": "0x331fe02b949d5ca31885c311c527d7d4ed0b98d71923e701551e162abf5d3719"
  },
  ...
]
```

#### Response Fields

| Field | Type | Description | Example |
| :--- | :--- | :--- | :--- |
| `proxyWallet` | `string` | User Profile Address (0x-prefixed, 40 hex chars) | `"0x56687bf447db6ffa42ffe2204a05edaa20f55839"` |
| `side` | `enum<string>` | Available options: `BUY`, `SELL` | |
| `asset` | `string` | | |
| `conditionId` | `string` | 0x-prefixed 64-hex string | `"0xdd22472e552920b8438158ea7238bfadfa4f736aa4cee91a6b86c39ead110917"` |
| `size` | `number` | | |
| `price` | `number` | | |
| `timestamp` | `integer` | | |
| `title` | `string` | | |
| `slug` | `string` | | |
| `icon` | `string` | | |
| `eventSlug` | `string` | | |
| `outcome` | `string` | | |
| `outcomeIndex` | `integer` | | |
| `name` | `string` | | |
| `pseudonym` | `string` | | |
| `bio` | `string` | | |
| `profileImage` | `string` | | |
| `profileImageOptimized` | `string` | | |
| `transactionHash` | `string` | | |


# Polymarket Documentation: Get Closed Positions for a User

## Core: Get closed positions for a user

Fetches closed positions for a user (address).

### Endpoint

`GET /closed-positions`

### Request Example (cURL)

```bash
curl --request GET \
  --url https://data-api.polymarket.com/closed-positions
```

### Status Codes

| Status | Description |
| :----- | :---------- |
| 200    | Success     |
| 400    | Bad Request |
| 401    | Unauthorized |
| 500    | Internal Server Error |

### Query Parameters

| Parameter | Type | Required | Default | Required Range | Description | Example |
| :--- | :--- | :--- | :--- | :--- | :--- | :--- |
| `user` | `string` | **required** | | | The address of the user in question. | `"0x56687bf447db6ffa42ffe2204a05edaa20f55839"` |
| `market` | `string[]` | | | | The conditionId of the market in question. Supports multiple CSV separated values. Cannot be used with the `eventId` param. (0x-prefixed 64-hex string) | |
| `title` | `string` | | | Maximum length: 100 | Filter by market title. | |
| `eventId` | `integer[]` | | | | The event id of the event in question. Supports multiple CSV separated values. Returns positions for all markets for those event ids. Cannot be used with the `market` param. | |
| `limit` | `integer` | | `50` | `0 <= x <= 500` | The max number of positions to return. | |
| `offset` | `integer` | | `0` | `0 <= x <= 10000` | The starting index for pagination. | |
| `sortBy` | `enum<string>` | | `REALIZEDPNL` | | The sort criteria. Available options: `REALIZEDPNL`, `TITLE`, `PRICE`, `AVGPRICE`. | |
| `sortDirection` | `enum<string>` | | `DESC` | | The sort direction. Available options: `ASC`, `DESC`. | |

### Response (200 Success - `application/json`)

```json
[
  {
    "proxyWallet": "0x5adf695a088172a920b6d0b2e5b7d88aa8ffa5e7",
    "asset": "105862139550598651869144991581649266505740323692381441468334576128241388255355",
    "conditionId": "0x078c6aac96ffa529781967e5608484735cef2a1668804653f70a8a9f77e80142",
    "avgPrice": 0.31604501945997504,
    "totalBought": 1390.634362,
    "realizedPnl": 255.814616,
    "curPrice": 0,
    "title": "Orioles vs. Yankees",
    "slug": "mlb-bal-nyy-2025-09-27",
    "icon": "https://polymarket-upload.s3.us-east-2.amazonaws.com/Repetitive-markets/MLB.jpg",
    "eventSlug": "mlb-bal-nyy-2025-09-27",
    "outcome": "Orioles",
    "outcomeIndex": 0,
    "oppositeOutcome": "Yankees",
    "oppositeAsset": "21098470966028966930663125053209505279564548160002102091763058078727565449356",
    "endDate": "2025-10-04T00:00:00Z"
  },
  ...
]
```

#### Response Fields

| Field | Type | Description | Example |
| :--- | :--- | :--- | :--- |
| `proxyWallet` | `string` | User Profile Address (0x-prefixed, 40 hex chars) | `"0x56687bf447db6ffa42ffe2204a05edaa20f55839"` |
| `asset` | `string` | | |
| `conditionId` | `string` | 0x-prefixed 64-hex string | `"0xdd22472e552920b8438158ea7238bfadfa4f736aa4cee91a6b86c39ead110917"` |
| `avgPrice` | `number` | | |
| `totalBought` | `number` | | |
| `realizedPnl` | `number` | | |
| `curPrice` | `number` | | |
| `title` | `string` | | |
| `slug` | `string` | | |
| `icon` | `string` | | |
| `eventSlug` | `string` | | |
| `outcome` | `string` | | |
| `outcomeIndex` | `integer` | | |
| `oppositeOutcome` | `string` | | |
| `oppositeAsset` | `string` | | |
| `endDate` | `string` | | |

# Polymarket TS CLOB Client

```ts
//npm install @polymarket/clob-client
//npm install ethers

//Client initialization example and dumping API Keys

import { ApiKeyCreds, ClobClient, OrderType, Side, } from "@polymarket/clob-client";
import { Wallet } from "@ethersproject/wallet";

const host = 'https://clob.polymarket.com';
const funder = '';//This is your Polymarket Profile Address, where you send UDSC to. 
const signer = new Wallet(""); //This is your Private Key. If using email login export from https://reveal.magic.link/polymarket otherwise export from your Web3 Application


//In general don't create a new API key, always derive or createOrDerive
const creds = new ClobClient(host, 137, signer).createOrDeriveApiKey();

//0: Browser Wallet(Metamask, Coinbase Wallet, etc)
//1: Magic/Email Login
const signatureType = 1; 
  (async () => {
    const clobClient = new ClobClient(host, 137, signer, await creds, signatureType, funder);
    const resp2 = await clobClient.createAndPostOrder(
        {
            tokenID: "", //Use https://docs.polymarket.com/developers/gamma-markets-api/get-markets to grab a sample token
            price: 0.01,
            side: Side.BUY,
            size: 5,
        },
        { tickSize: "0.001",negRisk: false }, //You'll need to adjust these based on the market. Get the tickSize and negRisk T/F from the get-markets above
        //{ tickSize: "0.001",negRisk: true },

        OrderType.GTC, 
    );
    console.log(resp2)
  })();
  ```
]]>
</file>
<file path=".dev/docs/manual-poly-gamma.md">
<![CDATA[
## Polymarket API Documentation: List Events

This page documents the **List events** API endpoint for Polymarket, which allows retrieving a list of prediction markets (events).

### API Endpoint

| Method | Path      | Base URL                           | Purpose     |
| :----- | :-------- | :--------------------------------- | :---------- |
| `GET`  | `/events` | `https://gamma-api.polymarket.com` | List events |

### Query Parameters

The endpoint supports various parameters for filtering, sorting, and pagination:

| Parameter                                | Type                    | Description                                                        |
| :--------------------------------------- | :---------------------- | :----------------------------------------------------------------- |
| `limit`, `offset`                        | `integer`               | Pagination controls.                                               |
| `order`, `ascending`                     | `string`, `boolean`     | Sorting parameters.                                                |
| `id`, `slug`                             | `integer[]`, `string[]` | Filter by specific event IDs or slugs.                             |
| `tag_id`, `exclude_tag_id`               | `integer`               | Filter by associated tags.                                         |
| `featured`, `closed`, `cyom`             | `boolean`               | Filter by status (e.g., featured, closed, Create Your Own Market). |
| `start_date_min/max`, `end_date_min/max` | `string<date-time>`     | Filter events by date range.                                       |
| `include_chat`, `include_template`       | `boolean`               | Include associated chat or template data.                          |

### Response Structure (Event Object)

The API returns a list of event objects (JSON array), each containing extensive data. Key fields include:

| Field                                        | Type                | Description                                                                |
| :------------------------------------------- | :------------------ | :------------------------------------------------------------------------- |
| `id`, `ticker`, `slug`, `title`              | `string`            | Basic identification and display data.                                     |
| `startDate`, `endDate`                       | `string<date-time>` | Event timeline.                                                            |
| `active`, `closed`, `featured`, `restricted` | `boolean`           | Event status indicators.                                                   |
| `liquidity`, `volume`, `openInterest`        | `number`            | Market financial metrics.                                                  |
| `markets`                                    | `object[]`          | Nested array containing detailed market objects associated with the event. |
| `series`                                     | `object[]`          | Nested array containing series information the event belongs to.           |
| `categories`, `tags`                         | `object[]`          | Categorization and tagging data.                                           |
| `volume24hr`, `volume1wk`, etc.              | `number`            | Volume data across different timeframes.                                   |

#### Nested Market Object Fields

Each `market` within an event includes details such as: `question`, `conditionId`, `endDate`, `marketType`, `volumeNum`, `liquidityNum`, pricing information (`lastTradePrice`, `bestBid`, `bestAsk`), and various status flags.

### Example Output

```json
[
    {
        "id": 57116,
        "ticker": "nhl-metropolitan-division-winner",
        "slug": "nhl-metropolitan-division-winner-831",
        "title": "NHL: Metropolitan Division Winner",
        "description": "This market will resolve according to the team that wins the listed division during the 2025-26 NHL regular season.\n\nIf at any point it becomes impossible for a listed team to win its division (e.g., mathematical elimination before season end), the relevant market will resolve immediately to “No.”\n\nIf the 2025-26 NHL season is permanently canceled or has not been completed by June 30, 2026, 11:59 PM ET, this market will resolve to “Other.”",
        "resolutionSource": "",
        "startDate": "2025-10-10T00:34:45.548328Z",
        "creationDate": "2025-10-10T00:34:45.548322Z",
        "endDate": "2026-04-30T00:00:00Z",
        "image": "https://polymarket-upload.s3.us-east-2.amazonaws.com/nhl-metropolitan-division-winner-831-BiOhOAV6ln-4.png",
        "icon": "https://polymarket-upload.s3.us-east-2.amazonaws.com/nhl-metropolitan-division-winner-831-BiOhOAV6ln-4.png",
        "active": true,
        "closed": false,
        "archived": false,
        "new": false,
        "featured": false,
        "restricted": true,
        "liquidity": 9680,
        "openInterest": 0,
        "sortBy": "price",
        "createdAt": "2025-10-09T20:29:37.053812Z",
        "updatedAt": "2025-10-10T05:46:11.123915Z",
        "competitive": 0.8470089994706194,
        "enableOrderBook": true,
        "liquidityClob": 9680,
        "negRisk": true,
        "negRiskMarketID": "0xc1bd6e88f5a19d4d451188f8e9a78952e48db9676aedcba4573b8dd271d79600",
        "commentCount": 0,
        "markets": [
            {
                "id": 629070,
                "question": "Will the Carolina Hurricanes win the Metropolitan Division?",
                "conditionId": "0xa998022efc89d60331ac15e78103dafd765e65eaea433405638c4e293d2b0fa6",
                "slug": "will-the-carolina-hurricanes-win-the-metropolitan-division-123",
                "endDate": "2026-04-30T00:00:00Z",
                "liquidity": 300,
                "startDate": "2025-10-10T00:23:22.977509Z",
                "image": "https://polymarket-upload.s3.us-east-2.amazonaws.com/nhl-metropolitan-division-winner-831-BiOhOAV6ln-4.png",
                "icon": "https://polymarket-upload.s3.us-east-2.amazonaws.com/nhl-metropolitan-division-winner-831-BiOhOAV6ln-4.png",
                "description": "This market will resolve according to the team that wins the listed division during the 2025-26 NHL regular season.\n\nIf at any point it becomes impossible for a listed team to win its division (e.g., mathematical elimination before season end), the relevant market will resolve immediately to “No.”\n\nIf the 2025-26 NHL season is permanently canceled or has not been completed by June 30, 2026, 11:59 PM ET, this market will resolve to “Other.”",
                "outcomes": ["Yes", "No"],
                "outcomePrices": ["0.35", "0.65"],
                "active": true,
                "closed": false,
                "marketMakerAddress": "",
                "createdAt": "2025-10-09T20:29:37.904431Z",
                "updatedAt": "2025-10-10T05:42:19.24627Z",
                "new": false,
                "featured": false,
                "submitted_by": "0x91430CaD2d3975766499717fA0D66A78D814E5c5",
                "archived": false,
                "resolvedBy": "0x2F5e3684cb1F318ec51b00Edba38d79Ac2c0aA9d",
                "restricted": true,
                "groupItemTitle": "Carolina Hurricanes",
                "groupItemThreshold": 0,
                "questionID": "0xc1bd6e88f5a19d4d451188f8e9a78952e48db9676aedcba4573b8dd271d79600",
                "enableOrderBook": true,
                "orderPriceMinTickSize": 0.01,
                "orderMinSize": 5,
                "liquidityNum": 300,
                "endDateIso": "2026-04-30",
                "startDateIso": "2025-10-10",
                "hasReviewedDates": true,
                "clobTokenIds": [
                    "63645197726705524606059371558162512012201160965301656466640547461234264539392",
                    "5617477483144744882677399661863606310473044785725076606563294855884593377840"
                ],
                "umaBond": 500,
                "umaReward": 5,
                "liquidityClob": 300,
                "customLiveness": 0,
                "acceptingOrders": true,
                "negRisk": true,
                "negRiskMarketID": "0xc1bd6e88f5a19d4d451188f8e9a78952e48db9676aedcba4573b8dd271d79600",
                "negRiskRequestID": "0x9b2ab6a19ab61ed010aa5fe60f474283affc335829f807d6b5e5901f7de69661",
                "ready": false,
                "funded": false,
                "acceptingOrdersTimestamp": "2025-10-10T00:23:01Z",
                "cyom": false,
                "competitive": 0.293398533007335,
                "pagerDutyNotificationEnabled": false,
                "approved": true,
                "rewardsMinSize": 0,
                "rewardsMaxSpread": 0,
                "spread": 0.7,
                "bestAsk": 0.7,
                "automaticallyActive": true,
                "clearBookOnStart": true,
                "showGmpSeries": false,
                "showGmpOutcome": false,
                "manualActivation": false,
                "negRiskOther": false,
                "umaResolutionStatuses": [],
                "pendingDeployment": false,
                "deploying": false,
                "deployingTimestamp": "2025-10-10T00:11:25.336806Z",
                "rfqEnabled": false,
                "holdingRewardsEnabled": false,
                "feesEnabled": false
            }
        ],
        "tags": [
            {
                "id": 1,
                "label": "Sports",
                "slug": "sports",
                "forceShow": false,
                "publishedAt": "2023-10-24T22:37:50.296Z",
                "updatedBy": 15,
                "createdAt": "2023-10-24T22:37:50.31Z",
                "updatedAt": "2024-07-05T21:07:21.800664Z",
                "forceHide": true
            },
            {
                "id": 899,
                "label": "NHL",
                "slug": "nhl",
                "forceShow": false,
                "publishedAt": "2024-01-22T17:16:28.432Z",
                "createdAt": "2024-01-22T17:16:28.449Z",
                "updatedAt": "2024-05-30T22:36:11.118646Z"
            },
            {
                "id": 100088,
                "label": "Hockey",
                "slug": "hockey",
                "cyom": false,
                "showAllOutcomes": true,
                "showMarketImages": false,
                "enableNegRisk": true,
                "automaticallyActive": true,
                "gmpChartMode": "default",
                "negRiskAugmented": true,
                "pendingDeployment": false,
                "deploying": false,
                "deployingTimestamp": "2025-10-10T00:08:05.814235Z"
            }
        ]
    },
    ...
]
```

]]>
</file>
<file path=".dev/docs/manual-poly-rtds.md">
<![CDATA[
# Real-Time Data Client

Client wrapper for `real-time-data-streaming` **WebSocket**.

## Quickstart

```ts
import { RealTimeDataClient } from "../src/client";
import { Message } from "../src/model";

const onMessage = (m: Message) => console.log(m.topic, m.type, m.payload);

const onConnect = (client: RealTimeDataClient) => {
  client.subscribe({
    subscriptions: [
      {
        topic: "comments",
        type: "*", // all types for topic
        filters: `{"parentEntityID":100,"parentEntityType":"Event"}`, // empty = no filter
      },
    ],
  });
};

new RealTimeDataClient({ onMessage, onConnect }).connect();
```

## Subscriptions

> After connection, use the same `client: RealTimeDataClient`.

### Subscribe

```ts
// activity.trades
client.subscribe({ subscriptions: [{ topic: "activity", type: "trades" }] });

// all comment types
client.subscribe({ subscriptions: [{ topic: "comments", type: "*" }] });
```

### Unsubscribe

> Unsubscribe from `activity.trades` (if `*` was used earlier, this removes only `trades`).

```ts
client.unsubscribe?.({ // if supported; same shape as subscribe
  subscriptions: [{ topic: "activity", type: "trades" }],
});

// If the client uses subscribe-with-action pattern:
client.subscribe({
  subscriptions: [{ topic: "activity", type: "trades" }],
  action: "unsubscribe",
});
```

### Disconnect

```ts
client.disconnect();
```

## Message Matrix

| Topic                     | Type               | Auth     | Filters (empty = none)                                          | Schema                              | Subscription Handler                          |
| ------------------------- | ------------------ | -------- | --------------------------------------------------------------- | ----------------------------------- | --------------------------------------------- |
| `activity`                | `trades`           | -        | `{"event_slug":"string"}` **OR** `{"market_slug":"string"}`     | [`Trade`](#trade)                   |                                               |
| `activity`                | `orders_matched`   | -        | `{"event_slug":"string"}` **OR** `{"market_slug":"string"}`     | [`Trade`](#trade)                   |                                               |
| `comments`                | `comment_created`  | -        | `{"parentEntityID":number,"parentEntityType":"Event / Series"}` | [`Comment`](#comment)               |                                               |
| `comments`                | `comment_removed`  | -        | same as above                                                   | [`Comment`](#comment)               |                                               |
| `comments`                | `reaction_created` | -        | same as above                                                   | [`Reaction`](#reaction)             |                                               |
| `comments`                | `reaction_removed` | -        | same as above                                                   | [`Reaction`](#reaction)             |                                               |
| `rfq`                     | `request_created`  | -        | -                                                               | [`Request`](#request)               |                                               |
| `rfq`                     | `request_edited`   | -        | -                                                               | [`Request`](#request)               |                                               |
| `rfq`                     | `request_canceled` | -        | -                                                               | [`Request`](#request)               |                                               |
| `rfq`                     | `request_expired`  | -        | -                                                               | [`Request`](#request)               |                                               |
| `rfq`                     | `quote_created`    | -        | -                                                               | [`Quote`](#quote)                   |                                               |
| `rfq`                     | `quote_edited`     | -        | -                                                               | [`Quote`](#quote)                   |                                               |
| `rfq`                     | `quote_canceled`   | -        | -                                                               | [`Quote`](#quote)                   |                                               |
| `rfq`                     | `quote_expired`    | -        | -                                                               | [`Quote`](#quote)                   |                                               |
| `crypto_prices`           | `update`           | -        | `{"symbol":string}`                                             | [`CryptoPrice`](#cryptoprice)       | [`CryptoPriceHistorical`](#initial-data-dump) |
| `crypto_prices_chainlink` | `update`           | -        | `{"symbol":string}`                                             | [`CryptoPrice`](#cryptoprice)       | [`CryptoPriceHistorical`](#initial-data-dump) |
| `clob_user`               | `order`            | ClobAuth | -                                                               | [`Order`](#order)                   |                                               |
| `clob_user`               | `trade`            | ClobAuth | -                                                               | [`Trade (CLOB User)`](#trade-1)     |                                               |
| `clob_market`             | `price_change`     | -        | `["100","200",...]` **(mandatory)**                             | [`PriceChanges`](#pricechanges)     |                                               |
| `clob_market`             | `agg_orderbook`    | -        | `["100","200",...]`                                             | [`AggOrderbook`](#aggorderbook)     | [`AggOrderbook`](#aggorderbook)               |
| `clob_market`             | `last_trade_price` | -        | `["100","200",...]`                                             | [`LastTradePrice`](#lasttradeprice) |                                               |
| `clob_market`             | `tick_size_change` | -        | `["100","200",...]`                                             | [`TickSizeChange`](#ticksizechange) |                                               |
| `clob_market`             | `market_created`   | -        | -                                                               | [`ClobMarket`](#clobmarket)         |                                               |
| `clob_market`             | `market_resolved`  | -        | -                                                               | [`ClobMarket`](#clobmarket)         |                                               |

## Auth

### ClobAuth

```ts
export interface ClobApiKeyCreds {
  key: string;        // API key
  secret: string;     // API secret
  passphrase: string; // Passphrase
}
```

```ts
client.subscribe({
  subscriptions: [
    {
      topic: "clob_user",
      type: "*",
      clob_auth: {
        key: "xxxxxx-xxxx-xxxxx-xxxx-xxxxxx",
        secret: "xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx",
        passphrase: "xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx",
      },
    },
  ],
});
```

## Schemas

### Activity

#### Trade

| Name              | Type    | Description                   |
| ----------------- | ------- | ----------------------------- |
| `asset`           | string  | ERC1155 token ID traded       |
| `bio`             | string  | Trader’s bio                  |
| `conditionId`     | string  | Market/CTF condition ID       |
| `eventSlug`       | string  | Event slug                    |
| `icon`            | string  | Market icon URL               |
| `name`            | string  | Trader’s name                 |
| `outcome`         | string  | Human-readable market outcome |
| `outcomeIndex`    | integer | Outcome index                 |
| `price`           | float   | Trade price                   |
| `profileImage`    | string  | Trader profile image URL      |
| `proxyWallet`     | string  | Trader proxy wallet           |
| `pseudonym`       | string  | Trader pseudonym              |
| `side`            | string  | `BUY` / `SELL`                |
| `size`            | integer | Trade size                    |
| `slug`            | string  | Market slug                   |
| `timestamp`       | integer | Trade timestamp               |
| `title`           | string  | Event title                   |
| `transactionHash` | string  | Tx hash                       |

### Comments

#### Comment

| Name               | Type   | Description         |
| ------------------ | ------ | ------------------- |
| `id`               | string | Comment ID          |
| `body`             | string | Content             |
| `parentEntityType` | string | `Event` or `Series` |
| `parentEntityID`   | number | Parent ID           |
| `parentCommentID`  | string | Parent comment ID   |
| `userAddress`      | string | User address        |
| `replyAddress`     | string | Reply user address  |
| `createdAt`        | string | Created timestamp   |
| `updatedAt`        | string | Updated timestamp   |

#### Reaction

| Name           | Type   | Description       |
| -------------- | ------ | ----------------- |
| `id`           | string | Reaction ID       |
| `commentID`    | number | Comment ID        |
| `reactionType` | string | Reaction type     |
| `icon`         | string | Reaction icon     |
| `userAddress`  | string | User address      |
| `createdAt`    | string | Created timestamp |

### RFQ

#### Request

| Name           | Type   | Description                 |
| -------------- | ------ | --------------------------- |
| `requestId`    | string | Request ID                  |
| `proxyAddress` | string | User proxy                  |
| `market`       | string | Market/CTF condition ID     |
| `token`        | string | ERC1155 token ID            |
| `complement`   | string | Complement ERC1155 token ID |
| `state`        | string | Current state               |
| `side`         | string | Buy/Sell                    |
| `sizeIn`       | number | Input size                  |
| `sizeOut`      | number | Output size                 |
| `price`        | number | Implied price               |
| `expiry`       | number | UNIX expiry                 |

#### Quote

| Name           | Type   | Description                 |
| -------------- | ------ | --------------------------- |
| `quoteId`      | string | Quote ID                    |
| `requestId`    | string | Linked request ID           |
| `proxyAddress` | string | User proxy                  |
| `token`        | string | ERC1155 token ID            |
| `state`        | string | Current state               |
| `side`         | string | Buy/Sell                    |
| `sizeIn`       | number | Input size                  |
| `sizeOut`      | number | Output size                 |
| `condition`    | string | Market/CTF condition ID     |
| `complement`   | string | Complement ERC1155 token ID |
| `expiry`       | number | UNIX expiry                 |

### CryptoPrice

| Name        | Type   | Description    |
| ----------- | ------ | -------------- |
| `symbol`    | string | Asset symbol   |
| `timestamp` | number | ms since epoch |
| `value`     | number | Price value    |

**Filters:** `{"symbol":"btcusdt"}`, `{"symbol":"ethusdt"}`, `{"symbol":"xrpusdt"}`, `{"symbol":"solusdt"}`

#### Initial data dump

On connection with a filter, server sends a snapshot:

* `symbol: string`
* `data: Array<{ timestamp: number; value: number }>`
  (See also: used by `crypto_prices` and `crypto_prices_chainlink`.)

### CLOB User

#### Order

| Name            | Type               | Description                           |
| --------------- | ------------------ | ------------------------------------- |
| `asset_id`      | string             | ERC1155 token ID                      |
| `created_at`    | string (timestamp) | UNIX creation                         |
| `expiration`    | string (timestamp) | UNIX expiration                       |
| `id`            | string             | Order hash                            |
| `maker_address` | string             | Funder address                        |
| `market`        | string             | Condition/market ID                   |
| `order_type`    | string             | `GTC` `GTD` `FOK` `FAK`               |
| `original_size` | string             | Size at placement                     |
| `outcome`       | string             | `YES` / `NO`                          |
| `owner`         | string             | Owner UUID                            |
| `price`         | string             | Decimal price                         |
| `side`          | string             | `BUY` / `SELL`                        |
| `size_matched`  | string             | Matched amount                        |
| `status`        | string             | e.g., `MATCHED`                       |
| `type`          | string             | `PLACEMENT` `CANCELLATION` `FILL` ... |

#### Trade (CLOB User)

| Name               | Type               | Description             |
| ------------------ | ------------------ | ----------------------- |
| `asset_id`         | string             | ERC1155 token ID        |
| `fee_rate_bps`     | string             | Fee rate (bps)          |
| `id`               | string             | Match ID                |
| `last_update`      | string (timestamp) | UNIX last update        |
| `maker_address`    | string             | Maker address           |
| `maker_orders`     | array              | See below               |
| `market`           | string             | Condition/market ID     |
| `match_time`       | string (timestamp) | UNIX execution          |
| `outcome`          | string             | `YES` / `NO`            |
| `owner`            | string             | Taker UUID              |
| `price`            | string             | Decimal price           |
| `side`             | string             | Taker side `BUY`/`SELL` |
| `size`             | string             | Total matched size      |
| `status`           | string             | e.g., `MINED`           |
| `taker_order_id`   | string             | Taker order ID          |
| `transaction_hash` | string             | Settlement tx           |

**`maker_orders` (array items)**

| Name             | Type   | Description    |
| ---------------- | ------ | -------------- |
| `asset_id`       | string | Maker token ID |
| `fee_rate_bps`   | string | Maker fee bps  |
| `maker_address`  | string | Maker address  |
| `matched_amount` | string | Amount matched |
| `order_id`       | string | Maker order ID |
| `outcome`        | string | `YES` / `NO`   |
| `owner`          | string | Maker UUID     |
| `price`          | string | Order price    |
| `side`           | string | `BUY` / `SELL` |

### CLOB Market

#### PriceChanges

| Name | Type               | Description           |
| ---- | ------------------ | --------------------- |
| `m`  | string             | Condition ID          |
| `pc` | array              | Price changes by book |
| `t`  | string (timestamp) | ms since epoch        |

**PriceChange (elements of `pc`)**

| Name | Type   | Description         |
| ---- | ------ | ------------------- |
| `a`  | string | `asset_id`          |
| `h`  | string | book snapshot hash  |
| `p`  | string | price (e.g., `0.5`) |
| `s`  | string | side `BUY`/`SELL`   |
| `si` | string | size at price       |
| `ba` | string | best ask            |
| `bb` | string | best bid            |

> **Filters required:** `["100","200",...]` (asset IDs).

#### AggOrderbook

| Name             | Type               | Description                    |
| ---------------- | ------------------ | ------------------------------ |
| `asks`           | array              | Aggregated asks `{price,size}` |
| `asset_id`       | string             | Asset ID                       |
| `bids`           | array              | Aggregated bids `{price,size}` |
| `hash`           | string             | Snapshot hash                  |
| `market`         | string             | Condition ID                   |
| `min_order_size` | string             | Min order size                 |
| `neg_risk`       | boolean            | NegRisk flag                   |
| `tick_size`      | string             | Min price increment            |
| `timestamp`      | string (timestamp) | ms since epoch                 |

**`asks`/`bids` item**
| `price`: string | `size`: string |

**Initial data dump:** on connection when filters used.

#### LastTradePrice

| Name           | Type   | Description    |
| -------------- | ------ | -------------- |
| `asset_id`     | string | Asset ID       |
| `fee_rate_bps` | string | Fee bps        |
| `market`       | string | Condition ID   |
| `price`        | string | Trade price    |
| `side`         | string | `BUY` / `SELL` |
| `size`         | string | Trade size     |

#### TickSizeChange

| Name            | Type   | Description              |
| --------------- | ------ | ------------------------ |
| `market`        | string | Condition ID             |
| `asset_id`      | string | Array of two ERC1155 IDs |
| `old_tick_size` | string | Previous tick            |
| `new_tick_size` | string | Updated tick             |

#### ClobMarket

| Name             | Type      | Description           |
| ---------------- | --------- | --------------------- |
| `market`         | string    | Condition ID          |
| `asset_ids`      | [2]string | Two ERC1155 asset IDs |
| `min_order_size` | string    | Min order size        |
| `tick_size`      | string    | Min price increment   |
| `neg_risk`       | boolean   | Negative risk         |

]]>
</file>
<file path=".dev/docs/manual-rate-limits.md">
<![CDATA[
POLYMARKET RATE LIMITS

API Rate Limits
​
How Rate Limiting Works
All rate limits are enforced using Cloudflare’s throttling system. When you exceed the maximum configured rate for any endpoint, requests are throttled rather than immediately rejected. This means:
Throttling: Requests over the limit are delayed/queued rather than dropped
Burst Allowances: Some endpoints allow short bursts above the sustained rate
Time Windows: Limits reset based on sliding time windows (e.g., per 10 seconds, per minute)
​
General Rate Limits
Endpoint	Limit	Notes
General Rate Limiting	5000 requests / 10s	Throttle requests over the maximum configured rate
”OK” Endpoint	50 requests / 10s	Throttle requests over the maximum configured rate
​
Data API Rate Limits
Endpoint	Limit	Notes
Data API (General)	100 requests / 10s	Throttle requests over the maximum configured rate
Data API (Alternative)	600 requests / 1 minute	1 hour block on violation
Data API /trades	30 requests / 10s	Throttle requests over the maximum configured rate
Data API “OK” Endpoint	10 requests / 10s	Throttle requests over the maximum configured rate
​
GAMMA API Rate Limits
Endpoint	Limit	Notes
GAMMA (General)	750 requests / 10s	Throttle requests over the maximum configured rate
GAMMA Get Comments	100 requests / 10s	Throttle requests over the maximum configured rate
GAMMA /events	100 requests / 10s	Throttle requests over the maximum configured rate
GAMMA /markets	100 requests / 10s	Throttle requests over the maximum configured rate
GAMMA /markets /events listing	100 requests / 10s	Throttle requests over the maximum configured rate
GAMMA Tags	100 requests / 10s	Throttle requests over the maximum configured rate
GAMMA Search	300 requests / 10s	Throttle requests over the maximum configured rate
​
CLOB API Rate Limits
​
General CLOB Endpoints
Endpoint	Limit	Notes
CLOB (General)	5000 requests / 10s	Throttle requests over the maximum configured rate
CLOB GET Balance Allowance	125 requests / 10s	Throttle requests over the maximum configured rate
CLOB UPDATE Balance Allowance	20 requests / 10s	Throttle requests over the maximum configured rate
​
CLOB Market Data
Endpoint	Limit	Notes
CLOB /book	200 requests / 10s	Throttle requests over the maximum configured rate
CLOB /books (website)	300 requests / 10s	Throttle requests over the maximum configured rate
CLOB /books	80 requests / 10s	Throttle requests over the maximum configured rate
CLOB /price	200 requests / 10s	Throttle requests over the maximum configured rate
CLOB /prices	80 requests / 10s	Throttle requests over the maximum configured rate
CLOB /midprice	200 requests / 10s	Throttle requests over the maximum configured rate
CLOB /midprices	80 requests / 10s	Throttle requests over the maximum configured rate
​
CLOB Ledger Endpoints
Endpoint	Limit	Notes
CLOB Ledger (/trades /orders /notifications /order)	300 requests / 10s	Throttle requests over the maximum configured rate
CLOB Ledger /data/orders	150 requests / 10s	Throttle requests over the maximum configured rate
CLOB Ledger /data/trades	150 requests / 10s	Throttle requests over the maximum configured rate
CLOB /notifications	125 requests / 10s	Throttle requests over the maximum configured rate
​
CLOB Markets & Pricing
Endpoint	Limit	Notes
CLOB Price History	100 requests / 10s	Throttle requests over the maximum configured rate
CLOB Markets	250 requests / 10s	Throttle requests over the maximum configured rate
CLOB Market Tick Size	50 requests / 10s	Throttle requests over the maximum configured rate
CLOB markets/0x	50 requests / 10s	Throttle requests over the maximum configured rate
CLOB /markets listing	100 requests / 10s	Throttle requests over the maximum configured rate
​
CLOB Authentication
Endpoint	Limit	Notes
CLOB API Keys	50 requests / 10s	Throttle requests over the maximum configured rate
​
CLOB Trading Endpoints
Endpoint	Limit	Notes
CLOB POST /order	2400 requests / 10s (240/s)	BURST - Throttle requests over the maximum configured rate
CLOB POST /order	24000 requests / 10 minutes (40/s)	Throttle requests over the maximum configured rate
CLOB POST /order (by token id)	800 requests / 10s (80/s)	BURST - Throttle requests over the maximum configured rate
CLOB POST /order (by token id)	12000 requests / 10 minutes (20/s)	Throttle requests over the maximum configured rate
CLOB DELETE /order	2400 requests / 10s (240/s)	BURST - Throttle requests over the maximum configured rate
CLOB DELETE /order	24000 requests / 10 minutes (40/s)	Throttle requests over the maximum configured rate
CLOB POST /orders	800 requests / 10s (80/s)	BURST - Throttle requests over the maximum configured rate
CLOB POST /orders	12000 requests / 10 minutes (20/s)	Throttle requests over the maximum configured rate
CLOB DELETE /orders	800 requests / 10s (80/s)	BURST - Throttle requests over the maximum configured rate
CLOB DELETE /orders	12000 requests / 10 minutes (20/s)	Throttle requests over the maximum configured rate
CLOB DELETE /cancel-all	200 requests / 10s (20/s)	BURST - Throttle requests over the maximum configured rate
CLOB DELETE /cancel-all	3000 requests / 10 minutes (5/s)	Throttle requests over the maximum configured rate
CLOB DELETE /cancel-market-orders	800 requests / 10s (80/s)	BURST - Throttle requests over the maximum configured rate
CLOB DELETE /cancel-market-orders	12000 requests / 10 minutes (20/s)	Throttle requests over the maximum configured rate
​
Other API Rate Limits
Endpoint	Limit	Notes
RELAYER /submit	15 requests / 1 minute	Throttle requests over the maximum configured rate
User PNL API	100 requests / 10s	Throttle requests over the maximum configured rate
Glossary

]]>
</file>
<file path=".dev/md/plans/2025/10/07/13-09-13_discord-bot-slash-commands.md">
<![CDATA[
## Plan: Discord Bot with Slash Commands (+Autocomplete) for Status, Logs, Portfolio, Positions, Position, Close, Close-All

## Proposed Plan

### ❌ Critical Information Needed

- Do you prefer commands registered as guild-only during development (`DISCORD_GUILD_ID`) or global? Guild scope updates instantly; global can take up to 1 hour to propagate. If not provided, we will use guild scope by default for faster DX.
- Do you already have a Discord Application and Bot set up with the correct OAuth2 scopes? Required: `bot` and `applications.commands`. If not, we will include setup steps.

### ⚠️ Initial Best Assumptions to Address Ambiguities

1. MODERATE: Command scope -> We will register commands to a single guild (via `DISCORD_GUILD_ID`) for immediate availability; we can add a `--global` flag later. Rationale: Faster iteration and safer testing.
2. MODERATE: Bot runtime -> We will run the bot in the same process as the app, started from `main-loop`, non-blocking. Rationale: Simpler deployment and resource sharing.
4. MODERATE: Autocomplete dataset size -> Position counts are small enough to compute suggestions on-demand via DB queries within Discord’s 3s initial response limit.
The Discord Bot is in COMPLETELY PRIVATE server where only owner has access. No need to implement allowlisting.

### ☁️ Current State

1. Node.js ≥20, TypeScript strict, pnpm. See `package.json`.
2. App runs as a long-lived process: entrypoint `src/index.ts` calls `run()` in `src/core/app/main-loop.ts`.
3. DB: PostgreSQL via Drizzle; key tables `position`, `copy_order`, `leader_trade`, etc. Helpers in `src/utils/external-helpers.ts` expose portfolio summary and formatting.
4. Event bus emits lifecycle and trading events (`src/core/domain/event.ts`). Discord notifications currently via webhook only (`src/notify/discord-webhook.ts`).
5. RTDS stream in `src/core/data-ingestion/polymarket-rtds.ts` exposes `lastRtdsMessageTimeMs` for connectivity telemetry.
6. No Discord Bot runtime yet (`src/rpc/discord-bot.ts` is empty).

### 🌟 Desired Goal State

1. A Discord Bot connected via Gateway with slash commands visible in the configured guild.
2. Slash commands:
   - `/status`: RTDS/WS connectivity, open positions count, current unrealized PnL, lifetime realized PnL.
   - `/logs [n]`: Return last N lines of humanized logs.
   - `/portfolio`: Portfolio summary (reuse existing formatting).
   - `/positions`: Table of current open positions with columns: ID, UPNL.
   - `/position [id]`: Detailed position view with extra fields (tokenId, Entry Price (Avg), Current Price, Unrealized PnL).
   - `/close [id]`: Force close a specific position by ID.
   - `/close-all`: Force close all running positions.
3. Autocomplete for commands needing IDs (e.g., `/position` and `/close`), suggesting open position IDs.
4. All responses ephemeral by default (for private UX), with emojis and clear formatting.
5. DRY, typed, and non-intrusive to the main trading flow (sub-50ms overhead preserved for critical paths).

Traceability: Each bullet maps to the user requirements list (status/logs/portfolio/positions/position/close/close-all, with autocomplete and emojis).

### 🛣️ Brainstorm Implementation Approaches

- Approach 1: Gateway bot using `discord.js` v14
  - Pros: No public HTTP ingress needed; interactions and autocompletes handled via Gateway. Rich typing and utilities.
  - Cons: Adds a runtime dependency and a background connection.
- Approach 2: HTTP-only Interactions (Outgoing Webhook)
  - Pros: No Gateway connection.
  - Cons: Requires public HTTPS endpoint and signature verification; more infra.
- Approach 3: Hybrid (Gateway for commands, Webhook for followups)
  - Pros: Flexibility.
  - Cons: Unnecessary complexity for this private, single-user bot.

Chosen Approach: 1 (Gateway + discord.js)
- Reasons: No server needed; straightforward slash command + autocomplete handling; quick iteration in a private project.

Rollback Strategy
- The bot starts only if `DISCORD_BOT_TOKEN` is present. No token → no bot runtime. Command registration is an explicit script; revert by deleting commands and removing token.

### 🗺️ Very Detailed Plan

1) Dependencies and Env
- Add deps: `discord.js`, `@discordjs/rest`, `discord-api-types`.
- Add env vars to `.env.*`:
  - `DISCORD_BOT_TOKEN`: Bot token
  - `DISCORD_APP_ID`: Application (client) ID
  - `DISCORD_GUILD_ID`: Guild ID (dev scope)

2) Command Definitions (single source of truth)
- Create `src/rpc/discord/commands.ts` exporting a typed array of command definitions and helpers for registration + runtime handling.
- Commands list:
  - `status` (no options)
  - `logs` options: integer `n` (1–500, default 100)
  - `portfolio` (no options)
  - `positions` (no options)
  - `position` options: integer `id` (required, with autocomplete)
  - `close` options: integer `id` (required, with autocomplete, guarded)
  - `close-all` (no options, guarded)

3) Registration Script
- Add `scripts/register-discord-commands.ts` using `@discordjs/rest` to upsert commands to the configured guild.
- CLI script in `package.json`: `pnpm discord:register:guild` (and optional `discord:register:global`).
- Reference: Application Commands API [Discord Application Commands](https://discord.com/developers/docs/interactions/application-commands).

4) Bot Runtime
- Implement `startDiscordBot(params)` in `src/rpc/discord-bot.ts`:
  - Construct a `Client` with `GatewayIntentBits.Guilds` only.
  - On `ready`, log success.
  - Handle `interactionCreate`:
    - If `isChatInputCommand()` → route by command name.
    - If `isAutocomplete()` → return suggestions for `position`/`close`.
  - Ephemeral initial responses (defer reply within 3s if needed). Reference: 3s initial response rule and ephemeral flags [Receiving and Responding](https://discord.com/developers/docs/interactions/receiving-and-responding).

5) Data Access & DRY helpers
- Reuse existing helpers from `src/utils/external-helpers.ts`:
  - `getPortfolioSummary(mode)` to compute Unrealized/Realized PnL and last-closed items.
  - `buildClosedPositionsSummaryMessage()` for `/portfolio` rendering.
- Logs: use `getLogTailSnapshot()` from `src/utils/logger.ts`; trim to last `n` lines (server-side split) and wrap in a code block.
- Status: compute RTDS status by checking `lastRtdsMessageTimeMs` staleness (e.g., idle > 60s = disconnected). Use DB counts for open positions and reuse `getPortfolioSummary` for PnL.
- Positions: query open positions, compute UPNL from `unrealizedPnlUsd`, and render a compact table (code block). Keep small width; show up to 100 rows; paginate later if needed.
- Position detail: join via `loadMetaForPosition(id)`; include tokenId, entry price avg, current price, unrealized PnL, leader and event link; add emojis.

6) Guarded Mutations
- Thread-safety: use the existing `IExecutionProvider` instance from `main-loop` by injecting it into `startDiscordBot`. Close operations call `executionProvider.closePosition({ positionId, reason: 'MANUAL', source: 'manual', ingestSource: 'manual' })`.
- Non-blocking: acknowledge with an ephemeral reply, then perform close; send follow-up ephemeral result (success/fail). Interaction token validity is 15 minutes—sufficient for follow-ups [Receiving and Responding](https://discord.com/developers/docs/interactions/receiving-and-responding).

7) Wire-up in Main Loop
- In `src/core/app/main-loop.ts`, after provider is ready and notifier/listeners registered, call `startDiscordBot({ executionProvider: provider, env, notifier })`. Ensure failures don’t crash the bot.

8) Metrics & Logging
- Log each command execution with timing and principal (Discord user). Keep logs concise.
- Emit counters via `incrementCounter('discord.command', { name: cmd })`.

9) Emojis & UX
- Use emojis for headings/status: ✅/🟥 for ok/fail, 📊 for stats, 🧮 for PnL, 📜 for logs, 🔧 for actions.
- Ephemeral replies by default to avoid channel noise. Offer a `public` boolean option later if needed.

10) Rate limits + Perf
- Autocomplete queries: limit to 20 suggestions and short labels (`"#123 · UPNL +1.23 USDC"`). Discord overall command content must stay under 8000 chars [Slash command limits](https://discord.com/developers/docs/interactions/application-commands#slash-commands).
- Defer initial replies when DB queries might exceed ~500ms; edit the reply when ready.

### 💻 Specs

Models / Schemas (no DB migrations needed)
- We reuse existing tables. Optionally, add a covering index later if `/positions` proves slow.

Classes
- `DiscordCommandRegistrar`
  - Purpose: Register commands to guild or global.
  - Methods:
    - `registerGuildCommands(appId: string, guildId: string, token: string, defs: RESTPostAPIApplicationCommandsJSONBody[]): Promise<void>`
    - `registerGlobalCommands(appId: string, token: string, defs: RESTPostAPIApplicationCommandsJSONBody[]): Promise<void>`

Functions (typed)
```ts
// src/rpc/discord/commands.ts
export type CommandName = 'status' | 'logs' | 'portfolio' | 'positions' | 'position' | 'close' | 'close-all';

export interface CommandContext {
    mode: import('@/core/domain/execution').ExecutionMode;
    executionProvider: import('@/core/domain/execution').IExecutionProvider;
}

export interface AutocompleteItem { name: string; value: number; }

export function buildSlashCommandDefs(): import('discord-api-types/v10').RESTPostAPIApplicationCommandsJSONBody[];
export function handleCommand(name: CommandName, options: Record<string, unknown>, ctx: CommandContext): Promise<{ content: string; ephemeral?: boolean }>;
export function handleAutocomplete(name: CommandName, focused: string, ctx: CommandContext): Promise<AutocompleteItem[]>;
```

Library Calls (Discord)
```ts
// Client runtime
import { Client, GatewayIntentBits, Partials, Interaction, AutocompleteInteraction, ChatInputCommandInteraction } from 'discord.js';

const client = new Client({ intents: [GatewayIntentBits.Guilds] });
client.on('ready', () => logger.success({ tag: 'discord-bot' }, 'Discord bot ready'));
client.on('interactionCreate', async (interaction: Interaction) => { /* route */ });
await client.login(process.env.DISCORD_BOT_TOKEN!);
```

```ts
// Registration via REST
import { REST, Routes } from 'discord.js';
const rest = new REST({ version: '10' }).setToken(token);
await rest.put(Routes.applicationGuildCommands(appId, guildId), { body: defs });
// For global:
await rest.put(Routes.applicationCommands(appId), { body: defs });
```

API Contracts (Discord)
- Slash commands and interactions per official docs: [Application Commands](https://discord.com/developers/docs/interactions/application-commands), [Receiving & Responding](https://discord.com/developers/docs/interactions/receiving-and-responding), [Autocomplete](https://discord.com/developers/docs/interactions/application-commands#autocomplete).
- Timeouts: initial response within 3s; tokens valid 15m for follow-ups.

Config & Feature Flags
- `DISCORD_BOT_TOKEN` (string, required to start bot). Example: `"Bot x.y.z"` token.
- `DISCORD_APP_ID` (string, required for registration).
- `DISCORD_GUILD_ID` (string, recommended for fast dev updates).

Observability
- Counters: `discord.command` { name }, `discord.autocomplete` { name }, `discord.error` { name }.
- Logs include latency and rows returned for DB-heavy calls.

Security
- Validate `n` for `/logs` (1–500). Validate `id` is numeric and belongs to current `mode` when acting.

Perf
- Autocomplete limited to 20 results; DB queries indexed fields.
- Use deferred replies for long ops.

### 📂 Files Involved

🟦 TO READ AND UNDERSTAND FIRST
- `/home/probi/swe/repo/polymarket-copy-bot/src/core/app/main-loop.ts` — wiring point to start the bot.
- `/home/probi/swe/repo/polymarket-copy-bot/src/utils/logger.ts` — getLogTailSnapshot.
- `/home/probi/swe/repo/polymarket-copy-bot/src/utils/external-helpers.ts` — portfolio summary helpers.
- `/home/probi/swe/repo/polymarket-copy-bot/src/core/data-ingestion/polymarket-rtds.ts` — `lastRtdsMessageTimeMs` for RTDS status.
- `/home/probi/swe/repo/polymarket-copy-bot/src/core/store/schema.ts` — position and related tables.

🟨 MODIFY
- `/home/probi/swe/repo/polymarket-copy-bot/package.json` — add deps and scripts (register commands).
- `/home/probi/swe/repo/polymarket-copy-bot/src/core/app/main-loop.ts` — call `startDiscordBot(...)` after provider ready.
- `/home/probi/swe/repo/polymarket-copy-bot/.env.*` — add new envs.

🟩 CREATE
- `/home/probi/swe/repo/polymarket-copy-bot/src/rpc/discord/commands.ts` — command defs/handlers.
- `/home/probi/swe/repo/polymarket-copy-bot/src/rpc/discord-bot.ts` — gateway client and router.
- `/home/probi/swe/repo/polymarket-copy-bot/scripts/register-discord-commands.ts` — one-off command registrar.

🟥 DELETE
- None.

### 🧭 Optional Visuals

```mermaid
sequenceDiagram
  participant User
  participant Discord
  participant Bot
  participant DB
  User->>Discord: /position id:123
  Discord->>Bot: InteractionCreate (3s window)
  Bot->>Discord: deferReply(ephemeral)
  Bot->>DB: select position + meta + current price
  DB-->>Bot: rows
  Bot->>Discord: editReply(details)
```

### 🌐 Helpful Tool Results (as tool’s session_id)
- Discord docs fetch: `smart_fetch_url_multiple/we_need_authoritative_details_for_discord_slash_commands_responses_and_autocomplete_to_write_an_accurate_plan_with_citations/z8ykatabeo`

### 📚 References
- Discord Application Commands (Slash Commands): https://discord.com/developers/docs/interactions/application-commands
- Receiving and Responding to Interactions (timeouts, ephemeral, followups): https://discord.com/developers/docs/interactions/receiving-and-responding
- Autocomplete: https://discord.com/developers/docs/interactions/application-commands#autocomplete

Why these: Official Discord developer docs ensure correct, current contracts and limits.

### ▶️ Plan Summary

1. Add `discord.js` + REST deps and env vars; register commands to guild.
2. Implement typed command defs, autocomplete, and handlers (DRY helpers reused).
3. Wire `startDiscordBot` into `main-loop` with injected `executionProvider` and `mode` context.
4. Implement guarded `/close` and `/close-all`; make replies ephemeral with emojis and tables.
5. Log/metrics for observability; keep all operations non-blocking and within 3s initial response.

### 🔴 IMPORTANT REMINDERS
- Initial reply within 3 seconds; use deferral if needed.
- Keep autocomplete to ≤20 items and concise labels.
- Protect close commands via user allowlist; default deny if not configured.
- Don’t block execution critical paths; bot runs independently and uses short DB queries.

]]>
</file>
<file path=".dev/md/plans/2025/10/07/do not change.md">
<![CDATA[
<|PLAN_FORMAT_START|>
# Plan: Discord Bot with Slash Commands, Autocomplete, and Portfolio Controls

## 👤 User's Original Message
Original User Message:
```txt
/PLAN_X 

- [ ]  Add Discord Bot (Important: Include emojis for UI and UX | Ensure you use the Discord Slash Commands API that has autocompletes for UX - not manual slash commands | Ensure DRY in code)
    - [ ]  /status - Returns bot states such as essential statuses like RTDS status (is connected/disconnected), WS statuses, Num Current Open Positions, Current Unrealized PnL, Lifetime Realized PnL
    - [ ]  /logs [n] - Returns last n lines of human logs
    - [ ]  /portfolio - Same as portfolio summary
    - [ ]  /positions - Returns all current running positions, table formatted
        - [ ]  Cols: ID, UPNL
    - [ ]  /position [id] - Returns position details. Format is same as Position Opened from Discord Webhook, but include token id/asset id below Market Link, and include Entry Price (Avg) below Entry Price, and include Current Price below Entry Price (Avg), and include Unrealized PNL below Current Price
    - [ ]  /close [id] - Force close pos by id
    - [ ]  /close-all - Force close all running pos
```

## Proposed Plan

### ❌ Critical Information Needed
None blocking. We can safely proceed with guild-scoped commands first to avoid global propagation delays.

### ⚠️ Initial Best Assumptions to Address Ambiguities
1. MODERATE: Discord bot token and application (client) ID will be provided via env. -> We'll add validated env vars and guard startup.
2. MODERATE: Commands will be registered per-guild in `local/test` envs and optionally globally for production. -> Provide scripts for both.
3. MODERATE: Max log lines `n` default to 50 if omitted; cap to 500 for safety. -> Prevent spam and meet UX.

### ☁️ Current State
1. TypeScript Node service with strict typing; pnpm; dotenvx; Drizzle PostgreSQL; main entry `src/index.ts` -> `run()` in `src/core/app/main-loop.ts`.
2. Discord Webhook notifications already exist in `src/notify/discord-webhook.ts` and listeners in `src/notify/listeners.ts`.
3. Utilities available:
   - `getLogTailSnapshot()` in `src/utils/logger.ts` for logs
   - Portfolio helpers in `src/utils/external-helpers.ts`: `getPortfolioSummary`, `buildClosedPositionsSummaryMessage`, `loadMetaForPosition`
4. Placeholder file `src/rpc/discord-bot.ts` (empty) ready for bot implementation.

### 🌟 Desired Goal State
1. Slash-command Discord bot running inside the same process as the main app (optional toggle), exposing:
   - `/status`, `/logs`, `/portfolio`, `/positions`, `/position`, `/close`, `/close-all`
2. Autocomplete UX for `/position` (id argument) and for `/logs n` numeric helper.
3. Responses use embeds, emojis, ephemeral responses where appropriate, and follow DRY helpers.
4. Commands registered per-guild in dev; script available for global production registration.

### 🛣️ Brainstorm Implementation Approaches
* Approach 1: Use discord.js v14 Client + REST registerer in-process.
  - Pros: Mature, typed, great docs; easy Autocomplete; resilient.
  - Cons: Adds dependency; needs gateway connection.
* Approach 2: Raw Discord REST/websocket implementation.
  - Pros: Minimal deps.
  - Cons: Reinventing client; higher maintenance.
* Approach 3: Separate microservice.
  - Pros: Isolation.
  - Cons: Extra infra, complexity.

Chosen Approach: 1 — discord.js v14 in-process for fastest delivery, rich features, and typings.

Rollback: Feature flag to disable the Discord bot without code removal; no DB migrations.

### 🗺️ Very Detailed Plan
1. Dependencies and env
   - Add `discord.js` and `@discordjs/rest`, `discord-api-types` to deps.
   - Env vars (validated in `src/core/config/env.ts`):
     - `DISCORD_BOT_TOKEN` (string, required when ENABLE_DISCORD_BOT=true)
     - `DISCORD_APP_ID` (string)
     - `DISCORD_GUILD_IDS` (comma-separated list for dev registration)
     - `ENABLE_DISCORD_BOT` (boolean; default false)
   - Rationale: Required to login a gateway client and register commands.

2. Command registration script (non-interactive CLI)
   - Create `scripts/discord-register-commands.ts`:
     - Reads commands built in `src/rpc/discord-bot.ts` (export JSON defs)
     - Uses REST `PUT` routes for guild(s) during local; global for production
     - Per docs: Register via HTTP; upsert behavior [Application Commands](https://discord.com/developers/docs/interactions/application-commands#registering-a-command). Limit: 25 options per command.

3. Bot runtime integration
   - Implement `src/rpc/discord-bot.ts`:
     - Export `startDiscordBot(env, deps): { stop(): Promise<void> }`
     - Inside: create `Client` with intents `Guilds` only; hook `interactionCreate`.
       - Autocomplete: detect `interaction.isAutocomplete()` and return suggestions.
       - Commands: detect `interaction.isChatInputCommand()` and route.
       - Use `interaction.reply({ embeds, flags: MessageFlags.Ephemeral })` for ephemeral where useful. `ephemeral` is deprecated; use `flags` [InteractionReplyOptions](https://discord.js.org/docs/packages/discord.js/stable/InteractionReplyOptions:Interface).

4. DRY helper layer for embeds and formatting
   - Create `src/rpc/discord/ui.ts`:
     - `embed(title, fields, color)` returning APIEmbed
     - Emoji constants; table builder for monospaced columns
     - `formatPositionDetails()` reusing `loadMetaForPosition` and helpers from `utils/external-helpers`

5. Implement commands
   - `/status`
     - Show: RTDS status (connected/disconnected) via `lastRtdsMessageTimeMs` age from `src/core/data-ingestion/polymarket-rtds.ts`, open positions count (DB), unrealized/realized via `getPortfolioSummary`.
   - `/logs n?`
     - Optional integer with autocomplete (suggest 25, 50, 100, 200, 500). Use `getLogTailSnapshot(maxChars)` and slice to n lines; return as code block. Cap n to 500.
   - `/portfolio`
     - Use `getPortfolioSummary` + `buildClosedPositionsSummaryMessage`, post embed.
   - `/positions`
     - Query open positions for current mode; render table with columns: ID, UPNL (current unrealized per position), include emojis.
   - `/position id`
     - Autocomplete id from recent open/closed positions; show embed: Market Link, Token/Asset ID, Entry Price, Entry Price (Avg), Current Price, Unrealized PnL.
   - `/close id`
     - Calls provider.closePosition with reason `MANUAL`, source `manual`.
   - `/close-all`
     - Iterate open positions; call closePosition with reason `MANUAL`.
   - All DB access via existing schema; mode aware (dry_run/live).

6. Autocomplete behavior
   - Use Discord Autocomplete per spec (focused option true; choices cannot co-exist) [Autocomplete](https://discord.com/developers/docs/interactions/application-commands#autocomplete).
   - `/position id` -> suggest top 25 open position IDs by recency; `/logs n` -> suggest list [25,50,100,200,500].

7. Safety, limits, and UX
   - Ephemeral responses for `/logs` and `/close*`; non-ephemeral for portfolio summaries.
   - Guard long outputs with truncation; log dev-only warnings when truncating.
   - Emojis: ✅/🟥/✳️/📈/📉/🧮/🧰 for sections.

8. Wire into main-loop
   - In `src/core/app/main-loop.ts`, after bot started event, conditionally start Discord bot if `ENABLE_DISCORD_BOT` true. Reuse notifier fields in logs, but keep separate.

9. Scripts
   - Add pnpm scripts:
     - `discord:register:guild` (per env GUILD_IDS)
     - `discord:register:global`
     - `discord:dev` (run bot with app)

10. Rollback
   - Set `ENABLE_DISCORD_BOT=false` to disable. Commands can remain registered; no runtime impact.

Traceability bullets:
- Slash commands + autocomplete → steps 2–6
- Status/logs/portfolio/positions/position/close/close-all → step 5
- Emojis, embeds, UX → steps 4–5,7
- DRY → step 4

### 💻 Specs

Models / Schemas: no DB schema changes.

Classes
```ts
// src/rpc/discord-bot.ts
export interface DiscordBotDeps {
    getMode(): 'dry_run' | 'live';
    closePosition(args: { positionId: number }): Promise<void>;
}
export function startDiscordBot(env: Env, deps: DiscordBotDeps): Promise<{ stop(): Promise<void> }>; // starts client, registers handlers
```

Functions
```ts
// src/rpc/discord/ui.ts
export function buildEmbed(params: { title: string; description?: string; fields?: { name: string; value: string; inline?: boolean }[]; color?: number }): APIEmbed;
export function table(columns: string[], rows: string[][]): string; // returns monospaced table inside ```
export function positionDetailEmbed(positionId: number): Promise<APIEmbed>; // uses loadMetaForPosition, DB reads
```

Libraries Involved
- discord.js v14 — Client, events, embed building, interaction replies [(Client)](https://discord.js.org/docs/packages/discord.js/stable/Client:Class)
- Discord Dev Portal — command registration/Autocomplete [(Application Commands)](https://discord.com/developers/docs/interactions/application-commands), [(Autocomplete)](https://discord.com/developers/docs/interactions/application-commands#autocomplete)

API Call Snippets
```ts
// Register per-guild
await rest.put(
  Routes.applicationGuildCommands(appId, guildId),
  { body: commands }
);

// Global
await rest.put(
  Routes.applicationCommands(appId),
  { body: commands }
);
```

Reply Options
```ts
// Ephemeral reply in v14: prefer flags
await interaction.reply({
  content: 'Done',
  flags: MessageFlags.Ephemeral,
});
```

Config & Feature Flags
```ts
// src/core/config/env.ts additions
DISCORD_BOT_TOKEN: z.string().optional(),
DISCORD_APP_ID: z.string().optional(),
DISCORD_GUILD_IDS: z.string().optional(), // comma list
ENABLE_DISCORD_BOT: z.string().optional().transform(v => v ? v.toLowerCase() === 'true' : false),
```

Observability
- Counters: `discord.commands.invoked`, `discord.commands.error`
- Logs around registration and interaction handling.

### 📂 Files Involved

🟦 TO READ FIRST
- `/home/probi/swe/repo/polymarket-copy-bot/src/utils/logger.ts` — logs snapshot helper
- `/home/probi/swe/repo/polymarket-copy-bot/src/utils/external-helpers.ts` — portfolio and meta helpers
- `/home/probi/swe/repo/polymarket-copy-bot/src/core/app/main-loop.ts` — startup wiring

🟨 MODIFY
- `/home/probi/swe/repo/polymarket-copy-bot/src/core/config/env.ts` — add envs
- `/home/probi/swe/repo/polymarket-copy-bot/src/core/app/main-loop.ts` — start bot when enabled
- `/home/probi/swe/repo/polymarket-copy-bot/package.json` — add scripts and deps

🟩 CREATE
- `/home/probi/swe/repo/polymarket-copy-bot/src/rpc/discord-bot.ts` — bot runtime
- `/home/probi/swe/repo/polymarket-copy-bot/src/rpc/discord/ui.ts` — embeds/tables DRY
- `/home/probi/swe/repo/polymarket-copy-bot/scripts/discord-register-commands.ts` — registration CLI

🟥 DELETE
- None

### 🧭 Optional Visuals

```mermaid
sequenceDiagram
    participant User
    participant Discord
    participant Bot
    participant DB
    User->>Discord: /position 123
    Discord->>Bot: interactionCreate (ChatInput)
    Bot->>DB: loadMetaForPosition(123)
    DB-->>Bot: meta, prices, pnl
    Bot-->>Discord: reply embed (non-ephemeral)
```

### 🌐 Helpful Tool Results (as tool’s session_id)
- Docs: smart_fetch_url_multiple/fetch_official_docs_pages_to_cite_and_ensure_correct_apis_for_discord_slash_commands_deployment_and_autocomplete/mp69lsskz8
- Docs: smart_fetch_url_multiple/collect_official_docs_citations_for_implementing_discord_slash_commands_autocomplete_and_reply_flags_in_discord_js_v14_and_discord_dev_portal/j5yw1fqqgx
- Repo scan: codebase_search/find_existing_placeholders_or_integration_points_for_discord_bot/gvmpzsdxt4
- Repo scan: codebase_search/locate_functions_for_logs_and_portfolio_summary/94tytxcxjo

### 📚 References
- Discord Application Commands (Slash, Autocomplete, Limits): https://discord.com/developers/docs/interactions/application-commands
- discord.js InteractionReplyOptions (ephemeral flags): https://discord.js.org/docs/packages/discord.js/stable/InteractionReplyOptions:Interface
- discord.js Client interactionCreate event: https://discord.js.org/docs/packages/discord.js/stable/Client:Class

### ▶️ Plan Summary
1. Add envs + dependencies; create registration script.
2. Implement `startDiscordBot` with handlers for ChatInput and Autocomplete.
3. Build DRY UI helpers and all requested commands.
4. Wire the bot under a feature flag; add pnpm scripts for registration.
5. Deploy guild-scoped in dev; optional global in prod.

### 🔴 IMPORTANT REMINDERS
- Don’t mix `choices` with `autocomplete` on the same option (Discord spec).
- Use `flags: MessageFlags.Ephemeral` in replies, not deprecated `ephemeral`.
- Cap outputs and use ephemeral for sensitive responses.
<|PLAN_FORMAT_END|>

]]>
</file>
<file path="scripts/register-discord-commands.ts">
<![CDATA[
import { loadDiscordEnv } from '@/core/config/env-discord';
import { buildSlashCommandDefs } from '@/rpc/discord/discord-commands';
import { createLogger } from '@/utils/telemetry/logger';

const logger = createLogger({ tag: 'discord.register' });

async function sleep(ms: number): Promise<void> {
    await new Promise((resolve) => setTimeout(resolve, ms));
}

async function putRawJson(url: string, token: string, payloadJson: string, label: string): Promise<void> {
    let attempts = 0;
    while (true) {
        const res = await fetch(url, {
            method: 'PUT',
            headers: {
                'Content-Type': 'application/json',
                Authorization: `Bot ${token}`,
            },
            body: payloadJson,
        });
        if (res.status === 429) {
            const h1 = res.headers.get('retry-after');
            const h2 = res.headers.get('x-ratelimit-reset-after');
            const retryMs = Math.max(0, Math.ceil(parseFloat(h1 ?? h2 ?? '1') * 1000));
            attempts += 1;
            logger.warn({ label, attempts, retryMs }, 'rate_limited_retry');
            if (attempts > 5) {
                throw new Error(`Discord rate limit: exceeded retries for ${label}`);
            }
            await sleep(retryMs);
            continue;
        }
        if (!res.ok) {
            const body = await res.text();
            throw new Error(`Discord API error (${label}): ${res.status} ${body}`);
        }
        return;
    }
}

async function main(): Promise<void> {
    const env = loadDiscordEnv();
    const scopeArg = process.argv.find((a) => a.startsWith('--scope=')) ?? '--scope=guild';
    const scope = scopeArg.split('=')[1] ?? 'guild';

    const token = env.DISCORD_BOT_TOKEN;
    const appId = env.DISCORD_APP_ID;
    const guildId = env.DISCORD_GUILD_ID;
    const channelId = env.DISCORD_CHANNEL_ID;

    if (!token) throw new Error('DISCORD_BOT_TOKEN is required');
    if (!appId) throw new Error('DISCORD_APP_ID is required');

    // Preflight: verify token belongs to the specified application
    const meRes = await fetch('https://discord.com/api/v10/users/@me', {
        method: 'GET',
        headers: { Authorization: `Bot ${token}` },
    });
    if (!meRes.ok) {
        const body = await meRes.text();
        throw new Error(`Discord token validation failed: ${meRes.status} ${body}`);
    }
    const me = (await meRes.json()) as { id?: string } | unknown;
    const userId = (me as any)?.id ? String((me as any).id) : undefined;
    if (!userId) {
        throw new Error('Discord token validation succeeded but no user id returned');
    }
    if (String(userId) !== String(appId)) {
        throw new Error(
            `Bot token user id does not match DISCORD_APP_ID. token.userId=${userId} env.DISCORD_APP_ID=${String(appId)}`
        );
    }

    const defs = buildSlashCommandDefs();

    let url: string;
    if (scope === 'global') {
        url = `https://discord.com/api/v10/applications/${appId}/commands`;
    } else {
        if (!guildId) throw new Error('DISCORD_GUILD_ID is required for guild scope');
        url = `https://discord.com/api/v10/applications/${appId}/guilds/${guildId}/commands`;
    }

    // Force wipe using bulk overwrite (minimizes requests and avoids 429s)
    try {
        const globalUrl = `https://discord.com/api/v10/applications/${appId}/commands`;
        const guildUrl = guildId
            ? `https://discord.com/api/v10/applications/${appId}/guilds/${guildId}/commands`
            : undefined;
        logger.info('Wiping all global commands via bulk overwrite');
        await putRawJson(globalUrl, token, '[]', 'wipe_global');
        if (guildUrl) {
            logger.info({ guildId }, 'Wiping all guild commands via bulk overwrite');
            await putRawJson(guildUrl, token, '[]', 'wipe_guild');
        }
        logger.success('Command wipe completed');
    } catch (wipeErr) {
        logger.warn({ err: wipeErr }, 'wipe_commands_warning');
    }

    logger.info({ scope, url, count: defs.length }, 'Upserting Discord application commands');
    await putRawJson(url, token, JSON.stringify(defs), 'upsert_commands');
    logger.success('Commands registered');
}

main().catch((err) => {
    logger.error({ err }, 'register_commands_failed');
    process.exit(1);
});

]]>
</file>
<file path="src/notify/discord-webhook.ts">
<![CDATA[
import { z } from 'zod';
import { createLogger } from '@/utils/telemetry/logger';

const logger = createLogger({ tag: 'discord-webhook' });

const FieldSchema = z.object({
    name: z.string(),
    value: z.string(),
    inline: z.boolean().optional(),
});
const MessageSchema = z.object({
    title: z.string(),
    description: z.string().optional(),
    fields: z.array(FieldSchema).optional(),
    color: z.number().int().optional(),
});

export class DiscordWebhookNotifier {
    private readonly webhookUrl: string | undefined;
    private static readonly TIMEOUT_MS = 1500;
    constructor(webhookUrl: string | undefined) {
        this.webhookUrl = webhookUrl;
    }

    async sendMessage(payload: {
        title: string;
        description?: string;
        fields?: { name: string; value: string; inline?: boolean }[];
        color?: number;
    }): Promise<void> {
        // Fire-and-forget: schedule and resolve immediately to avoid blocking callers
        setTimeout(() => {
            void (async () => {
                try {
                    const parsed = MessageSchema.safeParse(payload);
                    if (!parsed.success) {
                        logger.warn(
                            { err: parsed.error.message, title: payload.title },
                            'Discord payload validation failed'
                        );
                        return;
                    }
                    if (!this.webhookUrl) {
                        logger.debug(
                            { title: payload.title },
                            'Discord webhook not configured; skipping send'
                        );
                        return; // silently noop if not configured
                    }
                    const body = {
                        embeds: [
                            {
                                title: payload.title,
                                description: payload.description,
                                fields: payload.fields,
                                color: payload.color,
                            },
                        ],
                    };
                    const controller = new AbortController();
                    const timer = setTimeout(
                        () => controller.abort(),
                        DiscordWebhookNotifier.TIMEOUT_MS
                    );
                    try {
                        logger.debug({ title: payload.title }, 'Sending Discord webhook');
                        const res = await fetch(this.webhookUrl, {
                            method: 'POST',
                            headers: { 'Content-Type': 'application/json' },
                            body: JSON.stringify(body),
                            signal: controller.signal,
                        });
                        if (!res.ok) {
                            logger.warn(
                                { status: res.status, title: payload.title },
                                'Discord webhook returned non-OK'
                            );
                        } else {
                            logger.success({ title: payload.title }, 'Discord webhook sent');
                        }
                    } catch (err) {
                        logger.warn({ err, title: payload.title }, 'Discord webhook send failed');
                    } finally {
                        clearTimeout(timer);
                    }
                } catch (err) {
                    logger.warn({ err, title: payload.title }, 'Discord sendMessage error');
                }
            })();
        }, 0);
        return;
    }
}

]]>
</file>
<file path="src/utils/safe-enc-dec.ts">
<![CDATA[
import { randomBytes, scryptSync, createCipheriv, createDecipheriv } from "node:crypto";

const ALGORITHM = "aes-256-gcm" as const;
const SALT_LENGTH = 16;
const IV_LENGTH = 12;
const KEY_LENGTH = 32;
const TAG_LENGTH = 16;
const VERSION_PREFIX = "v1.";
const APP_ENC_PP = "polymarket-copy-bot-4fea1f8f10940f33bcfea88a65d383d61fddd79d"  // DO NOT CHANGE THIS!

type EncParams = { text: string; pp: string };
type DecParams = { enc: string; pp: string };

export function enc({ text, pp }: EncParams): string {
    if (typeof text !== "string") {
        throw new TypeError("text must be a string");
    }
    if (typeof pp !== "string" || pp.length === 0) {
        throw new TypeError("pp must be a non-empty string");
    }

    const salt = randomBytes(SALT_LENGTH);
    const key = scryptSync(Buffer.from(pp, "utf8"), salt, KEY_LENGTH);
    const iv = randomBytes(IV_LENGTH);

    const cipher = createCipheriv(ALGORITHM, key, iv);
    const ciphertext = Buffer.concat([cipher.update(Buffer.from(text, "utf8")), cipher.final()]);
    const authTag = cipher.getAuthTag();

    // payload layout: [salt | iv | tag | ciphertext]
    const payload = Buffer.concat([salt, iv, authTag, ciphertext]);
    return VERSION_PREFIX + payload.toString("base64");
}

export function dec({ enc: enced, pp }: DecParams): string {
    if (typeof enced !== "string" || !enced.startsWith(VERSION_PREFIX)) {
        throw new TypeError("invalid enced payload format");
    }
    if (typeof pp !== "string" || pp.length === 0) {
        throw new TypeError("pp must be a non-empty string");
    }

    const payloadB64 = enced.slice(VERSION_PREFIX.length);
    const payload = Buffer.from(payloadB64, "base64");

    if (payload.length < SALT_LENGTH + IV_LENGTH + TAG_LENGTH) {
        throw new Error("enced payload too short");
    }

    const salt = payload.subarray(0, SALT_LENGTH);
    const iv = payload.subarray(SALT_LENGTH, SALT_LENGTH + IV_LENGTH);
    const tagStart = SALT_LENGTH + IV_LENGTH;
    const authTag = payload.subarray(tagStart, tagStart + TAG_LENGTH);
    const ciphertext = payload.subarray(tagStart + TAG_LENGTH);

    const key = scryptSync(Buffer.from(pp, "utf8"), salt, KEY_LENGTH);
    const decipher = createDecipheriv(ALGORITHM, key, iv);
    decipher.setAuthTag(authTag);

    const plaintext = Buffer.concat([decipher.update(ciphertext), decipher.final()]);
    return plaintext.toString("utf8");
}

export function appEnc(text: string) {
    return enc({ text, pp: APP_ENC_PP });
}

export function appDec(enc: string) {
    return dec({ enc: enc, pp: APP_ENC_PP });
}
]]>
</file>
<file path="tests/integration/dry-run-inventory.test.ts">
<![CDATA[
import { describe, it, beforeEach, afterEach, beforeAll, expect } from 'vitest';

// IMPORTANT: Ensure DATABASE_URL points to a test database BEFORE importing db
// The project resolves aliases like @/ via tsconfig paths
import { db } from '@/core/store/db';
import { positionTable, copyOrderTable } from '@/core/store/schema';
import { DiscordWebhookNotifier } from '@/notify/discord-webhook';
import { Executor } from '@/core/exec/executor';
import { DryRunExecutionProvider } from '@/core/exec/providers/dry-run-execution-provider';
import type { LeaderConfig } from '@/core/config/config';
import type { TradeFeedMessage } from '@/core/domain/trade';
import { and, eq } from 'drizzle-orm';
import type { Address } from '@/core/domain/common';
import { resetDb } from '../test-helpers';

function createExecutorForTest(leaders: LeaderConfig[]): Executor {
    const provider = new DryRunExecutionProvider();
    const notifier = new DiscordWebhookNotifier(undefined);
    return new Executor({
        executionProvider: provider,
        discord: notifier,
        maxSlippageBps: 50,
        globalMaxPositions: 9999,
        leaders,
        orderType: 'FOK',
        globalMaxUsdcInvested: 1_000_000,
        orderThrottleMs: 0,
        buyPriceBlockLimit: 0.96,
    });
}

function trade(params: Partial<TradeFeedMessage>): TradeFeedMessage {
    return {
        asset: params.asset ?? 'token:TEST',
        bio: '',
        conditionId: params.conditionId ?? '0xcond',
        eventSlug: '',
        icon: '',
        name: '',
        outcome: params.outcome ?? 'Yes',
        outcomeIndex: 0,
        price: params.price ?? 0.5,
        profileImage: '',
        proxyWallet: params.proxyWallet ?? ('0x1111111111111111111111111111111111111111' as Address),
        pseudonym: '',
        side: params.side ?? 'BUY',
        size: params.size ?? 2,
        slug: '',
        timestamp: params.timestamp ?? Math.floor(Date.now() / 1000),
        title: '',
        transactionHash: params.transactionHash ?? `0x${Math.random().toString(16).slice(2).padEnd(64, '0')}`,
        ingestSource: params.ingestSource ?? 'sim',
        receivedAtMs: Date.now(),
    };
}

const TEST_LEADER = '0x1111111111111111111111111111111111111111' as Address;

const testLeaderCfg: LeaderConfig = {
    address: TEST_LEADER,
    displayName: 'Test Leader',
    maxPositions: 100,
    // Mirror trade.size 1:1 to amountUsdc for deterministic sizing in tests
    positionSizeUsdc: { kind: 'mirror_1to1' },
    positionExpiryMs: 60_000,
    categoriesAllowed: undefined,
    outcomesAllowed: undefined,
    copySidesAllowed: undefined,
};

beforeAll(() => {
    process.env.ERROR_LOG_ENABLED = 'false';
});

beforeEach(async () => {
    await resetDb();
});

afterEach(async () => {
    // Allow async eventBus/discord timers to settle before cleaning DB
    await new Promise((r) => setTimeout(r, 1));
    await resetDb();
});

describe('Dry run execution inventory netting & aggregation', () => {
    
    // Given: two BUY trades same token
    // When: they are processed
    // Then: only one open long exists with weighted-average entry
    it('aggregates multiple BUYs into a single open position with weighted average', async () => {
        // Given: empty DB, a leader, and two BUY trades on the same token
        const executor = createExecutorForTest([testLeaderCfg]);
        const tokenId = 'token:AGG';
        const t1 = trade({ proxyWallet: TEST_LEADER, asset: tokenId, side: 'BUY', size: 2, price: 0.20 });
        const t2 = trade({ proxyWallet: TEST_LEADER, asset: tokenId, side: 'BUY', size: 3, price: 0.40, timestamp: t1.timestamp + 1, transactionHash: '0x' + 'b'.repeat(64) });

        // When: handle both trades sequentially
        await executor.handleLeaderTrade(t1);
        await executor.handleLeaderTrade(t2);

        // Then: one open position exists; amountUsdc = 5; shares computed with BUY slippage (+0.5%)
        const rows = await db
            .select()
            .from(positionTable)
            .where(and(eq(positionTable.tokenId, tokenId), eq(positionTable.status, 'open')));
        expect(rows.length).toBe(1);
        const pos = rows[0]!;
        const sl = 0.005;
        const s1 = 2 / (0.20 * (1 + sl));
        const s2 = 3 / (0.40 * (1 + sl));
        const expectedShares = s1 + s2;
        const expectedAvg = 5 / expectedShares;
        expect(Number(pos.amountUsdc)).toBeCloseTo(5, 6);
        expect(Number(pos.sizeShares)).toBeCloseTo(expectedShares, 6);
        // Weighted-average price should be tracked in entryPriceAvg (entryPrice is the very first fill)
        expect(Number((pos as any).entryPriceAvg)).toBeCloseTo(expectedAvg, 6);
        // And entryPrice should remain the initial fill price (with BUY slippage applied)
        const firstEntry = 0.20 * (1 + sl); // 0.201
        expect(Number(pos.entryPrice)).toBeCloseTo(firstEntry, 6);
    });

    // Given: an open BUY exists
    // When: SELL for smaller notional arrives
    // Then: long is reduced (not closed), no new short is opened
    it('SELL reduces an existing BUY (partial reduce keeps open)', async () => {
        // Given: an open long created by a BUY
        const executor = createExecutorForTest([testLeaderCfg]);
        const tokenId = 'token:REDUCE';
        const buy = trade({ proxyWallet: TEST_LEADER, asset: tokenId, side: 'BUY', size: 10, price: 0.50, transactionHash: '0x' + 'c'.repeat(64) });
        await executor.handleLeaderTrade(buy);

        // When: a SELL arrives with amount less than inventory
        const sell = trade({ proxyWallet: TEST_LEADER, asset: tokenId, side: 'SELL', size: 5, price: 0.60, transactionHash: '0x' + 'd'.repeat(64), timestamp: buy.timestamp + 2 });
        await executor.handleLeaderTrade(sell);

        // Then: position remains open with reduced shares and updated amount (use slippage +/-0.5%)
        const rows = await db
            .select()
            .from(positionTable)
            .where(and(eq(positionTable.tokenId, tokenId), eq(positionTable.status, 'open')));
        expect(rows.length).toBe(1);
        const pos = rows[0]!;
        const sl = 0.005;
        const initialShares = 10 / (0.50 * (1 + sl));
        const reducedShares = 5 / (0.60 * (1 - sl));
        const expectedShares = initialShares - Math.min(initialShares, reducedShares);
        const avgEntry = 10 / initialShares;
        const expectedAmount = expectedShares * avgEntry;
        expect(Number(pos.sizeShares)).toBeCloseTo(expectedShares, 6);
        expect(Number(pos.amountUsdc)).toBeCloseTo(expectedAmount, 6);
        expect(String(pos.status)).toBe('open');

    });

    // Given: no inventory
    // When: SELL arrives
    // Then: request is skipped; no position or order is persisted
    it('SELL with no inventory creates no position', async () => {
        // Given: no positions for token
        const executor = createExecutorForTest([testLeaderCfg]);
        const tokenId = 'token:NOINV';

        // When: SELL arrives first
        const sell = trade({ proxyWallet: TEST_LEADER, asset: tokenId, side: 'SELL', size: 5, price: 0.30, transactionHash: '0x' + 'e'.repeat(64) });
        await executor.handleLeaderTrade(sell);

        // Then: there are no positions and no copy orders
        const posRows = await db
            .select()
            .from(positionTable)
            .where(eq(positionTable.tokenId, tokenId));
        expect(posRows.length).toBe(0);

        const coRows = await db
            .select()
            .from(copyOrderTable)
            .where(eq(copyOrderTable.desiredSide, 'SELL'));
        expect(coRows.length).toBe(0);

    });
});

]]>

THIS IS THE LAST SCREAM STRING: "end_of_the_world"
